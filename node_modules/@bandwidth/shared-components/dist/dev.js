'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var reactCollapse = require('react-collapse');
var styled = require('styled-components');
var styled__default = _interopDefault(styled);
var ReactDOM = require('react-dom');
var ReactDOM__default = _interopDefault(ReactDOM);
var reactTransitionGroup = require('react-transition-group');
var reactDnd = require('react-dnd');
var HTML5Backend = require('react-dnd-html5-backend');
var HTML5Backend__default = _interopDefault(HTML5Backend);
var reactPopper = require('react-popper');
require('react-dates/initialize');
var reactDates = require('react-dates');
var Dropzone = _interopDefault(require('react-dropzone'));
var reactIs = require('react-is');

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var classCallCheck = _classCallCheck;

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var createClass = _createClass;

var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function commonjsRequire () {
	throw new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');
}

function unwrapExports (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x.default : x;
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var _typeof_1 = createCommonjsModule(function (module) {
function _typeof2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

function _typeof(obj) {
  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
    module.exports = _typeof = function _typeof(obj) {
      return _typeof2(obj);
    };
  } else {
    module.exports = _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
    };
  }

  return _typeof(obj);
}

module.exports = _typeof;
});

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

var assertThisInitialized = _assertThisInitialized;

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof_1(call) === "object" || typeof call === "function")) {
    return call;
  }

  return assertThisInitialized(self);
}

var possibleConstructorReturn = _possibleConstructorReturn;

var getPrototypeOf = createCommonjsModule(function (module) {
function _getPrototypeOf(o) {
  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

module.exports = _getPrototypeOf;
});

var setPrototypeOf = createCommonjsModule(function (module) {
function _setPrototypeOf(o, p) {
  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

module.exports = _setPrototypeOf;
});

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) setPrototypeOf(subClass, superClass);
}

var inherits = _inherits;

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var defineProperty = _defineProperty;

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

var ReactPropTypesSecret_1 = ReactPropTypesSecret;

var printWarning = function() {};

{
  var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;
  var loggedTypeFailures = {};

  printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  {
    for (var typeSpecName in typeSpecs) {
      if (typeSpecs.hasOwnProperty(typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error(
              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
            );
            err.name = 'Invariant Violation';
            throw err;
          }
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$1);
        } catch (ex) {
          error = ex;
        }
        if (error && !(error instanceof Error)) {
          printWarning(
            (componentName || 'React class') + ': type specification of ' +
            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
            'You may have forgotten to pass an argument to the type checker ' +
            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
            'shape all require an argument).'
          );

        }
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          printWarning(
            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
          );
        }
      }
    }
  }
}

var checkPropTypes_1 = checkPropTypes;

var printWarning$1 = function() {};

{
  printWarning$1 = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

function emptyFunctionThatReturnsNull() {
  return null;
}

var factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker,
    exact: createStrictShapeTypeChecker,
  };

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /*eslint-disable no-self-compare*/
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */
  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  }
  // Make `instanceof Error` still work for returned errors.
  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret_1) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          var err = new Error(
            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
            'Use `PropTypes.checkPropTypes()` to call them. ' +
            'Read more at http://fb.me/use-check-prop-types'
          );
          err.name = 'Invariant Violation';
          throw err;
        } else if (typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;
          if (
            !manualPropTypeCallCache[cacheKey] &&
            // Avoid spamming the console because they are often not actionable except for lib authors
            manualPropTypeWarningCount < 3
          ) {
            printWarning$1(
              'You are manually calling a React.PropTypes validation ' +
              'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +
              'and will throw in the standalone `prop-types` package. ' +
              'You may be seeing this warning due to a third-party PropTypes ' +
              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
            );
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret_1);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      printWarning$1('Invalid argument supplied to oneOf, expected an instance of array.');
      return emptyFunctionThatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues);
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (propValue.hasOwnProperty(key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      printWarning$1('Invalid argument supplied to oneOfType, expected an instance of array.');
      return emptyFunctionThatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        printWarning$1(
          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
        );
        return emptyFunctionThatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret_1) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createStrictShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      // We need to check all keys in case some are required but missing from
      // props.
      var allKeys = objectAssign({}, props[propName], shapeTypes);
      for (var key in allKeys) {
        var checker = shapeTypes[key];
        if (!checker) {
          return new PropTypeError(
            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
          );
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
        if (error) {
          return error;
        }
      }
      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    }

    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"
  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }

  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes_1;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

var propTypes = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

{
  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&
    Symbol.for &&
    Symbol.for('react.element')) ||
    0xeac7;

  var isValidElement = function(object) {
    return typeof object === 'object' &&
      object !== null &&
      object.$$typeof === REACT_ELEMENT_TYPE;
  };

  // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod
  var throwOnDirectAccess = true;
  module.exports = factoryWithTypeCheckers(isValidElement, throwOnDirectAccess);
}
});

/**
 * Lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    nullTag = '[object Null]',
    proxyTag = '[object Proxy]',
    undefinedTag = '[object Undefined]';

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$1 = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var Symbol$1 = root.Symbol,
    symToStringTag = Symbol$1 ? Symbol$1.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty$1.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

var lodash_isfunction = isFunction;

/**
 * A prototypical accordion element with no styling. Renders one element which can be
 * clicked to toggle expanded state, and an expandable content area.
 */

var ExpandToggle =
/*#__PURE__*/
function (_React$Component) {
  inherits(ExpandToggle, _React$Component);

  function ExpandToggle(props) {
    var _this;

    classCallCheck(this, ExpandToggle);

    _this = possibleConstructorReturn(this, getPrototypeOf(ExpandToggle).call(this, props));

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleToggle", function () {
      if (_this.props.disabled) {
        return;
      }

      if (_this.props.onToggle) {
        _this.props.onToggle(_this.calcIsExpanded());
      }

      _this.setState(function (state) {
        return {
          internalIsExpanded: !state.internalIsExpanded
        };
      });
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "calcIsExpanded", function () {
      var isExpanded = _this.props.isExpanded;
      var internalIsExpanded = _this.state.internalIsExpanded;

      if (isExpanded === null) {
        return internalIsExpanded;
      }

      return isExpanded;
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "renderToggle", function () {
      var _this$props = _this.props,
          toggleContent = _this$props.toggleContent,
          disabled = _this$props.disabled;

      if (lodash_isfunction(toggleContent)) {
        return toggleContent(_this.calcIsExpanded(), disabled);
      }

      return toggleContent;
    });

    _this.state = {
      internalIsExpanded: props.startExpanded
    };
    return _this;
  }

  createClass(ExpandToggle, [{
    key: "render",
    value: function render() {
      var isExpanded = this.calcIsExpanded();
      var _this$props2 = this.props,
          children = _this$props2.children,
          id = _this$props2.id,
          className = _this$props2.className,
          springConfig = _this$props2.springConfig,
          disabled = _this$props2.disabled,
          unmountClosed = _this$props2.unmountClosed;
      var CollapseType = unmountClosed ? reactCollapse.UnmountClosed : reactCollapse.Collapse;
      return React__default.createElement("div", {
        id: id,
        className: className
      }, React__default.createElement("div", {
        style: {
          cursor: disabled ? 'auto' : 'pointer'
        },
        onClick: this.handleToggle
      }, this.renderToggle()), React__default.createElement(CollapseType, {
        hasNestedCollapse: true,
        isOpened: isExpanded,
        springConfig: springConfig
      }, children));
    }
  }]);

  return ExpandToggle;
}(React__default.Component);

defineProperty(ExpandToggle, "propTypes", {
  /**
   * Sets the id of the containing collapsible element
   */
  id: propTypes.string,

  /**
   * Sets the className of the containing collapsible element
   */
  className: propTypes.string,

  /**
   * Callback for toggle events
   */
  onToggle: propTypes.func,

  /**
   * Content to render within the toggle area. You may optionally pass a function,
   * which will be called with the current toggle on/off state.
   */
  toggleContent: propTypes.oneOfType([propTypes.func, propTypes.node]).isRequired,

  /**
   * Override ('control') toggling behavior, disabling default internal toggle state
   */
  isExpanded: propTypes.bool,

  /**
   * Content to render inside the collapsible area
   */
  children: propTypes.node.isRequired,

  /**
   * Whether to start expanded
   */
  startExpanded: propTypes.bool,

  /**
   * If true, the user cannot change the state
   */
  disabled: propTypes.bool,

  /**
   * If true, contents are unmounted when the accordion is closed.
   */
  unmountClosed: propTypes.bool,

  /**
   * react-motion config, see https://github.com/chenglou/react-motion#--spring-val-number-config-springhelperconfig--opaqueconfig
   */
  springConfig: propTypes.shape({
    stiffness: propTypes.number,
    damping: propTypes.number,
    precision: propTypes.number
  })
});

defineProperty(ExpandToggle, "defaultProps", {
  id: null,
  className: null,
  onToggle: function onToggle() {
    return null;
  },
  isExpanded: null,
  startExpanded: false,
  springConfig: null,
  disabled: false,
  toggleContent: null,
  unmountClosed: false
});

/**
 * lodash 3.0.1 (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize include="noop" exports="npm" -o ./foo`
 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */

/**
 * A no-operation function that returns `undefined` regardless of the
 * arguments it receives.
 *
 * @static
 * @memberOf _
 * @category Util
 * @example
 *
 * var object = { 'user': 'fred' };
 *
 * _.noop(object) === undefined;
 * // => true
 */
function noop() {
  // No operation performed.
}

var lodash_noop = noop;

/**
 * `Selectable` is a general purpose behavior that keeps track of items that have been selected. It uses a render prop and
 * passes in the set of currently selected items as well as functions to select or deselect additional items. Items are
 * tracked by a key value that is passed into the `selectItem` and `deselectItem` functions and tracked in the `selected` `Set`.
 * Since `Selectable` uses a render prop, it can easily be used in conjunction with a wide range of components.
 * It is primarily useful in cases where selection state is ephemeral and doesn't trigger application state changes.
 */

var Selectable$1 =
/*#__PURE__*/
function (_React$Component) {
  inherits(Selectable, _React$Component);

  function Selectable(props) {
    var _this;

    classCallCheck(this, Selectable);

    _this = possibleConstructorReturn(this, getPrototypeOf(Selectable).call(this, props));

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "selectItem", function (key) {
      var _assertThisInitialize = assertThisInitialized(assertThisInitialized(_this)),
          _assertThisInitialize2 = _assertThisInitialize.props,
          onItemSelected = _assertThisInitialize2.onItemSelected,
          exclusive = _assertThisInitialize2.exclusive,
          selected = _assertThisInitialize.state.selected,
          deselectItem = _assertThisInitialize.deselectItem;

      if (selected.has(key)) {
        return;
      }

      if (exclusive) {
        Array.from(selected).map(deselectItem);
      }

      onItemSelected(key);

      _this.setState(function (state) {
        return {
          selected: state.selected.add(key)
        };
      });
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "deselectItem", function (key) {
      var _assertThisInitialize3 = assertThisInitialized(assertThisInitialized(_this)),
          onItemDeselected = _assertThisInitialize3.props.onItemDeselected,
          selected = _assertThisInitialize3.state.selected;

      if (!selected.has(key)) {
        return;
      }

      onItemDeselected(key);

      _this.setState(function (state) {
        state.selected.delete(key);
        return {
          selected: state.selected
        };
      });
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "toggleItem", function (key) {
      var _assertThisInitialize4 = assertThisInitialized(assertThisInitialized(_this)),
          selected = _assertThisInitialize4.state.selected,
          selectItem = _assertThisInitialize4.selectItem,
          deselectItem = _assertThisInitialize4.deselectItem;

      selected.has(key) ? deselectItem(key) : selectItem(key);
    });

    var _selected = new Set();

    if (props.initial) _selected.add(props.initial);
    _this.state = {
      selected: _selected
    };
    return _this;
  }

  createClass(Selectable, [{
    key: "render",
    value: function render() {
      var render = this.props.render,
          selected = this.state.selected,
          selectItem = this.selectItem,
          deselectItem = this.deselectItem,
          toggleItem = this.toggleItem;
      return render({
        selectItem: selectItem,
        deselectItem: deselectItem,
        toggleItem: toggleItem,
        selected: selected
      });
    }
  }]);

  return Selectable;
}(React__default.Component);

defineProperty(Selectable$1, "propTypes", {
  /**
   * Render prop to render the selectable items. Supports the following props:
   *
   * *selectItem*: A function that should be invoked with a unique key as its argument whenever an item should be selected.
   *
   * *deselectItem*: A function that should be invoked with a unique key as its argument whenever an item should be deselected.
   *
   * *toggleItem*: A function that should be invoked with a unique key as its argument whenever an item should be toggled.
   *
   * *selected*: A **Set** of selected items represented by their key values.
   */
  render: propTypes.func,

  /**
   * Callback for when an item is selected. Passed one argument, which is the key of the item that was selected.
   */
  onItemSelected: propTypes.func,

  /**
   * Callback for when an item is deselected. Passed one argument, which is the key of the item that was deselected.
   */
  onItemDeselected: propTypes.func,

  /**
   * Limits selection to only one item at a time.
   */
  exclusive: propTypes.bool,

  /**
   * Control the inital selection.
   */
  initial: propTypes.any
});

defineProperty(Selectable$1, "defaultProps", {
  render: lodash_noop,
  onItemSelected: lodash_noop,
  onItemDeselected: lodash_noop
});

var _extends_1 = createCommonjsModule(function (module) {
function _extends() {
  module.exports = _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

module.exports = _extends;
});

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var objectWithoutPropertiesLoose = _objectWithoutPropertiesLoose;

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = objectWithoutPropertiesLoose(source, excluded);
  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

var objectWithoutProperties = _objectWithoutProperties;

var DefaultContainer = styled__default.div.withConfig({
  displayName: "DefaultContainer",
  componentId: "sc-4zzb30-0"
})(["position:relative;overflow:hidden;height:", ";width:", ";"], function (props) {
  return props.horizontal ? 'auto' : '100%';
}, function (props) {
  return props.horizontal ? '100%' : 'auto';
});

var DefaultScrollContainer = styled__default.div.withConfig({
  displayName: "DefaultScrollContainer",
  componentId: "sc-6m0797-0"
})(["position:relative;overflow-y:", ";overflow-x:", ";height:", ";width:", ";display:", ";flex-direction:", ";& > *{flex:0 0 auto;}"], function (props) {
  return props.horizontal ? 'hidden' : 'auto';
}, function (props) {
  return props.horizontal ? 'auto' : 'hidden';
}, function (props) {
  return props.horizontal ? 'auto' : '100%';
}, function (props) {
  return props.horizontal ? '100%' : 'auto';
}, function (props) {
  return props.horizontal ? 'flex' : 'block';
}, function (props) {
  return props.horizontal ? 'row' : 'none';
});

var Sentinel = styled__default.div.withConfig({
  displayName: "Sentinel",
  componentId: "sc-3ka3ey-0"
})(["background:", ";z-index:", ";&.global{position:absolute;}&.global.top{top:0;}&.global.bottom{bottom:0;}&.top,&.bottom{height:", ";width:", ";}&.global.left{left:0;}&.global.right{right:0;}&.right{width:1px;}&.left{width:", ";}&.left,&.right{height:", ";}"], function (props) {
  return props.debugShow ? 'red' : 'transparent';
}, function (props) {
  return props.debugShow ? '100000' : '0';
}, function (props) {
  return props.debugShow ? '1px' : '0px';
}, function (props) {
  return props.debugShow ? '100%' : 'auto';
}, function (props) {
  return props.debugShow ? '1px' : '0px';
}, function (props) {
  return props.debugShow ? '100%' : 'auto';
});

/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

var isBuffer = function isBuffer (obj) {
  return obj != null && obj.constructor != null &&
    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
};

var flat = flatten;
flatten.flatten = flatten;
flatten.unflatten = unflatten;

function flatten (target, opts) {
  opts = opts || {};

  var delimiter = opts.delimiter || '.';
  var maxDepth = opts.maxDepth;
  var output = {};

  function step (object, prev, currentDepth) {
    currentDepth = currentDepth || 1;
    Object.keys(object).forEach(function (key) {
      var value = object[key];
      var isarray = opts.safe && Array.isArray(value);
      var type = Object.prototype.toString.call(value);
      var isbuffer = isBuffer(value);
      var isobject = (
        type === '[object Object]' ||
        type === '[object Array]'
      );

      var newKey = prev
        ? prev + delimiter + key
        : key;

      if (!isarray && !isbuffer && isobject && Object.keys(value).length &&
        (!opts.maxDepth || currentDepth < maxDepth)) {
        return step(value, newKey, currentDepth + 1)
      }

      output[newKey] = value;
    });
  }

  step(target);

  return output
}

function unflatten (target, opts) {
  opts = opts || {};

  var delimiter = opts.delimiter || '.';
  var overwrite = opts.overwrite || false;
  var result = {};

  var isbuffer = isBuffer(target);
  if (isbuffer || Object.prototype.toString.call(target) !== '[object Object]') {
    return target
  }

  // safely ensure that the key is
  // an integer.
  function getkey (key) {
    var parsedKey = Number(key);

    return (
      isNaN(parsedKey) ||
      key.indexOf('.') !== -1 ||
      opts.object
    ) ? key
      : parsedKey
  }

  var sortedKeys = Object.keys(target).sort(function (keyA, keyB) {
    return keyA.length - keyB.length
  });

  sortedKeys.forEach(function (key) {
    var split = key.split(delimiter);
    var key1 = getkey(split.shift());
    var key2 = getkey(split[0]);
    var recipient = result;

    while (key2 !== undefined) {
      var type = Object.prototype.toString.call(recipient[key1]);
      var isobject = (
        type === '[object Object]' ||
        type === '[object Array]'
      );

      // do not write over falsey, non-undefined values if overwrite is false
      if (!overwrite && !isobject && typeof recipient[key1] !== 'undefined') {
        return
      }

      if ((overwrite && !isobject) || (!overwrite && recipient[key1] == null)) {
        recipient[key1] = (
          typeof key2 === 'number' &&
          !opts.object ? [] : {}
        );
      }

      recipient = recipient[key1];
      if (split.length > 0) {
        key1 = getkey(split.shift());
        key2 = getkey(split[0]);
      }
    }

    // unflatten again for 'messy objects'
    recipient[key1] = unflatten(target[key], opts);
  });

  return result
}

// into a css var key (--colors-primary-default).

var cssvarKey = function cssvarKey(k) {
  return "--".concat(k.replace(/\./g, '-').replace(/[A-Z]/g, function (g) {
    return "-".concat(g[0].toLowerCase());
  }));
};
/**
Converts nested dictionary of keys with css values into a flat dictionary
of cssvars to those same values. For example:

{
  colors: {
    black: "#000"
  }
}

becomes

{
  "--colors-black": "#000"
}
*/

var cssvars = (function (obj) {
  if (!obj) {
    return '';
  }

  var flatObj = flat(obj);
  return Object.keys(flatObj).map(function (k) {
    return "".concat(cssvarKey(k), ": ").concat(flatObj[k], ";");
  });
});

/*
  A theme that uses the new (circa 2017) 'amoeba' brand colors.
*/
var colors = {
  primary: {
    default: '#00bef0',
    alternate: '#008db1',
    light: '#e0f7fd',
    border: '#00bef0',
    dark: '#004658'
  },

  /* aka 'green' */
  positive: {
    default: '#00aa6c',
    light: '#e0fff7',
    border: '#00fbb9',
    dark: '#005c44',
    medium: '#00aa6c'
  },

  /* aka 'red' */
  negative: {
    default: '#e9562e',
    light: '#ffede8',
    border: '#ffb39e',
    dark: '#a53f0c',
    medium: '#ff391a'
  },
  accents: [
  /* purple */
  {
    default: '#a95adf'
  },
  /* orange */
  {
    default: '#ff673c'
  }],
  gray: {
    /* aka medium */
    default: '#666',
    light: '#f7f7f7',
    border: '#c2c2c2',
    borderLight: '#e1e1e1',
    disabled: '#e1e1e1',
    dark: '#272b2d',

    /* aka help-text */
    medium: '#7f8897',
    mediumLight: '#dedede'
  },
  shadow: {
    default: 'rgba(0, 0, 0, 0.3)',
    light: 'rgba(0, 0, 0, 0.12)',
    extraLight: 'rgba(0, 0, 0, 0.05)',
    white: 'rgba(255, 255, 255, 0.3)'
  },
  graphics: ['#41d3bd', '#a95adf'],
  border: {
    medium: '#c2c2c2',
    dark: '#004658',
    light: '#e1e1e1',
    disabled: '#d2d2d2'
  },
  background: {
    default: '#fff',
    inverted: '#272b2d',
    disabled: '#ececec',
    disabledSelected: '#d2d2d2',
    dark: '#004658'
  },
  text: {
    default: '#666',
    inverted: '#fff',
    disabled: '#c2c2c2'
  }
};
var fonts = {
  brand: '"Overpass", Raleway, "Open Sans", arial, sans-serif',
  default: '"Overpass", Raleway, "Open Sans", arial, sans-serif',
  monospace: '"Source Code Pro", monospace',
  icon: 'Bandwidth'
};
var shadows = {
  short: '0 2px 4px rgba(0, 0, 0, 0.14)',
  long: "\n    0 2px 2px 0 rgba(0, 0, 0, 0.14),\n    0 1px 5px 0 rgba(0, 0, 0, 0.12),\n    0 3px 1px -2px rgba(0 ,0, 0, 0.2)\n    ",
  focusOutline: '0 0 0 5px #e0f7fd'
};
var spacing = {
  extraSmall: '5px',
  small: '10px',
  medium: '15px',
  large: '30px',
  extraLarge: '60px'
};
var thicknesses = {
  normal: '1px',
  default: '1px',
  wide: '2px',
  thick: '2px',
  large: '2px',
  extraWide: '3px',
  extraLarge: '3px'
};
var fontSizes = {
  default: '14px'
};
var irisTheme = {
  name: 'iris',
  colors: colors,
  fonts: fonts,
  shadows: shadows,
  spacing: spacing,
  thicknesses: thicknesses,
  fontSizes: fontSizes
};

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** `Object#toString` result references. */
var funcTag$1 = '[object Function]',
    genTag$1 = '[object GeneratorFunction]',
    symbolTag = '[object Symbol]';

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/,
    reLeadingDot = /^\./,
    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Detect free variable `global` from Node.js. */
var freeGlobal$1 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

/** Detect free variable `self`. */
var freeSelf$1 = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root$1 = freeGlobal$1 || freeSelf$1 || Function('return this')();

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */
function isHostObject(value) {
  // Many host objects are `Object` objects that can coerce to strings
  // despite having improperly defined `toString` methods.
  var result = false;
  if (value != null && typeof value.toString != 'function') {
    try {
      result = !!(value + '');
    } catch (e) {}
  }
  return result;
}

/** Used for built-in method references. */
var arrayProto = Array.prototype,
    funcProto = Function.prototype,
    objectProto$1 = Object.prototype;

/** Used to detect overreaching core-js shims. */
var coreJsData = root$1['__core-js_shared__'];

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty$2 = objectProto$1.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString$1 = objectProto$1.toString;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty$2).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/** Built-in value references. */
var Symbol$2 = root$1.Symbol,
    splice = arrayProto.splice;

/* Built-in method references that are verified to be native. */
var Map = getNative(root$1, 'Map'),
    nativeCreate = getNative(Object, 'create');

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol$2 ? Symbol$2.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  return this.has(key) && delete this.__data__[key];
}

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty$2.call(data, key) ? data[key] : undefined;
}

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== undefined : hasOwnProperty$2.call(data, key);
}

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
}

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  return true;
}

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  return getMapData(this, key)['delete'](key);
}

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  getMapData(this, key).set(key, value);
  return this;
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = isKey(path, object) ? [path] : castPath(path);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject$1(value) || isMasked(value)) {
    return false;
  }
  var pattern = (isFunction$1(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value) {
  return isArray(value) ? value : stringToPath(value);
}

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoize(function(string) {
  string = toString(string);

  var result = [];
  if (reLeadingDot.test(string)) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, string) {
    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to process.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result);
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache);
  return memoized;
}

// Assign cache to `_.memoize`.
memoize.Cache = MapCache;

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction$1(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject$1(value) ? objectToString$1.call(value) : '';
  return tag == funcTag$1 || tag == genTag$1;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject$1(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && objectToString$1.call(value) == symbolTag);
}

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get$1(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

var lodash_get = get$1;

/**
 * @deprecated Provided only to support the legacy theme system.
 * Converts a JSON key (spacing.medium) into a cssvar (var(--spacing-medium)).
 */

var themeGet = function themeGet(k) {
  return function (props) {
    return window.CSS && window.CSS.supports('--css-var', 0) ? "var(".concat(cssvarKey(k), ")") : lodash_get(irisTheme, k);
  };
};

var ShadowOverlay = styled__default.div.withConfig({
  displayName: "ShadowOverlay",
  componentId: "mmeqby-0"
})(["transition:0.05s ease box-shadow;position:", ";z-index:", ";top:0;left:0;right:0;bottom:0;pointer-events:none;&.outer.top{box-shadow:0 -15px 10px -10px transparent,0 15px 10px -10px ", ";}&.outer.bottom{box-shadow:0 -15px 10px -10px ", ",0 15px 10px -10px transparent;}&.outer.topBottom{box-shadow:0 -15px 10px -10px ", ",0 15px 10px -10px ", ";}&.inner.top{box-shadow:inset 0 -15px 10px -10px transparent,inset 0 15px 10px -10px ", ";}&.inner.bottom{box-shadow:inset 0 -15px 10px -10px ", ",inset 0 15px 10px -10px transparent;}&.inner.topBottom{box-shadow:inset 0 -15px 10px -10px ", ",inset 0 15px 10px -10px ", ";}&.inner.left{box-shadow:inset -15px 0 10px -10px transparent,inset 15px 0 10px -10px ", ";}&.inner.right{box-shadow:inset -15px 0 10px -10px ", ",inset 15px 0 10px -10px transparent;}&.inner.leftRight{box-shadow:inset -15px 0 10px -10px ", ",inset 15px 0 10px -10px ", ";}"], function (props) {
  return props.entireViewport ? 'fixed' : 'absolute';
}, function (props) {
  return props.entireViewport ? 'auto' : '5';
}, themeGet('colors.shadow.light'), themeGet('colors.shadow.light'), themeGet('colors.shadow.light'), themeGet('colors.shadow.light'), themeGet('colors.shadow.light'), themeGet('colors.shadow.light'), themeGet('colors.shadow.light'), themeGet('colors.shadow.light'), themeGet('colors.shadow.light'), themeGet('colors.shadow.light'), themeGet('colors.shadow.light'), themeGet('colors.shadow.light'));



var styles = /*#__PURE__*/Object.freeze({
  DefaultContainer: DefaultContainer,
  DefaultScrollContainer: DefaultScrollContainer,
  Sentinel: Sentinel,
  ShadowOverlay: ShadowOverlay
});

var _createContext = React.createContext(function () {
  return function () {};
}),
    Provider = _createContext.Provider,
    Consumer = _createContext.Consumer;
/**
 * A scrolling container which has a shadow effect to indicate that there is more
 * content above or below. This element also creates a context which can inform
 * components below it in the tree of the scroll state of the scrolling container.
 */


var ScrollShadow =
/*#__PURE__*/
function (_React$Component) {
  inherits(ScrollShadow, _React$Component);

  function ScrollShadow() {
    var _getPrototypeOf2;

    var _this;

    classCallCheck(this, ScrollShadow);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(ScrollShadow)).call.apply(_getPrototypeOf2, [this].concat(args)));

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "startSentinelRef", React.createRef());

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "endSentinelRef", React.createRef());

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "isStartSentinelVisible", true);

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "isEndSentinelVisible", false);

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "calcShadowMode", function () {
      var horizontal = _this.props.horizontal;
      var start = !_this.isStartSentinelVisible;
      var end = !_this.isEndSentinelVisible;

      if (start && end) {
        return horizontal ? 'leftRight' : 'topBottom';
      } else if (start) {
        return horizontal ? 'left' : 'top';
      } else if (end) {
        return horizontal ? 'right' : 'bottom';
      } else {
        return 'none';
      }
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleSentinelIntersection", function (entries, observer) {
      // `entries` is an array of records, one per changed sentinel.
      entries.forEach(function (entry) {
        if (entry.target === _this.startSentinelRef.current) {
          _this.isStartSentinelVisible = entry.isIntersecting;
        } else if (entry.target === _this.endSentinelRef.current) {
          _this.isEndSentinelVisible = entry.isIntersecting;
        }

        var currentMode = _this.calcShadowMode();
        /**
         * Iterate over every registered shadow element to update their styles
         * if they need to change.
         */


        Object.values(_this.shadowElementRegistrations).forEach(function (registration) {
          var ref = registration.ref,
              mode = registration.mode; // we don't want to recalculate styles needlessly, so we also ensure
          // the mode has changed since last style assignment

          if (ref.current && mode !== currentMode) {
            // reset classes
            ref.current.classList.remove('top', 'bottom', 'topBottom', 'left', 'right', 'leftRight');
            ref.current.classList.add(currentMode);
            registration.mode = currentMode;
          }
        });
      });
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "scrollElementRef", function (el) {
      if (_this.sentinelIntersectionObserver) {
        _this.sentinelIntersectionObserver.disconnect();
      }

      _this.sentinelIntersectionObserver = new window.IntersectionObserver(_this.handleSentinelIntersection, {
        root: el
      });

      _this.sentinelIntersectionObserver.observe(_this.startSentinelRef.current);

      _this.sentinelIntersectionObserver.observe(_this.endSentinelRef.current);
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "shadowElementRegistrations", {});

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "getShadowElementRef", function (name) {
      if (!_this.shadowElementRegistrations[name]) {
        _this.shadowElementRegistrations[name] = {
          ref: React.createRef()
        };
      }

      return _this.shadowElementRegistrations[name].ref;
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "renderGlobalSentinels", function () {
      var _this$props = _this.props,
          horizontal = _this$props.horizontal,
          Sentinel$$1 = _this$props.Sentinel;
      return ReactDOM.createPortal(React__default.createElement(React__default.Fragment, null, React__default.createElement(Sentinel$$1, {
        ref: _this.startSentinelRef,
        className: "scroll-shadow-sentinel ".concat(horizontal ? 'left' : 'top', " global"),
        debugShow: _this.props.debugShowSentinels
      }), React__default.createElement(Sentinel$$1, {
        ref: _this.endSentinelRef,
        className: "scroll-shadow-sentinel ".concat(horizontal ? 'right' : 'bottom', " global"),
        debugShow: _this.props.debugShowSentinels
      })), window.document.body);
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "renderChildren", function () {
      var _this$props2 = _this.props,
          children = _this$props2.children,
          global = _this$props2.global,
          Container = _this$props2.Container,
          ScrollContainer = _this$props2.ScrollContainer,
          Sentinel$$1 = _this$props2.Sentinel,
          disabled = _this$props2.disabled,
          outer = _this$props2.outer,
          horizontal = _this$props2.horizontal,
          ShadowOverlay$$1 = _this$props2.ShadowOverlay,
          extraProps = objectWithoutProperties(_this$props2, ["children", "global", "Container", "ScrollContainer", "Sentinel", "disabled", "outer", "horizontal", "ShadowOverlay"]); // we will be rendering something slightly different if we are in global mode


      if (global) {
        return React__default.createElement(React__default.Fragment, null, children, _this.renderGlobalSentinels(), !disabled && React__default.createElement(ShadowOverlay$$1, {
          className: "scroll-shadow inner",
          entireViewport: true,
          ref: _this.getShadowElementRef('built-in')
        }));
      }

      var shadowPlacement = outer ? 'outer' : 'inner';
      return React__default.createElement(Container, _extends_1({
        horizontal: horizontal,
        className: "scroll-shadow-container"
      }, extraProps), React__default.createElement(ScrollContainer, _extends_1({
        horizontal: horizontal,
        ref: _this.scrollElementRef
      }, extraProps), React__default.createElement(Sentinel$$1, {
        ref: _this.startSentinelRef,
        className: "scroll-shadow-sentinel ".concat(horizontal ? 'left' : 'top'),
        debugShow: _this.props.debugShowSentinels
      }), children, React__default.createElement(Sentinel$$1, {
        ref: _this.endSentinelRef,
        className: "scroll-shadow-sentinel ".concat(horizontal ? 'right' : 'bottom'),
        debugShow: _this.props.debugShowSentinels
      })), !disabled && React__default.createElement(ShadowOverlay$$1, {
        className: "scroll-shadow ".concat(shadowPlacement),
        ref: _this.getShadowElementRef('built-in')
      }));
    });

    return _this;
  }

  createClass(ScrollShadow, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.global) {
        /**
         * In global mode, the entire window is our scroll context. We can do that by
         * passing 'null' as the context element for the IntersectionObserver.
         * As documented, it will use the visible window area as the intersection
         * boundary.
         */
        this.scrollElementRef(null);
      }
    }
    /**
     * Simply figures out where the shadows should be based on which boundaries
     * are visible right now.
     */

  }, {
    key: "render",
    value: function render() {
      return React__default.createElement(Provider, {
        value: this.getShadowElementRef
      }, this.renderChildren());
    }
  }]);

  return ScrollShadow;
}(React__default.Component);
/**
 * A ConnectedShadow is a shadow element which gets its shadow mode from
 * a ScrollShadow context higher in the React tree. Using this, you can
 * add some shadows to 'unrelated' elements which respond to the
 * scroll state of the containing scroll element. This is good for
 * advanced use cases, like rendering an element which hovers over
 * a scroll container.
 */


defineProperty(ScrollShadow, "propTypes", {
  /**
   * This ScrollShadow should listen to the global window scroll value. Only one
   * such ScrollShadow should be present in your application.
   */
  global: propTypes.bool,

  /**
   * Switches the scrolling to horizontal mode
   */
  horizontal: propTypes.bool,

  /**
   * Customize the outer container element by passing a component here. Your element
   * MUST have relative or absolute positioning applied!
   */
  Container: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * Customize the scroll container element by passing a component here. Your element
   * MUST have relative or absolute positioning, an overflow mode, and accept a
   * ref prop!
   */
  ScrollContainer: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A component responsible for monitoring the position of the scroll using its own
   * visibility. You probably don't want to override this.
   */
  Sentinel: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A component responsible for rendering the shadow over the top of the scroll
   * area. You probably don't want to override this.
   */
  ShadowOverlay: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * Flip this to true to show a red line where the scroll sentinel elements are.
   * Can be useful for debugging if the shadows don't seem to work correctly.
   */
  debugShowSentinels: propTypes.bool
});

defineProperty(ScrollShadow, "defaultProps", {
  global: false,
  horizontal: false,
  Container: DefaultContainer,
  ScrollContainer: DefaultScrollContainer,
  Sentinel: Sentinel,
  ShadowOverlay: ShadowOverlay,
  debugShowSentinels: false
});

defineProperty(ScrollShadow, "styles", styles);
var ConnectedShadow =
/*#__PURE__*/
function (_React$PureComponent) {
  inherits(ConnectedShadow, _React$PureComponent);

  function ConnectedShadow() {
    var _getPrototypeOf3;

    var _this2;

    classCallCheck(this, ConnectedShadow);

    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    _this2 = possibleConstructorReturn(this, (_getPrototypeOf3 = getPrototypeOf(ConnectedShadow)).call.apply(_getPrototypeOf3, [this].concat(args)));

    defineProperty(assertThisInitialized(assertThisInitialized(_this2)), "generatedName", "shadow".concat(Math.floor(Math.random() * 100000)));

    return _this2;
  }

  createClass(ConnectedShadow, [{
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          outer = _this$props3.outer,
          entireViewport = _this$props3.entireViewport,
          disabled = _this$props3.disabled,
          ShadowOverlay$$1 = _this$props3.ShadowOverlay,
          _this$props3$name = _this$props3.name,
          name = _this$props3$name === void 0 ? this.generatedName : _this$props3$name;

      if (disabled) {
        return null;
      }

      return React__default.createElement(Consumer, null, function (getShadowElementRef) {
        return React__default.createElement(ShadowOverlay$$1, {
          className: "scroll-shadow ".concat(outer ? 'outer' : 'inner'),
          entireViewport: entireViewport,
          ref: getShadowElementRef(name)
        });
      });
    }
  }]);

  return ConnectedShadow;
}(React__default.PureComponent);

defineProperty(ConnectedShadow, "propTypes", {
  ShadowOverlay: propTypes.oneOfType([propTypes.object, propTypes.func])
});

defineProperty(ConnectedShadow, "defaultProps", {
  ShadowOverlay: ShadowOverlay
});

ScrollShadow.ConnectedShadow = ConnectedShadow;

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      defineProperty(target, key, source[key]);
    });
  }

  return target;
}

var objectSpread = _objectSpread;

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

/** Used as references for various `Number` constants. */
var INFINITY$1 = 1 / 0,
    MAX_SAFE_INTEGER = 9007199254740991;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    funcTag$2 = '[object Function]',
    genTag$2 = '[object GeneratorFunction]',
    symbolTag$1 = '[object Symbol]';

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar$1 = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor$1 = /^\[object .+?Constructor\]$/;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/** Detect free variable `global` from Node.js. */
var freeGlobal$2 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

/** Detect free variable `self`. */
var freeSelf$2 = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root$2 = freeGlobal$2 || freeSelf$2 || Function('return this')();

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

/**
 * A specialized version of `_.includes` for arrays without support for
 * specifying an index to search from.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludes(array, value) {
  var length = array ? array.length : 0;
  return !!length && baseIndexOf(array, value, 0) > -1;
}

/**
 * This function is like `arrayIncludes` except that it accepts a comparator.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @param {Function} comparator The comparator invoked per element.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludesWith(array, value, comparator) {
  var index = -1,
      length = array ? array.length : 0;

  while (++index < length) {
    if (comparator(value, array[index])) {
      return true;
    }
  }
  return false;
}

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array ? array.length : 0,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseFindIndex(array, predicate, fromIndex, fromRight) {
  var length = array.length,
      index = fromIndex + (fromRight ? 1 : -1);

  while ((fromRight ? index-- : ++index < length)) {
    if (predicate(array[index], index, array)) {
      return index;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseIndexOf(array, value, fromIndex) {
  if (value !== value) {
    return baseFindIndex(array, baseIsNaN, fromIndex);
  }
  var index = fromIndex - 1,
      length = array.length;

  while (++index < length) {
    if (array[index] === value) {
      return index;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.isNaN` without support for number objects.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 */
function baseIsNaN(value) {
  return value !== value;
}

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

/**
 * Checks if a cache value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue$1(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */
function isHostObject$1(value) {
  // Many host objects are `Object` objects that can coerce to strings
  // despite having improperly defined `toString` methods.
  var result = false;
  if (value != null && typeof value.toString != 'function') {
    try {
      result = !!(value + '');
    } catch (e) {}
  }
  return result;
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/** Used for built-in method references. */
var arrayProto$1 = Array.prototype,
    funcProto$1 = Function.prototype,
    objectProto$2 = Object.prototype;

/** Used to detect overreaching core-js shims. */
var coreJsData$1 = root$2['__core-js_shared__'];

/** Used to detect methods masquerading as native. */
var maskSrcKey$1 = (function() {
  var uid = /[^.]+$/.exec(coreJsData$1 && coreJsData$1.keys && coreJsData$1.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/** Used to resolve the decompiled source of functions. */
var funcToString$1 = funcProto$1.toString;

/** Used to check objects for own properties. */
var hasOwnProperty$3 = objectProto$2.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString$2 = objectProto$2.toString;

/** Used to detect if a method is native. */
var reIsNative$1 = RegExp('^' +
  funcToString$1.call(hasOwnProperty$3).replace(reRegExpChar$1, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/** Built-in value references. */
var Symbol$3 = root$2.Symbol,
    getPrototype = overArg(Object.getPrototypeOf, Object),
    propertyIsEnumerable = objectProto$2.propertyIsEnumerable,
    splice$1 = arrayProto$1.splice,
    spreadableSymbol = Symbol$3 ? Symbol$3.isConcatSpreadable : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols,
    nativeMax = Math.max;

/* Built-in method references that are verified to be native. */
var Map$1 = getNative$1(root$2, 'Map'),
    nativeCreate$1 = getNative$1(Object, 'create');

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash$1(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear$1() {
  this.__data__ = nativeCreate$1 ? nativeCreate$1(null) : {};
}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete$1(key) {
  return this.has(key) && delete this.__data__[key];
}

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet$1(key) {
  var data = this.__data__;
  if (nativeCreate$1) {
    var result = data[key];
    return result === HASH_UNDEFINED$1 ? undefined : result;
  }
  return hasOwnProperty$3.call(data, key) ? data[key] : undefined;
}

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas$1(key) {
  var data = this.__data__;
  return nativeCreate$1 ? data[key] !== undefined : hasOwnProperty$3.call(data, key);
}

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet$1(key, value) {
  var data = this.__data__;
  data[key] = (nativeCreate$1 && value === undefined) ? HASH_UNDEFINED$1 : value;
  return this;
}

// Add methods to `Hash`.
Hash$1.prototype.clear = hashClear$1;
Hash$1.prototype['delete'] = hashDelete$1;
Hash$1.prototype.get = hashGet$1;
Hash$1.prototype.has = hashHas$1;
Hash$1.prototype.set = hashSet$1;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache$1(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear$1() {
  this.__data__ = [];
}

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete$1(key) {
  var data = this.__data__,
      index = assocIndexOf$1(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice$1.call(data, index, 1);
  }
  return true;
}

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet$1(key) {
  var data = this.__data__,
      index = assocIndexOf$1(data, key);

  return index < 0 ? undefined : data[index][1];
}

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas$1(key) {
  return assocIndexOf$1(this.__data__, key) > -1;
}

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet$1(key, value) {
  var data = this.__data__,
      index = assocIndexOf$1(data, key);

  if (index < 0) {
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

// Add methods to `ListCache`.
ListCache$1.prototype.clear = listCacheClear$1;
ListCache$1.prototype['delete'] = listCacheDelete$1;
ListCache$1.prototype.get = listCacheGet$1;
ListCache$1.prototype.has = listCacheHas$1;
ListCache$1.prototype.set = listCacheSet$1;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache$1(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear$1() {
  this.__data__ = {
    'hash': new Hash$1,
    'map': new (Map$1 || ListCache$1),
    'string': new Hash$1
  };
}

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete$1(key) {
  return getMapData$1(this, key)['delete'](key);
}

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet$1(key) {
  return getMapData$1(this, key).get(key);
}

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas$1(key) {
  return getMapData$1(this, key).has(key);
}

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet$1(key, value) {
  getMapData$1(this, key).set(key, value);
  return this;
}

// Add methods to `MapCache`.
MapCache$1.prototype.clear = mapCacheClear$1;
MapCache$1.prototype['delete'] = mapCacheDelete$1;
MapCache$1.prototype.get = mapCacheGet$1;
MapCache$1.prototype.has = mapCacheHas$1;
MapCache$1.prototype.set = mapCacheSet$1;

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values ? values.length : 0;

  this.__data__ = new MapCache$1;
  while (++index < length) {
    this.add(values[index]);
  }
}

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED$1);
  return this;
}

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  // Safari 9 makes `arguments.length` enumerable in strict mode.
  var result = (isArray$1(value) || isArguments(value))
    ? baseTimes(value.length, String)
    : [];

  var length = result.length,
      skipIndexes = !!length;

  for (var key in value) {
    if ((inherited || hasOwnProperty$3.call(value, key)) &&
        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf$1(array, key) {
  var length = array.length;
  while (length--) {
    if (eq$1(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/**
 * The base implementation of methods like `_.difference` without support
 * for excluding multiple arrays or iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Array} values The values to exclude.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new array of filtered values.
 */
function baseDifference(array, values, iteratee, comparator) {
  var index = -1,
      includes = arrayIncludes,
      isCommon = true,
      length = array.length,
      result = [],
      valuesLength = values.length;

  if (!length) {
    return result;
  }
  if (iteratee) {
    values = arrayMap(values, baseUnary(iteratee));
  }
  if (comparator) {
    includes = arrayIncludesWith;
    isCommon = false;
  }
  else if (values.length >= LARGE_ARRAY_SIZE) {
    includes = cacheHas;
    isCommon = false;
    values = new SetCache(values);
  }
  outer:
  while (++index < length) {
    var value = array[index],
        computed = iteratee ? iteratee(value) : value;

    value = (comparator || value !== 0) ? value : 0;
    if (isCommon && computed === computed) {
      var valuesIndex = valuesLength;
      while (valuesIndex--) {
        if (values[valuesIndex] === computed) {
          continue outer;
        }
      }
      result.push(value);
    }
    else if (!includes(values, computed, comparator)) {
      result.push(value);
    }
  }
  return result;
}

/**
 * The base implementation of `_.flatten` with support for restricting flattening.
 *
 * @private
 * @param {Array} array The array to flatten.
 * @param {number} depth The maximum recursion depth.
 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
 * @param {Array} [result=[]] The initial result value.
 * @returns {Array} Returns the new flattened array.
 */
function baseFlatten(array, depth, predicate, isStrict, result) {
  var index = -1,
      length = array.length;

  predicate || (predicate = isFlattenable);
  result || (result = []);

  while (++index < length) {
    var value = array[index];
    if (depth > 0 && predicate(value)) {
      if (depth > 1) {
        // Recursively flatten arrays (susceptible to call stack limits).
        baseFlatten(value, depth - 1, predicate, isStrict, result);
      } else {
        arrayPush(result, value);
      }
    } else if (!isStrict) {
      result[result.length] = value;
    }
  }
  return result;
}

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray$1(object) ? result : arrayPush(result, symbolsFunc(object));
}

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative$1(value) {
  if (!isObject$2(value) || isMasked$1(value)) {
    return false;
  }
  var pattern = (isFunction$2(value) || isHostObject$1(value)) ? reIsNative$1 : reIsHostCtor$1;
  return pattern.test(toSource$1(value));
}

/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeysIn(object) {
  if (!isObject$2(object)) {
    return nativeKeysIn(object);
  }
  var isProto = isPrototype(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !hasOwnProperty$3.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * The base implementation of `_.pick` without support for individual
 * property identifiers.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} props The property identifiers to pick.
 * @returns {Object} Returns the new object.
 */
function basePick(object, props) {
  object = Object(object);
  return basePickBy(object, props, function(value, key) {
    return key in object;
  });
}

/**
 * The base implementation of  `_.pickBy` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} props The property identifiers to pick from.
 * @param {Function} predicate The function invoked per property.
 * @returns {Object} Returns the new object.
 */
function basePickBy(object, props, predicate) {
  var index = -1,
      length = props.length,
      result = {};

  while (++index < length) {
    var key = props[index],
        value = object[key];

    if (predicate(value, key)) {
      result[key] = value;
    }
  }
  return result;
}

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest(func, start) {
  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = array;
    return apply(func, this, otherArgs);
  };
}

/**
 * Creates an array of own and inherited enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeysIn(object) {
  return baseGetAllKeys(object, keysIn, getSymbolsIn);
}

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData$1(map, key) {
  var data = map.__data__;
  return isKeyable$1(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative$1(object, key) {
  var value = getValue$1(object, key);
  return baseIsNative$1(value) ? value : undefined;
}

/**
 * Creates an array of the own enumerable symbol properties of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;

/**
 * Creates an array of the own and inherited enumerable symbol properties
 * of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
  var result = [];
  while (object) {
    arrayPush(result, getSymbols(object));
    object = getPrototype(object);
  }
  return result;
};

/**
 * Checks if `value` is a flattenable `arguments` object or array.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
 */
function isFlattenable(value) {
  return isArray$1(value) || isArguments(value) ||
    !!(spreadableSymbol && value && value[spreadableSymbol]);
}

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length &&
    (typeof value == 'number' || reIsUint.test(value)) &&
    (value > -1 && value % 1 == 0 && value < length);
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable$1(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked$1(func) {
  return !!maskSrcKey$1 && (maskSrcKey$1 in func);
}

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$2;

  return value === proto;
}

/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function nativeKeysIn(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey$1(value) {
  if (typeof value == 'string' || isSymbol$1(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY$1) ? '-0' : result;
}

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to process.
 * @returns {string} Returns the source code.
 */
function toSource$1(func) {
  if (func != null) {
    try {
      return funcToString$1.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq$1(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
function isArguments(value) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  return isArrayLikeObject(value) && hasOwnProperty$3.call(value, 'callee') &&
    (!propertyIsEnumerable.call(value, 'callee') || objectToString$2.call(value) == argsTag);
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray$1 = Array.isArray;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction$2(value);
}

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike$1(value) && isArrayLike(value);
}

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction$2(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject$2(value) ? objectToString$2.call(value) : '';
  return tag == funcTag$2 || tag == genTag$2;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject$2(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike$1(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol$1(value) {
  return typeof value == 'symbol' ||
    (isObjectLike$1(value) && objectToString$2.call(value) == symbolTag$1);
}

/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */
function keysIn(object) {
  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}

/**
 * The opposite of `_.pick`; this method creates an object composed of the
 * own and inherited enumerable string keyed properties of `object` that are
 * not omitted.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The source object.
 * @param {...(string|string[])} [props] The property identifiers to omit.
 * @returns {Object} Returns the new object.
 * @example
 *
 * var object = { 'a': 1, 'b': '2', 'c': 3 };
 *
 * _.omit(object, ['a', 'c']);
 * // => { 'b': '2' }
 */
var omit = baseRest(function(object, props) {
  if (object == null) {
    return {};
  }
  props = arrayMap(baseFlatten(props, 1), toKey$1);
  return basePick(object, baseDifference(getAllKeysIn(object), props));
});

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

var lodash_omit = omit;

var childrenWithProps = (function (props, extraProps) {
  return React__default.Children.map(props.children, function (child) {
    return React__default.cloneElement(child, objectSpread({}, lodash_omit(props, 'children'), extraProps));
  });
});

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

var arrayWithHoles = _arrayWithHoles;

function _iterableToArrayLimit(arr, i) {
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

var iterableToArrayLimit = _iterableToArrayLimit;

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

var nonIterableRest = _nonIterableRest;

function _slicedToArray(arr, i) {
  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();
}

var slicedToArray = _slicedToArray;

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as references for various `Number` constants. */
var INFINITY$2 = 1 / 0,
    MAX_SAFE_INTEGER$1 = 9007199254740991,
    MAX_INTEGER = 1.7976931348623157e+308,
    NAN = 0 / 0;

/** `Object#toString` result references. */
var symbolTag$2 = '[object Symbol]';

/** Used to match leading and trailing whitespace. */
var reTrim = /^\s+|\s+$/g;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Used to compose unicode character classes. */
var rsAstralRange = '\\ud800-\\udfff',
    rsComboMarksRange = '\\u0300-\\u036f\\ufe20-\\ufe23',
    rsComboSymbolsRange = '\\u20d0-\\u20f0',
    rsVarRange = '\\ufe0e\\ufe0f';

/** Used to compose unicode capture groups. */
var rsAstral = '[' + rsAstralRange + ']',
    rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',
    rsFitz = '\\ud83c[\\udffb-\\udfff]',
    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
    rsNonAstral = '[^' + rsAstralRange + ']',
    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
    rsZWJ = '\\u200d';

/** Used to compose unicode regexes. */
var reOptMod = rsModifier + '?',
    rsOptVar = '[' + rsVarRange + ']?',
    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
    rsSeq = rsOptVar + reOptMod + rsOptJoin,
    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/** Detect free variable `global` from Node.js. */
var freeGlobal$3 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

/** Detect free variable `self`. */
var freeSelf$3 = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root$3 = freeGlobal$3 || freeSelf$3 || Function('return this')();

/**
 * Gets the size of an ASCII `string`.
 *
 * @private
 * @param {string} string The string inspect.
 * @returns {number} Returns the string size.
 */
var asciiSize = baseProperty('length');

/**
 * Converts an ASCII `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function asciiToArray(string) {
  return string.split('');
}

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

/**
 * Checks if `string` contains Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
 */
function hasUnicode(string) {
  return reHasUnicode.test(string);
}

/**
 * Gets the number of symbols in `string`.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {number} Returns the string size.
 */
function stringSize(string) {
  return hasUnicode(string)
    ? unicodeSize(string)
    : asciiSize(string);
}

/**
 * Converts `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function stringToArray(string) {
  return hasUnicode(string)
    ? unicodeToArray(string)
    : asciiToArray(string);
}

/**
 * Gets the size of a Unicode `string`.
 *
 * @private
 * @param {string} string The string inspect.
 * @returns {number} Returns the string size.
 */
function unicodeSize(string) {
  var result = reUnicode.lastIndex = 0;
  while (reUnicode.test(string)) {
    result++;
  }
  return result;
}

/**
 * Converts a Unicode `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function unicodeToArray(string) {
  return string.match(reUnicode) || [];
}

/** Used for built-in method references. */
var objectProto$3 = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString$3 = objectProto$3.toString;

/** Built-in value references. */
var Symbol$4 = root$3.Symbol;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeCeil = Math.ceil,
    nativeFloor = Math.floor;

/** Used to convert symbols to primitives and strings. */
var symbolProto$1 = Symbol$4 ? Symbol$4.prototype : undefined,
    symbolToString$1 = symbolProto$1 ? symbolProto$1.toString : undefined;

/**
 * The base implementation of `_.repeat` which doesn't coerce arguments.
 *
 * @private
 * @param {string} string The string to repeat.
 * @param {number} n The number of times to repeat the string.
 * @returns {string} Returns the repeated string.
 */
function baseRepeat(string, n) {
  var result = '';
  if (!string || n < 1 || n > MAX_SAFE_INTEGER$1) {
    return result;
  }
  // Leverage the exponentiation by squaring algorithm for a faster repeat.
  // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
  do {
    if (n % 2) {
      result += string;
    }
    n = nativeFloor(n / 2);
    if (n) {
      string += string;
    }
  } while (n);

  return result;
}

/**
 * The base implementation of `_.slice` without an iteratee call guard.
 *
 * @private
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the slice of `array`.
 */
function baseSlice(array, start, end) {
  var index = -1,
      length = array.length;

  if (start < 0) {
    start = -start > length ? 0 : (length + start);
  }
  end = end > length ? length : end;
  if (end < 0) {
    end += length;
  }
  length = start > end ? 0 : ((end - start) >>> 0);
  start >>>= 0;

  var result = Array(length);
  while (++index < length) {
    result[index] = array[index + start];
  }
  return result;
}

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString$1(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isSymbol$2(value)) {
    return symbolToString$1 ? symbolToString$1.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY$2) ? '-0' : result;
}

/**
 * Casts `array` to a slice if it's needed.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {number} start The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the cast slice.
 */
function castSlice(array, start, end) {
  var length = array.length;
  end = end === undefined ? length : end;
  return (!start && end >= length) ? array : baseSlice(array, start, end);
}

/**
 * Creates the padding for `string` based on `length`. The `chars` string
 * is truncated if the number of characters exceeds `length`.
 *
 * @private
 * @param {number} length The padding length.
 * @param {string} [chars=' '] The string used as padding.
 * @returns {string} Returns the padding for `string`.
 */
function createPadding(length, chars) {
  chars = chars === undefined ? ' ' : baseToString$1(chars);

  var charsLength = chars.length;
  if (charsLength < 2) {
    return charsLength ? baseRepeat(chars, length) : chars;
  }
  var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
  return hasUnicode(chars)
    ? castSlice(stringToArray(result), 0, length).join('')
    : result.slice(0, length);
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject$3(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike$2(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol$2(value) {
  return typeof value == 'symbol' ||
    (isObjectLike$2(value) && objectToString$3.call(value) == symbolTag$2);
}

/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */
function toFinite(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber(value);
  if (value === INFINITY$2 || value === -INFINITY$2) {
    var sign = (value < 0 ? -1 : 1);
    return sign * MAX_INTEGER;
  }
  return value === value ? value : 0;
}

/**
 * Converts `value` to an integer.
 *
 * **Note:** This method is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */
function toInteger(value) {
  var result = toFinite(value),
      remainder = result % 1;

  return result === result ? (remainder ? result - remainder : result) : 0;
}

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol$2(value)) {
    return NAN;
  }
  if (isObject$3(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject$3(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString$1(value) {
  return value == null ? '' : baseToString$1(value);
}

/**
 * Pads `string` on the right side if it's shorter than `length`. Padding
 * characters are truncated if they exceed `length`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to pad.
 * @param {number} [length=0] The padding length.
 * @param {string} [chars=' '] The string used as padding.
 * @returns {string} Returns the padded string.
 * @example
 *
 * _.padEnd('abc', 6);
 * // => 'abc   '
 *
 * _.padEnd('abc', 6, '_-');
 * // => 'abc_-_'
 *
 * _.padEnd('abc', 3);
 * // => 'abc'
 */
function padEnd(string, length, chars) {
  string = toString$1(string);
  length = toInteger(length);

  var strLength = length ? stringSize(string) : 0;
  return (length && strLength < length)
    ? (string + createPadding(length - strLength, chars))
    : string;
}

var lodash_padend = padEnd;

var trimZeroes = function trimZeroes(str) {
  if (str[str.length - 1] === '0') {
    return trimZeroes(str.slice(0, -1));
  } else if (str.indexOf('.') > str.length - 2) ;

  return lodash_padend(str, 2, '0');
};

var formatMoney = (function (money) {
  if (typeof money === 'string' || typeof money === 'number') {
    var _split = ('' + money).split('.'),
        _split2 = slicedToArray(_split, 2),
        dollars = _split2[0],
        cents = _split2[1];

    return "".concat(dollars, ".").concat(trimZeroes("".concat(cents || '00', "00")));
  } // we don't recognize this money type...


  return money;
});

function generateId (prefix) {
  var numbers = Array(32).fill(0).map(function () {
    return Math.round(Math.random() * 10);
  });
  return "".concat(prefix || 'el', "_").concat(numbers.join(''));
}

var parseFlexChar = function parseFlexChar(char) {
  if (char === '0') {
    return 'flex: 0 0 auto !important;';
  }

  return "flex: ".concat(char, " 0 0 !important;");
};

var parseFlex = (function (flex) {
  var itemIdx = 0;
  return flex.split('').reduce(function (lines, char, idx) {
    if (char === ' ') {
      return lines;
    }

    if (flex[idx - 1] === ' ' && flex[idx + 1] === ' ') {
      lines.push("& > *:nth-child(".concat(itemIdx + 1, ") {\n        margin-left: auto !important;\n        margin-right: auto !important;\n        ").concat(parseFlexChar(char), "\n      }"));
    } else if (flex[idx - 1] === ' ') {
      lines.push("& > *:nth-child(".concat(itemIdx + 1, ") {\n        margin-left: auto !important;\n        margin-right: 15px !important;\n        ").concat(parseFlexChar(char), "\n      }"));
    } else if (flex[idx + 1] === ' ') {
      lines.push("& > *:nth-child(".concat(itemIdx + 1, ") {\n        margin-right: auto !important;\n        margin-left: 15px !important;\n        ").concat(parseFlexChar(char), "\n      }"));
    } else {
      lines.push("& > *:nth-child(".concat(itemIdx + 1, ") {\n        margin-right: 15px !important;\n        margin-left: 15px !important;\n        ").concat(parseFlexChar(char), "\n      }"));
    }

    if (idx === 0) {
      lines.push("& > *:nth-child(".concat(itemIdx + 1, ") { margin-left: 0 !important; }"));
    }

    if (idx === flex.length - 1) {
      lines.push("& > *:nth-child(".concat(itemIdx + 1, ") { margin-right: 0 !important; }"));
    }

    itemIdx = itemIdx + 1;
    return lines;
  }, []).join('\n');
});

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** `Object#toString` result references. */
var objectTag = '[object Object]';

/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */
function isHostObject$2(value) {
  // Many host objects are `Object` objects that can coerce to strings
  // despite having improperly defined `toString` methods.
  var result = false;
  if (value != null && typeof value.toString != 'function') {
    try {
      result = !!(value + '');
    } catch (e) {}
  }
  return result;
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg$1(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/** Used for built-in method references. */
var funcProto$2 = Function.prototype,
    objectProto$4 = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString$2 = funcProto$2.toString;

/** Used to check objects for own properties. */
var hasOwnProperty$4 = objectProto$4.hasOwnProperty;

/** Used to infer the `Object` constructor. */
var objectCtorString = funcToString$2.call(Object);

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString$4 = objectProto$4.toString;

/** Built-in value references. */
var getPrototype$1 = overArg$1(Object.getPrototypeOf, Object);

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike$3(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */
function isPlainObject(value) {
  if (!isObjectLike$3(value) ||
      objectToString$4.call(value) != objectTag || isHostObject$2(value)) {
    return false;
  }
  var proto = getPrototype$1(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty$4.call(proto, 'constructor') && proto.constructor;
  return (typeof Ctor == 'function' &&
    Ctor instanceof Ctor && funcToString$2.call(Ctor) == objectCtorString);
}

var lodash_isplainobject = isPlainObject;

/**
 * lodash 4.0.1 (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */

/** `Object#toString` result references. */
var stringTag = '[object String]';

/** Used for built-in method references. */
var objectProto$5 = Object.prototype;

/**
 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString$5 = objectProto$5.toString;

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @type Function
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray$2 = Array.isArray;

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike$4(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `String` primitive or object.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isString('abc');
 * // => true
 *
 * _.isString(1);
 * // => false
 */
function isString(value) {
  return typeof value == 'string' ||
    (!isArray$2(value) && isObjectLike$4(value) && objectToString$5.call(value) == stringTag);
}

var lodash_isstring = isString;

/**
 * EXPERIMENTAL
 *
 * Takes a user's `spacing` prop and converts it into margins
 * which can be applied to text elements so that they are spaced
 * from the cap-line and baseline, rather than the element bounds.
 *
 * This is accomplished by calculating margin with offsets of
 * em values to 'dig' into the element a bit to reach the cap and baselines.
 * These em values are based on visual inspection and would vary
 * by font.
 *
 * Passing props as a whole so that we have access to dynamic theme
 * information.
 */

var getSize = function getSize(value, props) {
  switch ("".concat(value).toLowerCase()) {
    case 'xs':
    case 'extraSmall':
      return themeGet('spacing.extraSmall')(props);

    case 'sm':
    case 'small':
      return themeGet('spacing.small')(props);

    case 'md':
    case 'medium':
      return themeGet('spacing.medium')(props);

    case 'lg':
    case 'large':
      return themeGet('spacing.large')(props);

    case 'xl':
    case 'extraLarge':
      return themeGet('spacing.extraLarge')(props);

    default:
      // if it's a unit string, return it
      if (isNaN(parseInt("".concat(value), 10))) {
        return value;
      } // if the user supplied a number, assume pixels


      return "".concat(parseInt("".concat(value), 10), "px");
  }
};

var calcTopOffset = function calcTopOffset(lineHeight) {
  return "".concat(lineHeight / -5.25 * (lineHeight / 1.5), "em");
};
var calcBottomOffset = function calcBottomOffset(lineHeight) {
  return "".concat(lineHeight / -3.5 * (lineHeight / 1.5), "em");
};

var userTextSpacingWithLineHeight = function userTextSpacingWithLineHeight(lineHeight) {
  return function (props) {
    var spacing = props.spacing;
    /* these offset values collapse the outer element boundaries so that
     * adjacent layout aligns with the cap and baseline of the text inside.
     *
     * This logic is a little fuzzy. Offsets of -0.25em and -0.5em work
     * perfectly for a line height of 1.5, but they start to drift as it gets
     * smaller or larger, so we further scale the value based on its difference
     * from 1.5. Experiments suggest this produces reasonably accurate results.
     */

    var topOffset = calcTopOffset(lineHeight);
    var bottomOffset = calcBottomOffset(lineHeight);

    if (!spacing) {
      // this is default 'no spacing', will align adjacent elements
      // to the cap and baseline directly
      return "".concat(topOffset, " 0 ").concat(bottomOffset, " 0");
    }

    if (lodash_isplainobject(spacing)) {
      var top = lodash_get(spacing, 'top', lodash_get(spacing, 'vertical', '0px'));
      var right = lodash_get(spacing, 'right', lodash_get(spacing, 'horizontal', '0px'));
      var bottom = lodash_get(spacing, 'bottom', lodash_get(spacing, 'vertical', '0px'));
      var left = lodash_get(spacing, 'left', lodash_get(spacing, 'horizontal', '0px'));
      return "calc(".concat(topOffset, " + ").concat(getSize(top, props), ") ").concat(getSize(right, props), " calc(").concat(bottomOffset, " + ").concat(getSize(bottom, props), ") ").concat(getSize(left, props));
    } else if (lodash_isstring(spacing)) {
      var size = getSize(spacing, props);
      return "calc(".concat(topOffset, " + ").concat(size, ") ").concat(size, " calc(").concat(bottomOffset, " + ").concat(size, ") ").concat(size);
    }

    throw new Error("Invalid spacing prop value ".concat(spacing, ", must be a single CSS value string or object { top, right, bottom, left }"));
  };
};

var userSpacing = userTextSpacingWithLineHeight(0); // the default global line height for text is 1.5

userSpacing.text = userTextSpacingWithLineHeight(1.5);
userSpacing.text.withLineHeight = userTextSpacingWithLineHeight; // allow static access to power functions

userSpacing.withLineHeight = userTextSpacingWithLineHeight;

/**
 * @deprecated Use userSpacing instead
 */
var userTextSpacing = userSpacing.text;

var ForegroundLayer = styled__default.div.withConfig({
  displayName: "ForegroundLayer",
  componentId: "wtayay-0"
})(["font-family:", ";color:", ";font-size:", ";line-height:1.5;letter-spacing:0.28px;position:absolute;top:0;left:0;right:0;bottom:0;z-index:100000;pointer-events:none;& > *{pointer-events:initial;}"], themeGet('fonts.default'), themeGet('colors.text.default'), themeGet('fontSizes.default'));



var styles$1 = /*#__PURE__*/Object.freeze({
  ForegroundLayer: ForegroundLayer
});

var context = React.createContext({
  element: null
});
/**
 * Provides context for Foreground components used downstream in the app.
 * Renders an empty <div> which will portal in all foreground elements rendered
 * elsewhere alongside any provided children.
 */

var ForegroundProvider =
/*#__PURE__*/
function (_React$Component) {
  inherits(ForegroundProvider, _React$Component);

  function ForegroundProvider() {
    var _getPrototypeOf2;

    var _this;

    classCallCheck(this, ForegroundProvider);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(ForegroundProvider)).call.apply(_getPrototypeOf2, [this].concat(args)));

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "state", {
      element: null
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "elementRef", function (element) {
      _this.setState({
        element: element
      });
    });

    return _this;
  }

  createClass(ForegroundProvider, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          Layer = _this$props.Layer,
          externalElement = _this$props.element,
          rest = objectWithoutProperties(_this$props, ["children", "Layer", "element"]);

      var internalElement = this.state.element;
      var element = externalElement || internalElement;
      return React__default.createElement(context.Provider, {
        value: {
          element: element
        }
      }, children, !externalElement && React__default.createElement(Layer, _extends_1({
        ref: this.elementRef
      }, rest)));
    }
  }]);

  return ForegroundProvider;
}(React__default.Component);
/**
 * Just wrap any component in Foreground, and it will be rendered into
 * an overlay div above your app.
 */


defineProperty(ForegroundProvider, "propTypes", {
  /**
   * You can choose to provide your own custom element for the Foreground system to
   * use instead of rendering one here. If you provide this prop an HTML element,
   * this component will not render the default element and will make all Foreground
   * components render into your provided element.
   */
  element: propTypes.any,
  Layer: propTypes.oneOfType([propTypes.object, propTypes.func])
});

defineProperty(ForegroundProvider, "defaultProps", {
  Layer: ForegroundLayer
});

defineProperty(ForegroundProvider, "styles", styles$1);

var Foreground = function Foreground(_ref) {
  var children = _ref.children;
  return React__default.createElement(context.Consumer, null, function (_ref2) {
    var element = _ref2.element;

    if (!element) {
      return null;
    }

    return ReactDOM.createPortal(children, element);
  });
};

Foreground.Provider = ForegroundProvider;
Foreground.styles = styles$1;

var lodash_defaultsdeep = createCommonjsModule(function (module, exports) {
/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to match `RegExp` flags from their coerced string values. */
var reFlags = /\w*$/;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/** Used to identify `toStringTag` values supported by `_.clone`. */
var cloneableTags = {};
cloneableTags[argsTag] = cloneableTags[arrayTag] =
cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
cloneableTags[boolTag] = cloneableTags[dateTag] =
cloneableTags[float32Tag] = cloneableTags[float64Tag] =
cloneableTags[int8Tag] = cloneableTags[int16Tag] =
cloneableTags[int32Tag] = cloneableTags[mapTag] =
cloneableTags[numberTag] = cloneableTags[objectTag] =
cloneableTags[regexpTag] = cloneableTags[setTag] =
cloneableTags[stringTag] = cloneableTags[symbolTag] =
cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag] = cloneableTags[funcTag] =
cloneableTags[weakMapTag] = false;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Detect free variable `exports`. */
var freeExports = exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    return freeProcess && freeProcess.binding('util');
  } catch (e) {}
}());

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * Adds the key-value `pair` to `map`.
 *
 * @private
 * @param {Object} map The map to modify.
 * @param {Array} pair The key-value pair to add.
 * @returns {Object} Returns `map`.
 */
function addMapEntry(map, pair) {
  // Don't return `map.set` because it's not chainable in IE 11.
  map.set(pair[0], pair[1]);
  return map;
}

/**
 * Adds `value` to `set`.
 *
 * @private
 * @param {Object} set The set to modify.
 * @param {*} value The value to add.
 * @returns {Object} Returns `set`.
 */
function addSetEntry(set, value) {
  // Don't return `set.add` because it's not chainable in IE 11.
  set.add(value);
  return set;
}

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array ? array.length : 0;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

/**
 * A specialized version of `_.reduce` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of `array` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */
function arrayReduce(array, iteratee, accumulator, initAccum) {
  var index = -1,
      length = array ? array.length : 0;

  if (initAccum && length) {
    accumulator = array[++index];
  }
  while (++index < length) {
    accumulator = iteratee(accumulator, array[index], index, array);
  }
  return accumulator;
}

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */
function isHostObject(value) {
  // Many host objects are `Object` objects that can coerce to strings
  // despite having improperly defined `toString` methods.
  var result = false;
  if (value != null && typeof value.toString != 'function') {
    try {
      result = !!(value + '');
    } catch (e) {}
  }
  return result;
}

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

/** Used for built-in method references. */
var arrayProto = Array.prototype,
    funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to infer the `Object` constructor. */
var objectCtorString = funcToString.call(Object);

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined,
    Symbol = root.Symbol,
    Uint8Array = root.Uint8Array,
    getPrototype = overArg(Object.getPrototypeOf, Object),
    objectCreate = Object.create,
    propertyIsEnumerable = objectProto.propertyIsEnumerable,
    splice = arrayProto.splice;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols,
    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
    nativeKeys = overArg(Object.keys, Object),
    nativeMax = Math.max;

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView'),
    Map = getNative(root, 'Map'),
    Promise = getNative(root, 'Promise'),
    Set = getNative(root, 'Set'),
    WeakMap = getNative(root, 'WeakMap'),
    nativeCreate = getNative(Object, 'create');

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  return this.has(key) && delete this.__data__[key];
}

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
}

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  return true;
}

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  return getMapData(this, key)['delete'](key);
}

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  getMapData(this, key).set(key, value);
  return this;
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  this.__data__ = new ListCache(entries);
}

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
}

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  return this.__data__['delete'](key);
}

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var cache = this.__data__;
  if (cache instanceof ListCache) {
    var pairs = cache.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      return this;
    }
    cache = this.__data__ = new MapCache(pairs);
  }
  cache.set(key, value);
  return this;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  // Safari 9 makes `arguments.length` enumerable in strict mode.
  var result = (isArray(value) || isArguments(value))
    ? baseTimes(value.length, String)
    : [];

  var length = result.length,
      skipIndexes = !!length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * This function is like `assignValue` except that it doesn't assign
 * `undefined` values.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignMergeValue(object, key, value) {
  if ((value !== undefined && !eq(object[key], value)) ||
      (typeof key == 'number' && value === undefined && !(key in object))) {
    object[key] = value;
  }
}

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
      (value === undefined && !(key in object))) {
    object[key] = value;
  }
}

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssign(object, source) {
  return object && copyObject(source, keys(source), object);
}

/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @param {boolean} [isFull] Specify a clone including symbols.
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */
function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
  var result;
  if (customizer) {
    result = object ? customizer(value, key, object, stack) : customizer(value);
  }
  if (result !== undefined) {
    return result;
  }
  if (!isObject(value)) {
    return value;
  }
  var isArr = isArray(value);
  if (isArr) {
    result = initCloneArray(value);
    if (!isDeep) {
      return copyArray(value, result);
    }
  } else {
    var tag = getTag(value),
        isFunc = tag == funcTag || tag == genTag;

    if (isBuffer(value)) {
      return cloneBuffer(value, isDeep);
    }
    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
      if (isHostObject(value)) {
        return object ? value : {};
      }
      result = initCloneObject(isFunc ? {} : value);
      if (!isDeep) {
        return copySymbols(value, baseAssign(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value : {};
      }
      result = initCloneByTag(value, tag, baseClone, isDeep);
    }
  }
  // Check for circular references and return its corresponding clone.
  stack || (stack = new Stack);
  var stacked = stack.get(value);
  if (stacked) {
    return stacked;
  }
  stack.set(value, result);

  if (!isArr) {
    var props = isFull ? getAllKeys(value) : keys(value);
  }
  arrayEach(props || value, function(subValue, key) {
    if (props) {
      key = subValue;
      subValue = value[key];
    }
    // Recursively populate clone (susceptible to call stack limits).
    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
  });
  return result;
}

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} prototype The object to inherit from.
 * @returns {Object} Returns the new object.
 */
function baseCreate(proto) {
  return isObject(proto) ? objectCreate(proto) : {};
}

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

/**
 * The base implementation of `getTag`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  return objectToString.call(value);
}

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
}

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeysIn(object) {
  if (!isObject(object)) {
    return nativeKeysIn(object);
  }
  var isProto = isPrototype(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * The base implementation of `_.merge` without support for multiple sources.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} [customizer] The function to customize merged values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMerge(object, source, srcIndex, customizer, stack) {
  if (object === source) {
    return;
  }
  if (!(isArray(source) || isTypedArray(source))) {
    var props = baseKeysIn(source);
  }
  arrayEach(props || source, function(srcValue, key) {
    if (props) {
      key = srcValue;
      srcValue = source[key];
    }
    if (isObject(srcValue)) {
      stack || (stack = new Stack);
      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
    }
    else {
      var newValue = customizer
        ? customizer(object[key], srcValue, (key + ''), object, source, stack)
        : undefined;

      if (newValue === undefined) {
        newValue = srcValue;
      }
      assignMergeValue(object, key, newValue);
    }
  });
}

/**
 * A specialized version of `baseMerge` for arrays and objects which performs
 * deep merges and tracks traversed objects enabling objects with circular
 * references to be merged.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {string} key The key of the value to merge.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} mergeFunc The function to merge values.
 * @param {Function} [customizer] The function to customize assigned values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
  var objValue = object[key],
      srcValue = source[key],
      stacked = stack.get(srcValue);

  if (stacked) {
    assignMergeValue(object, key, stacked);
    return;
  }
  var newValue = customizer
    ? customizer(objValue, srcValue, (key + ''), object, source, stack)
    : undefined;

  var isCommon = newValue === undefined;

  if (isCommon) {
    newValue = srcValue;
    if (isArray(srcValue) || isTypedArray(srcValue)) {
      if (isArray(objValue)) {
        newValue = objValue;
      }
      else if (isArrayLikeObject(objValue)) {
        newValue = copyArray(objValue);
      }
      else {
        isCommon = false;
        newValue = baseClone(srcValue, true);
      }
    }
    else if (isPlainObject(srcValue) || isArguments(srcValue)) {
      if (isArguments(objValue)) {
        newValue = toPlainObject(objValue);
      }
      else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
        isCommon = false;
        newValue = baseClone(srcValue, true);
      }
      else {
        newValue = objValue;
      }
    }
    else {
      isCommon = false;
    }
  }
  if (isCommon) {
    // Recursively merge objects and arrays (susceptible to call stack limits).
    stack.set(srcValue, newValue);
    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
    stack['delete'](srcValue);
  }
  assignMergeValue(object, key, newValue);
}

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest(func, start) {
  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = array;
    return apply(func, this, otherArgs);
  };
}

/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var result = new buffer.constructor(buffer.length);
  buffer.copy(result);
  return result;
}

/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
  return result;
}

/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */
function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}

/**
 * Creates a clone of `map`.
 *
 * @private
 * @param {Object} map The map to clone.
 * @param {Function} cloneFunc The function to clone values.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned map.
 */
function cloneMap(map, isDeep, cloneFunc) {
  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
  return arrayReduce(array, addMapEntry, new map.constructor);
}

/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */
function cloneRegExp(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result.lastIndex = regexp.lastIndex;
  return result;
}

/**
 * Creates a clone of `set`.
 *
 * @private
 * @param {Object} set The set to clone.
 * @param {Function} cloneFunc The function to clone values.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned set.
 */
function cloneSet(set, isDeep, cloneFunc) {
  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
  return arrayReduce(array, addSetEntry, new set.constructor);
}

/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */
function cloneSymbol(symbol) {
  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    assignValue(object, key, newValue === undefined ? source[key] : newValue);
  }
  return object;
}

/**
 * Copies own symbol properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbols(source, object) {
  return copyObject(source, getSymbols(source), object);
}

/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */
function createAssigner(assigner) {
  return baseRest(function(object, sources) {
    var index = -1,
        length = sources.length,
        customizer = length > 1 ? sources[length - 1] : undefined,
        guard = length > 2 ? sources[2] : undefined;

    customizer = (assigner.length > 3 && typeof customizer == 'function')
      ? (length--, customizer)
      : undefined;

    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      customizer = length < 3 ? undefined : customizer;
      length = 1;
    }
    object = Object(object);
    while (++index < length) {
      var source = sources[index];
      if (source) {
        assigner(object, source, index, customizer);
      }
    }
    return object;
  });
}

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/**
 * Creates an array of the own enumerable symbol properties of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11,
// for data views in Edge < 14, and promises in Node.js.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = objectToString.call(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : undefined;

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */
function initCloneArray(array) {
  var length = array.length,
      result = array.constructor(length);

  // Add properties assigned by `RegExp#exec`.
  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
    result.index = array.index;
    result.input = array.input;
  }
  return result;
}

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneObject(object) {
  return (typeof object.constructor == 'function' && !isPrototype(object))
    ? baseCreate(getPrototype(object))
    : {};
}

/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {Function} cloneFunc The function to clone values.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneByTag(object, tag, cloneFunc, isDeep) {
  var Ctor = object.constructor;
  switch (tag) {
    case arrayBufferTag:
      return cloneArrayBuffer(object);

    case boolTag:
    case dateTag:
      return new Ctor(+object);

    case dataViewTag:
      return cloneDataView(object, isDeep);

    case float32Tag: case float64Tag:
    case int8Tag: case int16Tag: case int32Tag:
    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
      return cloneTypedArray(object, isDeep);

    case mapTag:
      return cloneMap(object, isDeep, cloneFunc);

    case numberTag:
    case stringTag:
      return new Ctor(object);

    case regexpTag:
      return cloneRegExp(object);

    case setTag:
      return cloneSet(object, isDeep, cloneFunc);

    case symbolTag:
      return cloneSymbol(object);
  }
}

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length &&
    (typeof value == 'number' || reIsUint.test(value)) &&
    (value > -1 && value % 1 == 0 && value < length);
}

/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */
function isIterateeCall(value, index, object) {
  if (!isObject(object)) {
    return false;
  }
  var type = typeof index;
  if (type == 'number'
        ? (isArrayLike(object) && isIndex(index, object.length))
        : (type == 'string' && index in object)
      ) {
    return eq(object[index], value);
  }
  return false;
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

/**
 * Used by `_.defaultsDeep` to customize its `_.merge` use.
 *
 * @private
 * @param {*} objValue The destination value.
 * @param {*} srcValue The source value.
 * @param {string} key The key of the property to merge.
 * @param {Object} object The parent object of `objValue`.
 * @param {Object} source The parent object of `srcValue`.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 * @returns {*} Returns the value to assign.
 */
function mergeDefaults(objValue, srcValue, key, object, source, stack) {
  if (isObject(objValue) && isObject(srcValue)) {
    // Recursively merge objects and arrays (susceptible to call stack limits).
    stack.set(srcValue, objValue);
    baseMerge(objValue, srcValue, undefined, mergeDefaults, stack);
    stack['delete'](srcValue);
  }
  return objValue;
}

/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function nativeKeysIn(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to process.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
function isArguments(value) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */
function isPlainObject(value) {
  if (!isObjectLike(value) ||
      objectToString.call(value) != objectTag || isHostObject(value)) {
    return false;
  }
  var proto = getPrototype(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
  return (typeof Ctor == 'function' &&
    Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);
}

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

/**
 * Converts `value` to a plain object flattening inherited enumerable string
 * keyed properties of `value` to own properties of the plain object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {Object} Returns the converted plain object.
 * @example
 *
 * function Foo() {
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.assign({ 'a': 1 }, new Foo);
 * // => { 'a': 1, 'b': 2 }
 *
 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
 * // => { 'a': 1, 'b': 2, 'c': 3 }
 */
function toPlainObject(value) {
  return copyObject(value, keysIn(value));
}

/**
 * This method is like `_.defaults` except that it recursively assigns
 * default properties.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 3.10.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @see _.defaults
 * @example
 *
 * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
 * // => { 'a': { 'b': 2, 'c': 3 } }
 */
var defaultsDeep = baseRest(function(args) {
  args.push(undefined, mergeDefaults);
  return apply(mergeWith, undefined, args);
});

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */
function keysIn(object) {
  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}

/**
 * This method is like `_.merge` except that it accepts `customizer` which
 * is invoked to produce the merged values of the destination and source
 * properties. If `customizer` returns `undefined`, merging is handled by the
 * method instead. The `customizer` is invoked with seven arguments:
 * (objValue, srcValue, key, object, source, stack).
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} sources The source objects.
 * @param {Function} customizer The function to customize assigned values.
 * @returns {Object} Returns `object`.
 * @example
 *
 * function customizer(objValue, srcValue) {
 *   if (_.isArray(objValue)) {
 *     return objValue.concat(srcValue);
 *   }
 * }
 *
 * var object = { 'a': [1], 'b': [2] };
 * var other = { 'a': [3], 'b': [4] };
 *
 * _.mergeWith(object, other, customizer);
 * // => { 'a': [1, 3], 'b': [2, 4] }
 */
var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
  baseMerge(object, source, srcIndex, customizer);
});

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = defaultsDeep;
});

var colors$1 = {
  primary: {
    default: '#00bcec',
    dark: '#3a455c'
  },
  accents: [
  /* purple */
  {
    default: '#a5639b'
  },
  /* orange */
  {
    default: '#e9572f'
  }]
};
var catapultTheme = lodash_defaultsdeep({
  name: 'catapult',
  colors: colors$1
}, irisTheme);

var NAMESPACE = 'bandwidth-shared';

var PaneColumn = styled__default.div.withConfig({
  displayName: 'PaneColumn'
}).withConfig({
  displayName: "PaneColumn",
  componentId: "sc-1wqcmex-0"
})(["display:flex;flex-direction:column;width:100%;align-items:flex-start;& > *{flex:1 0 auto;border-bottom:", " solid ", ";}& > *:last-child{border-bottom:none;}"], themeGet('thicknesses.normal'), themeGet('colors.border.medium'));
PaneColumn.propTypes = {
  /**
   * Adds an id to the element.
   */
  id: propTypes.string,

  /**
   * Adds a class name to the element.
   */
  className: propTypes.string
};
PaneColumn.defaultProps = {
  id: null,
  className: null
};

var PaneRow = styled__default.div.withConfig({
  displayName: 'PaneRow'
}).withConfig({
  displayName: "PaneRow",
  componentId: "si8n7-0"
})(["display:flex;flex-direction:row;width:100%;align-items:flex-start;& > *{flex:1;border-right:", " solid ", ";border-left:", " solid ", ";margin-left:-", ";}& > *:first-child{margin-left:0;border-left:none;}& > *:last-child{border-right:none;}"], themeGet('thicknesses.normal'), themeGet('colors.border.medium'), themeGet('thicknesses.normal'), themeGet('colors.border.medium'), themeGet('thicknesses.normal'));
PaneRow.propTypes = {
  /**
   * Adds an id to the element.
   */
  id: propTypes.string,

  /**
   * Adds a class name to the element.
   */
  className: propTypes.string
};
PaneRow.defaultProps = {
  id: null,
  className: null
};

var PaneSectionContent = styled__default.div.withConfig({
  displayName: "PaneSectionContent",
  componentId: "sc-4r35f0-0"
})(["padding:0;margin:0;"]);

var SectionTitle = styled__default.h3.withConfig({
  displayName: "SectionTitle",
  componentId: "scrck1-0"
})(["background:", ";color:", ";display:block;padding:", " ", ";margin:0;font-size:0.9em;font-weight:600;line-height:1.5;text-transform:uppercase;width:100%;"], themeGet('colors.gray.mediumLight'), themeGet('colors.text.default'), themeGet('spacing.extraSmall'), themeGet('spacing.large'));

var PaneSectionTitle = styled__default(SectionTitle).withConfig({
  displayName: "PaneSectionTitle",
  componentId: "sc-1gpuwhn-0"
})(["width:auto;margin:0 -", " ", " -", ";"], themeGet('spacing.large'), themeGet('spacing.small'), themeGet('spacing.large'));

var PaneStyles = styled__default.article.withConfig({
  displayName: "PaneStyles",
  componentId: "sc-1xo07h5-0"
})(["display:flex;flex-direction:column;flex:1 1;padding:0 ", ";background:", ";", ":not(:first-of-type) > &{padding-top:", ";}"], themeGet('spacing.large'), themeGet('colors.background.default'), PaneRow, themeGet('spacing.large'));

var PaneSectionWrap = styled__default.section.withConfig({
  displayName: "PaneSectionWrap",
  componentId: "ak3rfd-0"
})(["", " > &{margin:", " 0 0 0;&:first-of-type{margin-top:0;}&:last-of-type{margin-bottom:", ";}}", ":last-child > ", " > &{margin-bottom:0;}"], PaneStyles, themeGet('spacing.large'), themeGet('spacing.large'), PaneRow, PaneStyles);

/**
 * @deprecated this layout pattern is no longer supported
 */

var PaneSection =
/*#__PURE__*/
function (_React$Component) {
  inherits(PaneSection, _React$Component);

  function PaneSection() {
    classCallCheck(this, PaneSection);

    return possibleConstructorReturn(this, getPrototypeOf(PaneSection).apply(this, arguments));
  }

  createClass(PaneSection, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          title = _this$props.title,
          children = _this$props.children,
          id = _this$props.id,
          className = _this$props.className,
          Wrap = _this$props.Wrap,
          Title = _this$props.Title,
          Content = _this$props.Content;
      return React__default.createElement(Wrap, {
        id: id,
        className: className
      }, title ? React__default.createElement(Title, null, title) : null, React__default.createElement(Content, null, children));
    }
  }]);

  return PaneSection;
}(React__default.Component);

defineProperty(PaneSection, "propTypes", {
  /**
   * Optional title for the top of the pane section.
   */
  title: propTypes.string,

  /**
   * Pane section contents.
   */
  children: propTypes.node.isRequired,

  /**
   * Adds an id to the section.
   */
  id: propTypes.string,

  /**
   * Adds a class name to the section.
   */
  className: propTypes.string,

  /**
   * A component to render the content of the pane section
   */
  Content: propTypes.func,

  /**
   * A component to render the title of the pane section
   */
  Title: propTypes.func,

  /**
   * A component to render the outer wrapper of the pane section
   */
  Wrap: propTypes.func
});

defineProperty(PaneSection, "defaultProps", {
  title: null,
  id: null,
  className: null,
  Content: PaneSectionContent,
  Title: PaneSectionTitle,
  Wrap: PaneSectionWrap
});

/**
 * @deprecated this layout pattern is no longer supported
 */

var Pane =
/*#__PURE__*/
function (_React$Component) {
  inherits(Pane, _React$Component);

  function Pane() {
    classCallCheck(this, Pane);

    return possibleConstructorReturn(this, getPrototypeOf(Pane).apply(this, arguments));
  }

  createClass(Pane, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          title = _this$props.title,
          children = _this$props.children,
          className = _this$props.className,
          id = _this$props.id,
          Styles = _this$props.Styles;
      return React__default.createElement(Styles, {
        className: className,
        id: id
      }, children);
    }
  }]);

  return Pane;
}(React__default.Component);

defineProperty(Pane, "propTypes", {
  /**
   * Contents of the pane.
   */
  children: propTypes.node.isRequired,

  /**
   * Adds an id to the pane.
   */
  id: propTypes.string,

  /**
   * Adds a class name to the pane.
   */
  className: propTypes.string,

  /**
   * A component to render the pane itself.
   */
  Styles: propTypes.func
});

defineProperty(Pane, "defaultProps", {
  className: null,
  id: null,
  Styles: PaneStyles
});

Pane.Column = PaneColumn;
Pane.Row = PaneRow;
Pane.Section = PaneSection;

var RootLayout = styled__default.div.withConfig({
  displayName: "RootLayout",
  componentId: "sc-1pwl8fv-0"
})(["position:relative;background:", ";"], function (props) {
  return props.gutter ? themeGet('colors.gray.light')(props) : themeGet('colors.background.default')(props);
});



var styles$2 = /*#__PURE__*/Object.freeze({
  RootLayout: RootLayout
});

var _createContext$1 = React.createContext(),
    _Provider = _createContext$1.Provider,
    _Consumer = _createContext$1.Consumer;
/**
 * Manages the layout-level state, keeping track of various
 * moving parts (literally) and providing information to all nested
 * layout components about the layout configuration.
 */


var Provider$1 =
/*#__PURE__*/
function (_React$PureComponent) {
  inherits(Provider, _React$PureComponent);

  function Provider() {
    var _getPrototypeOf2;

    var _this;

    classCallCheck(this, Provider);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Provider)).call.apply(_getPrototypeOf2, [this].concat(args)));

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "state", {
      // whether the main content is on the left or right
      mainContentLocation: _this.props.mainContentLocation || 'right',
      // position of the action bar. Currently not configurable by the user.
      actionBarLocation: _this.props.actionBarLocation || 'right',

      /**
       *  whether an action bar is rendered anywhere in the layout.
       * this is tricky since the user can include an action bar at any level in
       * the tree, so we must use this context to track it.
       */
      actionBarPresent: false,

      /**
       * A reference to the DOM element for the fixed layer which overlays
       * the main content area.
       */
      layerElement: null,

      /**
       * A reference to the outer element of the entire layout.
       */
      rootElement: null
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "rootElementRef", function (el) {
      _this.setState(function (state) {
        // we are ready to calculate the absolute height when both elements are ready
        if (state.layerElement) {
          _this.updateAbsoluteTop(el, state.layerElement);
        }

        return {
          rootElement: el
        };
      });
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "layerElementRef", function (el) {
      _this.setState(function (state) {
        // we are ready to calculate the absolute height when both elements are ready
        if (el && state.rootElement) {
          _this.updateAbsoluteTop(state.rootElement, el);
        }

        return {
          layerElement: el
        };
      });
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "updateHeight", function () {
      if (_this.state.layerElement) {
        _this.state.layerElement.style.top = _this.getTop(_this.absoluteTop) + 'px';
      }
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "updateAbsoluteTop", function (rootElement, layerElement) {
      var scrollTop = _this.getScrollTop();

      _this.absoluteTop = rootElement.getBoundingClientRect().top + scrollTop;
      layerElement.style.top = _this.getTop(_this.absoluteTop) + 'px';
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "getHeight", function (absoluteTop) {
      return window.innerHeight - Math.max(0, absoluteTop - _this.getScrollTop());
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "getTop", function (absoluteTop) {
      return Math.max(0, absoluteTop - _this.getScrollTop());
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "getScrollTop", function () {
      return window.pageYOffset || document.documentElement.scrollTop;
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "updateActionBarPresence", function (isPresent) {
      return _this.setState({
        actionBarPresent: isPresent
      });
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "renderElement", function (name, jsx) {
      if (name === 'secondaryContent' || name === 'actionBar' || name === 'popup') {
        return _this.state.layerElement ? ReactDOM.createPortal(jsx, _this.state.layerElement, name) : null;
      }

      return jsx;
    });

    return _this;
  }

  createClass(Provider, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      /**
       *  not using throttling or debouncing since this needs to be snappy.
       * on the plus side, we are bypassing the React update loop for these handlers,
       * so we shouldn't cause any update spam.
       */
      window.addEventListener('scroll', this.updateHeight);
      window.addEventListener('resize', this.updateHeight);
      /**
       *  fonts loading in can change the layout unexpectedly. We may need to calculate
       * the absolute top again once fonts are loaded in.
       */

      if (document.fonts && document.fonts.ready) {
        document.fonts.ready.then(function () {
          var _this2$state = _this2.state,
              layerElement = _this2$state.layerElement,
              rootElement = _this2$state.rootElement;

          if (layerElement && rootElement) {
            _this2.updateAbsoluteTop(rootElement, layerElement);
          }
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      window.removeEventListener('scroll', this.updateHeight);
      window.removeEventListener('resize', this.updateHeight);
    }
  }, {
    key: "render",
    value: function render() {
      return React__default.createElement(_Provider, {
        value: objectSpread({}, this.state, {
          updateActionBarPresence: this.updateActionBarPresence,
          renderElement: this.renderElement
        })
      }, this.props.children(this.rootElementRef, this.layerElementRef));
    }
  }]);

  return Provider;
}(React__default.PureComponent);
var Consumer$1 = _Consumer;

var ACTION_BAR_HEIGHT = 72;
var ONE_THIRD = '33.3333333333333333333333333333333333333%';
var TWO_THIRDS = '66.6666666666666666666666666666666666667%';

var Overlay = styled__default.div.withConfig({
  displayName: "Overlay",
  componentId: "sc-168hnh1-0"
})(["position:fixed;pointer-events:none;left:0;right:0;bottom:0;z-index:10;& > *{pointer-events:initial;}"]);



var styles$3 = /*#__PURE__*/Object.freeze({
  Overlay: Overlay
});

/**
 * This is a floating layer above the rest of the layout which
 * is automatically resized to cover the visible area of the layout (it grows
 * as the user scrolls the page). It houses the secondary content and action
 * bar, which are rendered in using portals.
 */

var FixedLayer = function FixedLayer(_ref) {
  var layerRef = _ref.layerRef,
      Overlay$$1 = _ref.Overlay;
  return React__default.createElement(Consumer$1, null, function (_ref2) {
    var clientTop = _ref2.clientTop,
        mainContentLocation = _ref2.mainContentLocation;
    return React__default.createElement(Overlay$$1, {
      ref: layerRef,
      mainContentLocation: mainContentLocation
    });
  });
};

FixedLayer.propTypes = {
  /**
   * Provides a ref to the underlying div
   */
  layerRef: propTypes.func,

  /**
   * The component used to render the overlay div
   */
  Overlay: propTypes.oneOfType([propTypes.object, propTypes.func])
};
FixedLayer.defaultProps = {
  Overlay: Overlay
};
FixedLayer.styles = styles$3;

var SplitContentLayout =
/*#__PURE__*/
function (_React$PureComponent) {
  inherits(SplitContentLayout, _React$PureComponent);

  function SplitContentLayout() {
    classCallCheck(this, SplitContentLayout);

    return possibleConstructorReturn(this, getPrototypeOf(SplitContentLayout).apply(this, arguments));
  }

  createClass(SplitContentLayout, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          mainContentLocation = _this$props.mainContentLocation,
          gutter = _this$props.gutter,
          RootLayout$$1 = _this$props.RootLayout,
          rest = objectWithoutProperties(_this$props, ["children", "mainContentLocation", "gutter", "RootLayout"]);

      return React__default.createElement(Provider$1, {
        mainContentLocation: mainContentLocation
      }, function (rootElementRef, layerElementRef) {
        return React__default.createElement(RootLayout$$1, _extends_1({
          ref: rootElementRef,
          className: "content-layout split-content-layout",
          gutter: gutter
        }, rest), children, React__default.createElement(FixedLayer, {
          layerRef: layerElementRef
        }));
      });
    }
  }]);

  return SplitContentLayout;
}(React__default.PureComponent);

defineProperty(SplitContentLayout, "propTypes", {
  /**
   * Children should always be SplitContentLayout.MainContent or
   * SplitContentLayout.SecondaryContent
   */
  children: propTypes.node,

  /**
   * Flips the location of the main content in the layout
   */
  mainContentLocation: propTypes.oneOf(['left', 'right']),

  /**
   * Controls the color of the content background
   */
  gutter: propTypes.bool,

  /**
   * A component to override the one that renders the top-level element of this
   * layout pattern
   */
  RootLayout: propTypes.oneOfType([propTypes.object, propTypes.func])
});

defineProperty(SplitContentLayout, "defaultProps", {
  mainContentLocation: 'right',
  gutter: false,
  RootLayout: RootLayout
});

defineProperty(SplitContentLayout, "styles", styles$2);

var getBottomSpaceFromState = function getBottomSpaceFromState(props) {
  var actionBarIsOverlapping = props.actionBarPresent && props.actionBarLocation === props.mainContentLocation;

  if (actionBarIsOverlapping) {
    return "calc(".concat(themeGet('spacing.large')(props), " + ").concat(ACTION_BAR_HEIGHT, "px)");
  }

  return themeGet('spacing.large')(props);
};

var getLeftFromState = function getLeftFromState(props) {
  return props.mainContentLocation === 'left' ? '0' : ONE_THIRD;
};

var getRightFromState = function getRightFromState(props) {
  return props.mainContentLocation === 'left' ? ONE_THIRD : '0';
};

var Container = styled__default.div.withConfig({
  displayName: "Container",
  componentId: "ghzmjv-0"
})(["position:relative;margin-left:", ";margin-right:", ";display:flex;flex-direction:column;padding:", ";padding-bottom:", ";"], getLeftFromState, getRightFromState, themeGet('spacing.large'), getBottomSpaceFromState);

var ContentBox = styled__default.div.withConfig({
  displayName: "ContentBox",
  componentId: "sc-1d60xr-0"
})(["background:", ";padding:", ";border:", " solid ", ";margin-bottom:", ";&:last-child{margin-bottom:0;}"], themeGet('colors.background.default'), themeGet('spacing.large'), themeGet('thicknesses.normal'), themeGet('colors.gray.border'), themeGet('spacing.large'));



var styles$4 = /*#__PURE__*/Object.freeze({
  Container: Container,
  ContentBox: ContentBox
});

/**
 * Main content is the primary content group for the page. This is usually
 * the 'details' view. Main content can contain an Action Bar at any level
 * of nesting and it will work properly.
 */

var MainContent = function MainContent(_ref) {
  var children = _ref.children,
      Container$$1 = _ref.Container,
      rest = objectWithoutProperties(_ref, ["children", "Container"]);

  return React__default.createElement(Consumer$1, null, function (layoutContext) {
    return layoutContext.renderElement('mainContent', React__default.createElement(Container$$1, _extends_1({
      actionBarPresent: layoutContext.actionBarPresent,
      actionBarLocation: layoutContext.actionBarLocation,
      mainContentLocation: layoutContext.mainContentLocation
    }, rest), children));
  });
};

MainContent.propTypes = {
  /**
   * Children to render in the main area
   */
  children: propTypes.node,

  /**
   * A component to use to render the container around the content
   */
  Container: propTypes.oneOfType([propTypes.object, propTypes.func])
};
MainContent.defaultProps = {
  Container: Container
};
MainContent.styles = styles$4;
MainContent.Container = Container;
MainContent.Box = ContentBox;

var getBottomSpaceFromState$1 = function getBottomSpaceFromState(props) {
  var actionBarIsOverlapping = props.actionBarPresent && props.actionBarLocation !== props.mainContentLocation;

  if (props.overlapBorder) {
    if (actionBarIsOverlapping) {
      return "".concat(ACTION_BAR_HEIGHT, "px");
    }

    return '0px';
  }

  if (actionBarIsOverlapping) {
    return "calc(".concat(themeGet('spacing.large')(props), " + ").concat(ACTION_BAR_HEIGHT, "px)");
  }

  return themeGet('spacing.large')(props);
};

var Container$1 = styled__default.div.withConfig({
  displayName: "Container",
  componentId: "sc-1doztbn-0"
})(["position:relative;top:0;height:100%;overflow-y:auto;overflow-y:overlay;padding:", ";padding-bottom:", ";"], function (props) {
  return props.overlapBorder ? '0' : themeGet('spacing.large')(props);
}, getBottomSpaceFromState$1);

var getLeftFromProps = function getLeftFromProps(props) {
  return props.mainContentLocation === 'left' ? TWO_THIRDS : '0';
};

var getRightFromProps = function getRightFromProps(props) {
  return props.mainContentLocation === 'left' ? '0' : props.overlapBorder ? TWO_THIRDS : "calc(".concat(TWO_THIRDS, " + 1px)");
};

var ShadowContainer = styled__default.div.withConfig({
  displayName: "ShadowContainer",
  componentId: "sc-8cx0ia-0"
})(["position:absolute;height:100%;left:", ";right:", ";background:", ";&::before{content:'';width:0px;border-right:", " solid ", ";top:0;bottom:0;position:absolute;right:", ";left:", ";}"], getLeftFromProps, getRightFromProps, themeGet('colors-background-default'), themeGet('thicknesses.normal'), themeGet('colors.gray.border'), function (props) {
  return props.mainContentLocation === 'left' ? 'auto' : '0';
}, function (props) {
  return props.mainContentLocation === 'left' ? '0' : 'auto';
});

var ItemContainer = styled__default.li.withConfig({
  displayName: "ItemContainer",
  componentId: "sc-9xxzsu-0"
})(["background:", ";color:", ";padding:", " ", ";border-right:", " solid ", ";position:relative;overflow-x:visible;&.active,.active > &{background:", ";border-right-color:", ";}"], function (props) {
  return props.active ? themeGet('colors.gray.light')(props) : themeGet('colors.background.default')(props);
}, themeGet('colors.text.default'), themeGet('spacing.medium'), themeGet('spacing.large'), themeGet('thicknesses.normal'), function (props) {
  return props.active ? themeGet('colors.gray.light')(props) : themeGet('colors.border.medium')(props);
}, themeGet('colors.gray.light'), themeGet('colors.gray.light'));

var Container$2 = styled__default.ul.withConfig({
  displayName: "Container",
  componentId: "sc-1razljq-0"
})(["display:flex;flex-direction:column;list-style-type:none;margin:0;padding:0;& > *{border-top:", " solid ", ";border-bottom:0;}& > *:last-child{border-bottom:", " solid ", ";}& > * > ", "{border-bottom:0;border-top:0;}"], themeGet('thicknesses.normal'), themeGet('colors.gray.border'), themeGet('thicknesses.normal'), themeGet('colors.gray.border'), ItemContainer);

var ItemDetails = styled__default.div.withConfig({
  displayName: "ItemDetails",
  componentId: "sc-1m271ib-0"
})([""]);

var ItemLabel = styled__default.h3.withConfig({
  displayName: "ItemLabel",
  componentId: "sc-14rop7i-0"
})(["text-transform:uppercase;font-size:14px;font-weight:bold;margin:0;"]);

var ShowMore = styled__default.div.withConfig({
  displayName: "ShowMore",
  componentId: "sc-1ed5hv1-0"
})(["background:", ";color:", ";padding:", " ", ";border-bottom:", " solid ", ";border-right:", " solid ", ";cursor:pointer;"], themeGet('colors.primary.light'), themeGet('colors.primary.alternate'), themeGet('spacing.medium'), themeGet('spacing.large'), themeGet('thicknesses.normal'), themeGet('colors.gray.borderLight'), themeGet('thicknesses.normal'), themeGet('colors.gray.borderLight'));
ShowMore.propTypes = {
  /**
   * Adds a class name to the element.
   */
  className: propTypes.string,

  /**
   * Adds an id to the element.
   */
  id: propTypes.string
};
ShowMore.defaultProps = {
  className: null,
  id: null
};

/**
 * An element of a [SidebarList](/#!/SidebarList).
 */

var SidebarListItem =
/*#__PURE__*/
function (_React$PureComponent) {
  inherits(SidebarListItem, _React$PureComponent);

  function SidebarListItem() {
    classCallCheck(this, SidebarListItem);

    return possibleConstructorReturn(this, getPrototypeOf(SidebarListItem).apply(this, arguments));
  }

  createClass(SidebarListItem, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          active = _this$props.active,
          isNew = _this$props.isNew,
          id = _this$props.id,
          className = _this$props.className,
          Container = _this$props.Container,
          children = _this$props.children,
          rest = objectWithoutProperties(_this$props, ["active", "isNew", "id", "className", "Container", "children"]);

      return React__default.createElement(Container, _extends_1({
        active: active,
        className: className,
        id: id
      }, rest), children);
    }
  }]);

  return SidebarListItem;
}(React__default.PureComponent);

defineProperty(SidebarListItem, "propTypes", {
  /**
   * Content to render inside the item.
   */
  children: propTypes.node.isRequired,

  /**
   * Renders the item as the one currently selected.
   */
  active: propTypes.bool,

  /**
   * Adds a class name to the outer item element.
   */
  className: propTypes.string,

  /**
   * Adds an id to the outer item element.
   */
  id: propTypes.string,

  /**
   * A component for rendering a container of an item
   */
  Container: propTypes.func
});

defineProperty(SidebarListItem, "defaultProps", {
  label: null,
  details: null,
  active: false,
  isNew: false,
  className: null,
  id: null,
  Container: ItemContainer
});

defineProperty(SidebarListItem, "Label", ItemLabel);

defineProperty(SidebarListItem, "Details", ItemDetails);

/**
 * Lays out items vertically in a sidebar. Does not handle scrolling.
 * Use [SidebarList.Item](/#!/SidebarListItem) as the child elements.
 *
 * You can show selected state by either passing an `active` prop to the correct item
 * or linking your list to your router so that each item is a unique route. If you go that direction,
 * you can wrap the items with `<Route/>` components from React Router, and have them utilize RR's
 * built-in route matching logic to determine rendering appearance.
 */

var SidebarList =
/*#__PURE__*/
function (_React$PureComponent) {
  inherits(SidebarList, _React$PureComponent);

  function SidebarList() {
    classCallCheck(this, SidebarList);

    return possibleConstructorReturn(this, getPrototypeOf(SidebarList).apply(this, arguments));
  }

  createClass(SidebarList, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          id = _this$props.id,
          Container = _this$props.Container,
          children = _this$props.children,
          rest = objectWithoutProperties(_this$props, ["className", "id", "Container", "children"]);

      return React__default.createElement(Container, _extends_1({
        className: className,
        id: id
      }, rest), children);
    }
  }]);

  return SidebarList;
}(React__default.PureComponent);

defineProperty(SidebarList, "propTypes", {
  /**
   * List items.
   */
  children: propTypes.node.isRequired,

  /**
   * Adds a class name to the containing list element.
   */
  className: propTypes.string,

  /**
   * Adds an id to the containing list element.
   */
  id: propTypes.string,

  /**
   * A compoennt to render the container around the list
   */
  Container: propTypes.func
});

defineProperty(SidebarList, "defaultProps", {
  className: null,
  id: null,
  Container: Container$2
});

defineProperty(SidebarList, "ShowMore", ShowMore);

defineProperty(SidebarList, "Item", SidebarListItem);



var styles$5 = /*#__PURE__*/Object.freeze({
  Container: Container$1,
  ShadowContainer: ShadowContainer,
  SidebarList: SidebarList
});

/**
 * Secondary content is the 'sidebar'. In common configurations,
 * it's either an item list or a small single-column form.
 * Secondary content can contain an Action Bar if you want it to.
 */

var SecondaryContent = function SecondaryContent(_ref) {
  var children = _ref.children,
      overlapBorder = _ref.overlapBorder,
      Container = _ref.Container,
      ShadowContainer$$1 = _ref.ShadowContainer,
      rest = objectWithoutProperties(_ref, ["children", "overlapBorder", "Container", "ShadowContainer"]);

  return React__default.createElement(Consumer$1, null, function (layoutContext) {
    return layoutContext.renderElement('secondaryContent', React__default.createElement(ScrollShadow, _extends_1({
      Container: ShadowContainer$$1,
      ScrollContainer: Container,
      actionBarPresent: layoutContext.actionBarPresent,
      actionBarLocation: layoutContext.actionBarLocation,
      mainContentLocation: layoutContext.mainContentLocation,
      overlapBorder: overlapBorder
    }, rest), children));
  });
};

SecondaryContent.propTypes = {
  /**
   * Children you want to render in the sidebar
   */
  children: propTypes.node,

  /**
   * A component to override the one that renders the outer container
   */
  Container: propTypes.oneOfType([propTypes.object, propTypes.func]),

  /**
   * A component to override the one that renders the shadow container for
   * the inner ScrollShadow
   */
  ShadowContainer: propTypes.oneOfType([propTypes.object, propTypes.func])
};
SecondaryContent.defaultProps = {
  Container: Container$1,
  ShadowContainer: ShadowContainer
};
SecondaryContent.styles = styles$5;
SecondaryContent.Container = Container$1;
SecondaryContent.SidebarList = SidebarList;

var getExternalSpace = function getExternalSpace(props) {
  return props.actionBarLocation === props.mainContentLocation ? "calc(".concat(ONE_THIRD, " - 1px)") : "calc(".concat(TWO_THIRDS, ")");
};

var getLeftFromState$1 = function getLeftFromState(props) {
  return props.actionBarLocation === 'right' ? getExternalSpace(props) : '0';
};

var getRightFromState$1 = function getRightFromState(props) {
  return props.actionBarLocation === 'right' ? '0' : getExternalSpace(props);
};

var Bar = styled__default.div.withConfig({
  displayName: "Bar",
  componentId: "sc-16g8r1u-0"
})(["position:absolute;z-index:15;bottom:0;left:", ";right:", ";background:", ";border-top:", " solid ", ";border-left:", " solid ", ";border-right:", " solid ", ";display:flex;flex-direction:column;top:calc(100% - 72px);transition:0.2s ease all;&.expand-enter,&.expand-enter-active,&.expand-enter-done{border-top:0;top:0;}"], getLeftFromState$1, getRightFromState$1, themeGet('colors.background.default'), themeGet('thicknesses.normal'), themeGet('colors.gray.border'), themeGet('thicknesses.normal'), themeGet('colors.gray.border'), themeGet('thicknesses.normal'), themeGet('colors.gray.border'));

var BottomContent = styled__default.div.withConfig({
  displayName: "BottomContent",
  componentId: "sc-1y1utu7-0"
})(["position:absolute;bottom:0;right:", ";left:", ";height:", "px;pointer-events:none;display:flex;flex-direction:row;justify-content:flex-end;background:", ";border-top:", " solid ", ";transition:0.05s ease background;@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){justify-content:flex-start;}"], themeGet('spacing.large'), themeGet('spacing.large'), ACTION_BAR_HEIGHT, themeGet('colors.background.default'), themeGet('thicknesses.normal'), themeGet('colors.gray.border'));

var Spacer = styled__default.div.withConfig({
  displayName: "Spacer",
  componentId: "qbkfgb-0"
})(["height:", "px;width:100%;flex-shrink:0;"], ACTION_BAR_HEIGHT);

var ExpandingContainer = styled__default.div.withConfig({
  displayName: "ExpandingContainer",
  componentId: "sc-1gagg5i-0"
})(["margin-top:", "px;padding-bottom:", "px;height:", "px;background:transparent;pointer-events:none;z-index:10;transition:0.2s ease all;.expand-enter-active &,.expand-enter-done &{background:", ";overflow-y:auto;overflow-y:overlay;z-index:0;pointer-events:initial;height:auto;margin-top:0;}.expand-enter &,.expand-exit &{transition:0.2s ease margin-top,0.2s ease top;}& > *{pointer-events:initial;}"], ACTION_BAR_HEIGHT, ACTION_BAR_HEIGHT, ACTION_BAR_HEIGHT, themeGet('colors.background.default'));

var ControlArea = styled__default.div.withConfig({
  displayName: "ControlArea",
  componentId: "sc-1r4k60o-0"
})(["display:flex;flex-direction:row;pointer-events:initial;justify-content:flex-end;height:100%;margin-left:auto;@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){justify-content:flex-start;}& > *{margin-top:auto;margin-bottom:auto;margin-right:", ";margin-left:0;&:last-child{margin-right:0;}}"], themeGet('spacing.medium'));



var styles$6 = /*#__PURE__*/Object.freeze({
  Bar: Bar,
  BottomContent: BottomContent,
  Spacer: Spacer,
  ExpandingContainer: ExpandingContainer,
  ControlArea: ControlArea
});

var ActionBarPresenceNotifier =
/*#__PURE__*/
function (_React$PureComponent) {
  inherits(ActionBarPresenceNotifier, _React$PureComponent);

  function ActionBarPresenceNotifier() {
    classCallCheck(this, ActionBarPresenceNotifier);

    return possibleConstructorReturn(this, getPrototypeOf(ActionBarPresenceNotifier).apply(this, arguments));
  }

  createClass(ActionBarPresenceNotifier, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.props.updateActionBarPresence(true);
    }
  }, {
    key: "render",
    value: function render() {
      return null;
    }
  }]);

  return ActionBarPresenceNotifier;
}(React__default.PureComponent);

/**
 * The Action Bar is a bar docked to the bottom right of the screen.
 * It aligns with the rightmost content area of the layout. It should
 * contain buttons, links, and other small controls. It also supports
 * an expanding full-screen popup area which can contain more complex
 * forms or controls.
 *
 * You can only have one ActionBar in any particular layout. This is a soft
 * limitation - we could change it - but from a design perspective, we
 * should not present the user with more than one set of possible actions
 * on a page.
 */

var ActionBar =
/*#__PURE__*/
function (_React$Component) {
  inherits(ActionBar, _React$Component);

  function ActionBar() {
    var _getPrototypeOf2;

    var _this;

    classCallCheck(this, ActionBar);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(ActionBar)).call.apply(_getPrototypeOf2, [this].concat(args)));

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "state", {
      internalExpanded: !!_this.props.expanded
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "toggleExpanded", function (value) {
      return _this.setState(function (_ref) {
        var internalExpanded = _ref.internalExpanded;
        return {
          internalExpanded: typeof value === 'boolean' ? value : !internalExpanded
        };
      });
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "getExpanded", function () {
      var _assertThisInitialize = assertThisInitialized(assertThisInitialized(_this)),
          internalExpanded = _assertThisInitialize.state.internalExpanded,
          expanded = _assertThisInitialize.props.expanded;

      return expanded === undefined ? internalExpanded : expanded;
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "renderChildren", function () {
      var _assertThisInitialize2 = assertThisInitialized(assertThisInitialized(_this)),
          children = _assertThisInitialize2.props.children,
          toggleExpanded = _assertThisInitialize2.toggleExpanded;

      var expanded = _this.getExpanded();

      if (typeof children === 'function') {
        return children({
          toggleExpanded: toggleExpanded,
          expanded: expanded,
          barHeight: ACTION_BAR_HEIGHT
        });
      }

      return children;
    });

    return _this;
  }

  createClass(ActionBar, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          children = _this$props.children,
          renderExpandingContent = _this$props.renderExpandingContent,
          Bar$$1 = _this$props.Bar,
          BottomContent$$1 = _this$props.BottomContent,
          ControlArea$$1 = _this$props.ControlArea,
          ExpandingContainer$$1 = _this$props.ExpandingContainer,
          toggleExpanded = this.toggleExpanded;
      var expanded = this.getExpanded();
      return React__default.createElement(Consumer$1, null, function (layoutState) {
        return layoutState.renderElement('actionBar', React__default.createElement(reactTransitionGroup.CSSTransition, {
          in: expanded,
          classNames: "expand",
          timeout: 200
        }, React__default.createElement(Bar$$1, {
          mainContentLocation: layoutState.mainContentLocation,
          actionBarLocation: layoutState.actionBarLocation
        }, React__default.createElement(ActionBarPresenceNotifier, {
          updateActionBarPresence: layoutState.updateActionBarPresence
        }), renderExpandingContent && React__default.createElement(ExpandingContainer$$1, {
          className: "action-bar-expanding-container"
        }, renderExpandingContent({
          expanded: expanded,
          toggleExpanded: toggleExpanded,
          barHeight: ACTION_BAR_HEIGHT
        })), React__default.createElement(BottomContent$$1, {
          expanded: expanded,
          className: "action-bar-bottom-content"
        }, React__default.createElement(ControlArea$$1, null, _this2.renderChildren())), React__default.createElement(ScrollShadow.ConnectedShadow, {
          outer: true,
          disabled: expanded
        }))));
      });
    }
  }]);

  return ActionBar;
}(React__default.Component);

defineProperty(ActionBar, "propTypes", {
  children: propTypes.node.isRequired,

  /**
   * Called with ({ expanded, toggleExpanded, barHeight })
   */
  renderExpandingContent: propTypes.func,

  /**
   * Controls whether the action bar content area is expanded to fill the screen.
   */
  expanded: propTypes.bool,

  /**
   * A component to override the one that renders the bar section
   */
  Bar: propTypes.oneOfType([propTypes.object, propTypes.func]),

  /**
   * A component to override the one that renders the bottom content section
   */
  BottomContent: propTypes.oneOfType([propTypes.object, propTypes.func]),

  /**
   * A component to override the one that renders the control area section
   */
  ControlArea: propTypes.oneOfType([propTypes.object, propTypes.func]),

  /**
   * A component to override the one that renders the expanding container section
   */
  ExpandingContainer: propTypes.oneOfType([propTypes.object, propTypes.func])
});

defineProperty(ActionBar, "defaultProps", {
  renderExpandingContent: null,
  Bar: Bar,
  BottomContent: BottomContent,
  ControlArea: ControlArea,
  ExpandingContainer: ExpandingContainer
});

defineProperty(ActionBar, "styles", styles$6);

var TRANSITION_MS = 200;

var show = styled.keyframes(["from{top:100%;box-shadow:0 0 0 5000px transparent;}to{top:0;box-shadow:0 0 0 5000px ", ";}"], themeGet('colors.shadow.default'));
var Container$3 = styled__default.div.withConfig({
  displayName: "Container",
  componentId: "kpnh7z-0"
})(["position:absolute;left:0;right:0;transition:", "s ease all;top:", ";height:100%;background:", ";border-top-left-radius:6px;border-top-right-radius:6px;overflow-y:auto;overflow-y:overlay;animation:", " 0.2s;padding:", ";box-shadow:0 0 0 5000px ", ";z-index:30;"], TRANSITION_MS / 1000, function (props) {
  return props.expanded ? '0%' : '100%';
}, themeGet('colors.background.default'), show, themeGet('spacing.large'), function (props) {
  return props.expanded ? themeGet('colors.shadow.default')(props) : 'transparent';
});

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 * 
 */

var lib = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
var createChangeEmitter = exports.createChangeEmitter = function createChangeEmitter() {
  var currentListeners = [];
  var nextListeners = currentListeners;

  function ensureCanMutateNextListeners() {
    if (nextListeners === currentListeners) {
      nextListeners = currentListeners.slice();
    }
  }

  function listen(listener) {
    if (typeof listener !== 'function') {
      throw new Error('Expected listener to be a function.');
    }

    var isSubscribed = true;

    ensureCanMutateNextListeners();
    nextListeners.push(listener);

    return function () {
      if (!isSubscribed) {
        return;
      }

      isSubscribed = false;

      ensureCanMutateNextListeners();
      var index = nextListeners.indexOf(listener);
      nextListeners.splice(index, 1);
    };
  }

  function emit() {
    currentListeners = nextListeners;
    var listeners = currentListeners;
    for (var i = 0; i < listeners.length; i++) {
      listeners[i].apply(listeners, arguments);
    }
  }

  return {
    listen: listen,
    emit: emit
  };
};
});

unwrapExports(lib);
var lib_1 = lib.createChangeEmitter;

function symbolObservablePonyfill(root) {
	var result;
	var Symbol = root.Symbol;

	if (typeof Symbol === 'function') {
		if (Symbol.observable) {
			result = Symbol.observable;
		} else {
			result = Symbol('observable');
			Symbol.observable = result;
		}
	} else {
		result = '@@observable';
	}

	return result;
}

/* global window */

var root$4;

if (typeof self !== 'undefined') {
  root$4 = self;
} else if (typeof window !== 'undefined') {
  root$4 = window;
} else if (typeof global !== 'undefined') {
  root$4 = global;
} else if (typeof module !== 'undefined') {
  root$4 = module;
} else {
  root$4 = Function('return this')();
}

var result = symbolObservablePonyfill(root$4);

var setStatic = function setStatic(key, value) {
  return function (BaseComponent) {
    /* eslint-disable no-param-reassign */
    BaseComponent[key] = value;
    /* eslint-enable no-param-reassign */
    return BaseComponent;
  };
};

var setDisplayName = function setDisplayName(displayName) {
  return setStatic('displayName', displayName);
};

var getDisplayName = function getDisplayName(Component$$1) {
  if (typeof Component$$1 === 'string') {
    return Component$$1;
  }

  if (!Component$$1) {
    return undefined;
  }

  return Component$$1.displayName || Component$$1.name || 'Component';
};

var wrapDisplayName = function wrapDisplayName(BaseComponent, hocName) {
  return hocName + '(' + getDisplayName(BaseComponent) + ')';
};

var mapProps = function mapProps(propsMapper) {
  return function (BaseComponent) {
    var factory = React.createFactory(BaseComponent);
    var MapProps = function MapProps(props) {
      return factory(propsMapper(props));
    };
    {
      return setDisplayName(wrapDisplayName(BaseComponent, 'mapProps'))(MapProps);
    }
    return MapProps;
  };
};

var classCallCheck$1 = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};









var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};



var inherits$1 = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var possibleConstructorReturn$1 = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var withProps = function withProps(input) {
  var hoc = mapProps(function (props) {
    return _extends({}, props, typeof input === 'function' ? input(props) : input);
  });
  {
    return function (BaseComponent) {
      return setDisplayName(wrapDisplayName(BaseComponent, 'withProps'))(hoc(BaseComponent));
    };
  }
  return hoc;
};

var defaultProps = function defaultProps(props) {
  return function (BaseComponent) {
    var factory = React.createFactory(BaseComponent);
    var DefaultProps = function DefaultProps(ownerProps) {
      return factory(ownerProps);
    };
    DefaultProps.defaultProps = props;
    {
      return setDisplayName(wrapDisplayName(BaseComponent, 'defaultProps'))(DefaultProps);
    }
    return DefaultProps;
  };
};

var Nothing = function (_Component) {
  inherits$1(Nothing, _Component);

  function Nothing() {
    classCallCheck$1(this, Nothing);
    return possibleConstructorReturn$1(this, _Component.apply(this, arguments));
  }

  Nothing.prototype.render = function render() {
    return null;
  };

  return Nothing;
}(React.Component);

var map = {
  administrator: '\\f149',
  amazon: '\\f179',
  api: '\\f19a',
  apiSettings: '\\f19b',
  appointmentReminders: '\\f101',
  ascendingSorting: '\\f114',
  assistant: '\\f1a4',
  attention: '\\f159',
  average2: '\\f172',
  back: '\\f118',
  businessman: '\\f14c',
  businesswoman: '\\f14a',
  calendar: '\\f108',
  calendar1: '\\f11b',
  calendar_1: '\\f11b',
  calendar10: '\\f139',
  calendar_10: '\\f139',
  calendar11: '\\f125',
  calendar_11: '\\f125',
  calendar12: '\\f123',
  calendar_12: '\\f123',
  calendar13: '\\f126',
  calendar_13: '\\f126',
  calendar14: '\\f127',
  calendar_14: '\\f127',
  calendar15: '\\f128',
  calendar_15: '\\f128',
  calendar16: '\\f12f',
  calendar_16: '\\f12f',
  calendar17: '\\f129',
  calendar_17: '\\f129',
  calendar18: '\\f12a',
  calendar_18: '\\f12a',
  calendar19: '\\f12b',
  calendar_19: '\\f12b',
  calendar2: '\\f121',
  calendar_2: '\\f121',
  calendar20: '\\f12e',
  calendar_20: '\\f12e',
  calendar21: '\\f130',
  calendar_21: '\\f130',
  calendar22: '\\f12c',
  calendar_22: '\\f12c',
  calendar23: '\\f12d',
  calendar_23: '\\f12d',
  calendar24: '\\f131',
  calendar_24: '\\f131',
  calendar25: '\\f132',
  calendar_25: '\\f132',
  calendar26: '\\f133',
  calendar_26: '\\f133',
  calendar27: '\\f134',
  calendar_27: '\\f134',
  calendar28: '\\f11c',
  calendar_28: '\\f11c',
  calendar29: '\\f135',
  calendar_29: '\\f135',
  calendar3: '\\f11d',
  calendar_3: '\\f11d',
  calendar30: '\\f136',
  calendar_30: '\\f136',
  calendar31: '\\f137',
  calendar_31: '\\f137',
  calendar4: '\\f138',
  calendar_4: '\\f138',
  calendar5: '\\f11e',
  calendar_5: '\\f11e',
  calendar6: '\\f124',
  calendar_6: '\\f124',
  calendar7: '\\f11f',
  calendar_7: '\\f11f',
  calendar8: '\\f120',
  calendar_8: '\\f120',
  calendar9: '\\f122',
  calendar_9: '\\f122',
  callTransfer: '\\f186',
  callTransferFilled: '\\f187',
  cat: '\\f164',
  cheap2: '\\f171',
  checkedCheckbox: '\\f10d',
  checkmark: '\\f19f',
  clearFilters: '\\f1b3',
  clearShoppingCart: '\\f1b4',
  clearShoppingCart2: '\\f1b9',
  code: '\\f13e',
  collaborator: '\\f148',
  collapse: '\\f17f',
  columns: '\\f1ac',
  computer: '\\f196',
  controller: '\\f162',
  copy: '\\f180',
  courses: '\\f18b',
  coursesFilled: '\\f18c',
  crown: '\\f103',
  csv: '\\f119',
  delete: '\\f110',
  delete2: '\\f111',
  // DEPRECATED: use delete2
  delete_2: '\\f111',
  delete3: '\\f15b',
  // DEPRECATED: use delete3
  delete_3: '\\f15b',
  descendingSorting: '\\f115',
  disclaimer: '\\f1af',
  down: '\\f113',
  down2: '\\f17d',
  download: '\\f161',
  downloadFromCloud: '\\f16d',
  edit: '\\f1aa',
  edit2: '\\f1ab',
  emptyBox: '\\f13c',
  error: '\\f1b1',
  errorFilled: '\\f109',
  exclamationMarkFilled: '\\f17e',
  exit: '\\f145',
  expandArrow: '\\f117',
  expensive2: '\\f173',
  expired: '\\f150',
  externalLink: '\\f194',
  file: '\\f13f',
  fileFilled: '\\f140',
  flashOn: '\\f16b',
  forward: '\\f116',
  genderNeutralUser: '\\f174',
  googleLogoFilled: '\\f177',
  grid: '\\f1ad',
  guest: '\\f14d',
  hashtag: '\\f182',
  hashtagFilled: '\\f183',
  help: '\\f105',
  help2: '\\f106',
  // DEPRECATED: use help2
  help_2: '\\f106',
  hide: '\\f1a7',
  home: '\\f18a',
  insertTable: '\\f13d',
  journey: '\\f188',
  journeyFilled: '\\f189',
  link: '\\f193',
  lock: '\\f147',
  loginRounded: '\\f1a6',
  logoutRounded: '\\f1a5',
  lol: '\\f165',
  lowPrice: '\\f170',
  maintenance: '\\f18d',
  menu: '\\f13a',
  menu2: '\\f18f',
  message: '\\f146',
  minus: '\\f1bd',
  moderator: '\\f14e',
  more: '\\f13b',
  moveGrabber: '\\f1a2',
  msExcel: '\\f11a',
  musicVideo: '\\f169',
  ok: '\\f10a',
  okFilled: '\\f10b',
  onlineSupport: '\\f1a3',
  openInWindow: '\\f191',
  pdf2: '\\f15e',
  // DEPRECATED: use pdf2
  pdf_2: '\\f15e',
  phone: '\\f141',
  phoneFilled: '\\f142',
  picture: '\\f166',
  plusMath: '\\f181',
  pokemon: '\\f163',
  portrait: '\\f16a',
  purchaseOrder: '\\f1bb',
  readMessage: '\\f199',
  restart: '\\f1ba',
  save: '\\f1a1',
  search: '\\f102',
  searchFilled: '\\f107',
  securityChecked: '\\f176',
  server: '\\f195',
  settings: '\\f1a9',
  shoppingCart: '\\f1bf',
  signature: '\\f1ae',
  skypeFilled: '\\f178',
  sms: '\\f184',
  smsFilled: '\\f185',
  sortingOptions: '\\f160',
  speechBubble: '\\f143',
  speechBubbleFilled: '\\f144',
  speedometer: '\\f175',
  spinnerFrame1: '\\f151',
  spinnerFrame_1: '\\f151',
  spinnerFrame2: '\\f152',
  spinnerFrame_2: '\\f152',
  spinnerFrame3: '\\f153',
  spinnerFrame_3: '\\f153',
  spinnerFrame4: '\\f154',
  spinnerFrame_4: '\\f154',
  spinnerFrame5: '\\f155',
  spinnerFrame_5: '\\f155',
  spinnerFrame6: '\\f156',
  spinnerFrame_6: '\\f156',
  spinnerFrame7: '\\f157',
  spinnerFrame_7: '\\f157',
  spinnerFrame8: '\\f158',
  spinnerFrame_8: '\\f158',
  stack: '\\f197',
  stackOfPhotos: '\\f167',
  thumbUp: '\\f16e',
  toggleOff: '\\f10e',
  toggleOnFilled: '\\f10f',
  toolbox: '\\f18e',
  trash: '\\f104',
  tripadvisor: '\\f17b',
  tvShow: '\\f16c',
  uncheckedCheckbox: '\\f10c',
  unicorn: '\\f14f',
  up: '\\f19e',
  up2: '\\f17c',
  upload: '\\f19d',
  user: '\\f15d',
  userFemaleBody: '\\f15c',
  userMaleCircle: '\\f100',
  videoPlaylist: '\\f168',
  viewMore: '\\f1bc',
  visible: '\\f1a8',
  voipGateway: '\\f198',
  whatsappFilled: '\\f17a',
  worker: '\\f14b',
  xls: '\\f15f'
};
var icons = (function (name) {
  return map[name];
});

var Icon = styled__default.i.withConfig({
  displayName: 'Icon'
}).withConfig({
  displayName: "Icon",
  componentId: "sc-1v77ru4-0"
})(["font-family:", ";font-size:inherit;color:", ";font-style:normal;display:inline-block;cursor:", ";&::before{content:\"", "\";display:block;color:inherit;}"], themeGet('fonts.icon'), function (_ref) {
  var color = _ref.color;
  return color || 'inherit';
}, function (_ref2) {
  var onClick = _ref2.onClick;
  return onClick ? 'pointer' : 'inherit';
}, function (_ref3) {
  var name = _ref3.name,
      iconsHelper = _ref3.iconsHelper;
  return iconsHelper(name) || iconsHelper('help_2');
});
Icon.propTypes = {
  /**
   * The name of the glyph to use (see src/Icon/icons.js)
   */
  name: propTypes.string.isRequired,

  /**
   * Adds a class name to the element.
   */
  className: propTypes.string,

  /**
   * Adds an id to the element.
   */
  id: propTypes.string,

  /**
   * Replace the icon helper function (advanced).
   */
  iconsHelper: propTypes.func,

  /**
   * Color of the icon
   */
  color: propTypes.string
};
Icon.defaultProps = {
  className: null,
  id: null,
  iconsHelper: icons,
  color: null
};

var AccordionArrow = styled__default(Icon).withConfig({
  displayName: "Arrow__AccordionArrow",
  componentId: "sc-1dowmwa-0"
})(["color:", ";margin:auto 1em auto auto;transform:", ";transition:0.2s all ease;font-weight:100;&:after{padding-top:0;padding-bottom:0;font-size:1.5em;}"], themeGet('colors.gray.default'), function (_ref) {
  var isExpanded = _ref.isExpanded;
  return isExpanded ? 'rotate(90deg)' : 'rotate(0)';
});
AccordionArrow.Small = styled__default(AccordionArrow).withConfig({
  displayName: "Arrow__Small",
  componentId: "sc-1dowmwa-1"
})(["color:", ";&:after{font-size:1em;}"], themeGet('colors.text.default'));

var Border = styled__default.div.withConfig({
  displayName: "Border",
  componentId: "wgaep8-0"
})(["border-width:", ";border-color:", ";border-style:solid;& + &{border-top:0;}background:", ";"], themeGet('thicknesses.normal'), themeGet('colors.gray.border'), function (props) {
  return props.disabled ? themeGet('colors.background.disabled')(props) : 'transparent';
});

var AccordionContent = styled__default.div.withConfig({
  displayName: "Content__AccordionContent",
  componentId: "sc-2b476m-0"
})(["padding:", ";padding-top:0;display:flex;flex-direction:column;"], themeGet('spacing.large'));

var AccordionLabel = styled__default.div.withConfig({
  displayName: "Label__AccordionLabel",
  componentId: "sc-1531omd-0"
})(["padding:", ";color:", ";font-family:", ";font-size:1.5em;line-height:1.5;text-transform:none;font-weight:400;cursor:", ";display:flex;flex-direction:row;user-select:none;"], userSpacing.text, themeGet('colors.primary.default'), themeGet('fonts.brand'), function (_ref) {
  var disabled = _ref.disabled;
  return disabled ? 'auto' : 'pointer';
});
AccordionLabel.Small = styled__default(AccordionLabel).withConfig({
  displayName: "Label__Small",
  componentId: "sc-1531omd-1"
})(["color:", ";font-weight:600;font-size:1em;text-transform:uppercase;"], themeGet('colors.text.default'));

var LabelText = styled__default.span.withConfig({
  displayName: "LabelText",
  componentId: "sc-1w039yb-0"
})(["margin:auto;flex:1;"]);



var styles$7 = /*#__PURE__*/Object.freeze({
  Arrow: AccordionArrow,
  Border: Border,
  Content: AccordionContent,
  Label: AccordionLabel,
  LabelText: LabelText
});

/**
 * Accordion expands and collapses when the label is clicked. Alternatively, you can provide the `isExpanded` prop to force open/closed state.
 * You can also provide a hook to `onToggle`. Your `onToggle` function will be called with one parameter, a boolean representing whether
 * the component is currently collapsed at the time it was clicked.
 *
 * Accepts `label` to define what's rendered in the label.
 */

var Accordion =
/*#__PURE__*/
function (_React$Component) {
  inherits(Accordion, _React$Component);

  function Accordion() {
    var _getPrototypeOf2,
        _this2 = this;

    var _this;

    classCallCheck(this, Accordion);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Accordion)).call.apply(_getPrototypeOf2, [this].concat(args)));

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "coalesceIsExpandedProps", function () {
      var _this$props = _this.props,
          isExpanded = _this$props.isExpanded,
          isCollapsed = _this$props.isCollapsed;

      if (isExpanded === null && isCollapsed === null) {
        return null;
      }

      if (isExpanded === null) {
        return !isCollapsed;
      }

      return isExpanded;
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "renderLabel", function (isExpanded, disabled) {
      return React__default.createElement(_this2.props.Label, {
        spacing: _this.props.labelSpacing,
        disabled: disabled
      }, React__default.createElement(_this2.props.Arrow, {
        isExpanded: isExpanded,
        name: "forward",
        size: 21
      }), React__default.createElement(_this2.props.LabelText, null, _this.props.label));
    });

    return _this;
  }

  createClass(Accordion, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          id = _this$props2.id,
          className = _this$props2.className,
          onToggle = _this$props2.onToggle,
          children = _this$props2.children,
          Border$$1 = _this$props2.Border,
          Content = _this$props2.Content,
          Label = _this$props2.Label,
          Arrow = _this$props2.Arrow,
          LabelText$$1 = _this$props2.LabelText,
          startExpanded = _this$props2.startExpanded,
          disabled = _this$props2.disabled,
          unmountClosed = _this$props2.unmountClosed,
          springConfig = _this$props2.springConfig,
          rest = objectWithoutProperties(_this$props2, ["id", "className", "onToggle", "children", "Border", "Content", "Label", "Arrow", "LabelText", "startExpanded", "disabled", "unmountClosed", "springConfig"]);

      return React__default.createElement(Border$$1, _extends_1({
        disabled: disabled
      }, rest), React__default.createElement(ExpandToggle, {
        id: id,
        className: className,
        onToggle: onToggle,
        toggleContent: this.renderLabel,
        isExpanded: this.coalesceIsExpandedProps(),
        startExpanded: startExpanded,
        disabled: disabled,
        unmountClosed: unmountClosed,
        springConfig: springConfig
      }, React__default.createElement(Content, null, children)));
    }
  }]);

  return Accordion;
}(React__default.Component);

defineProperty(Accordion, "propTypes", {
  /**
   * Content to render when the accordion is collapsed, and in the header of the expanded state.
   */
  label: propTypes.node.isRequired,

  /**
   * Content inside the collapsible part of the accordion.
   */
  children: propTypes.node,

  /**
   * Pass isExpanded to override the internal collapsing state (makes the expanded state a controlled value, please
   * use onToggle to manage the state yourself or startExpanded if you just want to set the initial state).
   */
  isExpanded: propTypes.bool,

  /**
   * Use this to set the default initial state of the internal expanded state without
   * turning it into a controlled value.
   */
  startExpanded: propTypes.bool,

  /**
   * DEPRECATED: the negation of isExpanded, overrides internal collapse state
   */
  isCollapsed: propTypes.bool,

  /**
   * Add a handler for when the accordion is collapsed or expanded.
   */
  onToggle: propTypes.func,

  /**
   * If true, the user cannot change the expanded state of this
   * accordion.
   */
  disabled: propTypes.bool,

  /**
   * If true, contents are unmounted when the accordion is closed. Useful for improving performance when the Accordion
   * contains a large amount of complex contents.
   */
  unmountClosed: propTypes.bool,

  /**
   * Set a classname for the accordion container element.
   */
  className: propTypes.string,

  /**
   * Set an id for the accordion container element.
   */
  id: propTypes.string,

  /**
   * react-motion config, see https://github.com/chenglou/react-motion#--spring-val-number-config-springhelperconfig--opaqueconfig
   */
  springConfig: propTypes.shape({
    stiffness: propTypes.number,
    damping: propTypes.number,
    precision: propTypes.number
  }),

  /**
   * A component to render the border
   */
  Border: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A component to render the label
   */
  Label: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A component to render the arrow
   */
  Arrow: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A component to render the text inside the label
   */
  LabelText: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A component to render the content area
   */
  Content: propTypes.oneOfType([propTypes.func, propTypes.object])
});

defineProperty(Accordion, "defaultProps", {
  isExpanded: null,
  startExpanded: false,
  isCollapsed: null,
  onToggle: null,
  className: null,
  id: null,
  disabled: false,
  unmountClosed: false,
  springConfig: null,
  Border: Border,
  Label: AccordionLabel,
  Arrow: AccordionArrow,
  LabelText: LabelText,
  Content: AccordionContent,
  labelSpacing: 'lg'
});

defineProperty(Accordion, "styles", styles$7);

Accordion.Small = defaultProps({
  Border: Border.Small,
  Arrow: AccordionArrow.Small,
  Label: AccordionLabel.Small,
  labelSpacing: '20px'
})(Accordion);

var fadeIn = styled.keyframes(["from{opacity:0;}to{opacity:1;}"]);
var AlertBorder = styled__default.div.withConfig({
  displayName: "Border__AlertBorder",
  componentId: "db79rb-0"
})(["font-weight:200;border-width:", ";border-style:solid;width:auto;font-size:14px;line-height:1.5em;letter-spacing:0.02em;margin:", ";animation:", " 0.2s ease;transition:opacity 0.2s ease;background:", ";border-color:", ";color:", ";opacity:", ";"], themeGet('thicknesses.normal'), userSpacing, fadeIn, function (_ref) {
  var theme = _ref.theme,
      type = _ref.type;

  switch (type) {
    case 'success':
      return themeGet('colors.positive.light');

    case 'error':
      return themeGet('colors.negative.light');

    default:
      return themeGet('colors.primary.light');
  }
}, function (_ref2) {
  var theme = _ref2.theme,
      type = _ref2.type;

  switch (type) {
    case 'success':
      return themeGet('colors.positive.border');

    case 'error':
      return themeGet('colors.negative.border');

    default:
      return themeGet('colors.primary.border');
  }
}, function (_ref3) {
  var theme = _ref3.theme,
      type = _ref3.type;

  switch (type) {
    case 'success':
      return themeGet('colors.positive.dark');

    case 'error':
      return themeGet('colors.negative.dark');

    default:
      return themeGet('colors.primary.dark');
  }
}, function (props) {
  return props.closing ? '0' : '1';
});
AlertBorder.Small = styled__default(AlertBorder).withConfig({
  displayName: "Border__Small",
  componentId: "db79rb-1"
})(["font-size:0.8em;font-weight:300;"]);

/**
 * How we calculate external:
 * 1. If the user has explicitly provided an `newTab` prop, use that- whether it's true or false.
 * 2. Otherwise, check for a protocol on the URL.
 */

var isExternal = function isExternal(props) {
  return props.newTab !== undefined && props.newTab || /^(https?:)*\/\//.test(props.to);
};

var processOnClick = function processOnClick(props) {
  return function (event) {
    // if link is disabled, prevent any effects
    if (props.disabled) {
      event.preventDefault();
      return;
    }

    if (props.onClick) {
      // if user is using the link only for styling (not navigation),
      // prevent navigation effect.
      if (props.to === '#') {
        event.preventDefault();
      }

      props.onClick(event);
    }
  };
};
/**
 * A HOC that provides a bit more intelligence / intuitive
 * function to the basic styled link
 */


var linkExtensions = (function (WrappedLink) {
  return function (props) {
    return React__default.createElement(WrappedLink, _extends_1({}, props, isExternal(props) ? {
      newTab: true,
      target: '_blank',
      rel: 'noopener'
    } : {
      newTab: false
    }, {
      onClick: processOnClick(props)
    }), props.children);
  };
});

var DomSafeLink = (function (_ref) {
  var children = _ref.children,
      to = _ref.to,
      newTab = _ref.newTab,
      appearFocused = _ref.appearFocused,
      icon = _ref.icon,
      rest = objectWithoutProperties(_ref, ["children", "to", "newTab", "appearFocused", "icon"]);

  return React__default.createElement("a", _extends_1({}, rest, {
    href: to
  }), children);
});

var focusAfterStyles = styled.css(["height:calc(100% + 0.2em);width:calc(100% + 0.6em);left:-0.3em;opacity:0.125;transition:height 0.15s ease,width 0.15s ease,left 0.15s ease,opacity 0s ease;"]);
var focusBeforeStyles = styled.css(["right:-1.5em;opacity:1;transition:right 0.3s ease,opacity 0.2s ease 0.1s;"]);
var newTabIconStyles = styled.css(["&::before{content:\"", "\";font-family:", ";opacity:0;background:transparent;position:absolute;right:0;z-index:1;transition:right 0.3s ease,opacity 0.2s ease;", "}&:focus::before,&:hover::before{", "}"], icons('openInWindow'), themeGet('fonts.icon'), function (_ref) {
  var appearFocused = _ref.appearFocused;
  return appearFocused ? focusBeforeStyles : '';
}, focusBeforeStyles);
var iconStyles = styled.css(["&::before{font-family:", ";content:", ";font-weight:normal;margin-right:", ";}"], themeGet('fonts.icon'), function (_ref2) {
  var icon = _ref2.icon;
  return !!icon ? "\"".concat(icons(icon), "\"") : '';
}, function (_ref3) {
  var icon = _ref3.icon,
      children = _ref3.children;
  return !!icon && !!children ? '0.5em' : '0';
});
var color = themeGet('colors.primary.alternate');
var TextLink = styled__default(DomSafeLink).withConfig({
  displayName: "TextLink",
  componentId: "sc-1wpmflc-0"
})(["color:", ";font-family:", ";text-decoration:none;cursor:pointer;transition:all 0.2s ease;white-space:nowrap;position:relative;height:auto;margin:auto;text-transform:", ";font-weight:", ";&:focus{outline:none;}&:active{color:", ";}&::after{content:'';background:", ";border-radius:2em;height:1px;width:100%;position:absolute;bottom:-0.1em;left:0;transition:height 0.15s ease,width 0.15s ease,left 0.15s ease,opacity 0.25s ease;", ";}&:hover::after,&:focus::after{", ";}", ";", ";", ";"], color, themeGet('fonts.brand'), function (_ref4) {
  var icon = _ref4.icon;
  return icon ? 'uppercase' : 'none';
}, function (_ref5) {
  var icon = _ref5.icon;
  return icon ? '700' : 'initial';
}, themeGet('colors.primary.default'), color, function (_ref6) {
  var appearFocused = _ref6.appearFocused,
      icon = _ref6.icon;
  return appearFocused ? focusAfterStyles : icon ? 'opacity: 0;' : '';
}, focusAfterStyles, function (_ref7) {
  var newTab = _ref7.newTab,
      icon = _ref7.icon;
  return !icon && newTab ? newTabIconStyles : '';
}, function (_ref8) {
  var icon = _ref8.icon;
  return icon ? iconStyles : '';
}, function (_ref9) {
  var disabled = _ref9.disabled;
  return disabled && styled.css(["color:", " !important;pointer-events:none;"], themeGet('colors.text.disabled'));
});
TextLink.Negative = styled__default(TextLink).withConfig({
  displayName: "TextLink__Negative",
  componentId: "sc-1wpmflc-1"
})(["color:", ";&:active{color:", ";}&::after{background:", ";}"], themeGet('colors.negative.default'), themeGet('colors.negative.dark'), themeGet('colors.negative.default'));
TextLink.Positive = styled__default(TextLink).withConfig({
  displayName: "TextLink__Positive",
  componentId: "sc-1wpmflc-2"
})(["color:", ";&:active{color:", ";}&::after{background:", ";}"], themeGet('colors.positive.default'), themeGet('colors.positive.dark'), themeGet('colors.positive.default'));
TextLink.Dark = styled__default(TextLink).withConfig({
  displayName: "TextLink__Dark",
  componentId: "sc-1wpmflc-3"
})(["color:", ";&:active{color:", ";}&::after{background:", ";}"], themeGet('colors.primary.dark'), themeGet('colors.primary.dark'), themeGet('colors.primary.dark'));
TextLink.Inverted = styled__default(TextLink).withConfig({
  displayName: "TextLink__Inverted",
  componentId: "sc-1wpmflc-4"
})(["color:", ";&:active{color:", ";}&::after{background:", ";}"], themeGet('colors.text.inverted'), themeGet('colors.text.inverted'), themeGet('colors.text.inverted'));

var TransparentLink = styled__default(DomSafeLink).withConfig({
  displayName: "TransparentLink",
  componentId: "ugoumk-0"
})(["text-decoration:none;color:inherit;cursor:pointer;"]);



var styles$8 = /*#__PURE__*/Object.freeze({
  NativeALinkImplementation: DomSafeLink,
  TextLink: TextLink,
  TransparentLink: TransparentLink
});

var Link = linkExtensions(TextLink);
Link.styles = styles$8;
Link.Positive = linkExtensions(TextLink.Positive);
Link.Negative = linkExtensions(TextLink.Negative);
Link.Dark = linkExtensions(TextLink.Dark);
Link.Inverted = linkExtensions(TextLink.Inverted);
Link.Wrap = linkExtensions(TransparentLink);
Link.propTypes = {
  /**
   * The URL to route to. Maybe external or internal. Different props
   * will be passed to the underlying element based on external or internal
   * URLs; all external URLs will open in a new tab and display a special
   * effect.
   */
  to: propTypes.string,

  /**
   * Programatically control whether the link appears to be in the focused
   * state.
   */
  appearFocused: propTypes.bool,

  /**
   * Content (text) to render within the link.
   */
  children: propTypes.node,

  /**
   * Forces the link to open in a new tab
   */
  newTab: propTypes.bool,

  /**
   * Adds an icon to the link and turns it into a "combo" link, which
   * uses uppercase styling
   */
  icon: propTypes.string,

  /**
   * If true, this link will be rendered differently and non-interactive
   */
  disabled: propTypes.bool
};
Link.Positive.propTypes = Link.Negative.propTypes = Link.Dark.propTypes = Link.Inverted.propTypes = Link.propTypes;
Link.defaultProps = Link.Positive.defaultProps = Link.Negative.defaultProps = Link.Dark.defaultProps = Link.Inverted.defaultProps = {
  to: '#',
  appearFocused: false,
  newTab: undefined,
  icon: null
};
Link.Wrap.propTypes = {
  /**
   * The URL to route to.
   */
  to: propTypes.string,

  /**
   * Content of any type to render within the link
   */
  children: propTypes.node,

  /**
   * Forces the link to open in a new tab
   */
  newTab: propTypes.bool,

  /**
   * If true, this link will not be interactive
   */
  disabled: propTypes.bool
};
Link.Wrap.defaultProps = {
  to: '#',
  newTab: undefined
};

var AlertContent = styled__default.div.withConfig({
  displayName: "Content__AlertContent",
  componentId: "xkk28g-0"
})(["padding:", " ", ";position:relative;display:grid;grid-template-columns:auto 1fr auto;grid-gap:", ";min-height:53px;border-color:inherit;"], themeGet('spacing.small'), themeGet('spacing.medium'), themeGet('spacing.small'));
AlertContent.Small = styled__default(AlertContent).withConfig({
  displayName: "Content__Small",
  componentId: "xkk28g-1"
})(["padding:5px;min-height:30px;"]);

var CloseButton = styled__default(Link).withConfig({
  displayName: "CloseButton",
  componentId: "sc-60korq-0"
})(["color:inherit;", " > &,", " > &{margin-top:6px;margin-bottom:auto;}"], AlertContent, AlertContent.Small);
CloseButton.Negative = styled__default(Link.Negative).withConfig({
  displayName: "CloseButton__Negative",
  componentId: "sc-60korq-1"
})(["color:inherit;", " > &,", " > &{margin-top:6px;margin-bottom:auto;}"], AlertContent, AlertContent.Small);
CloseButton.Positive = styled__default(Link.Positive).withConfig({
  displayName: "CloseButton__Positive",
  componentId: "sc-60korq-2"
})(["color:inherit;", " > &,", " > &{margin-top:6px;margin-bottom:auto;}"], AlertContent, AlertContent.Small);

var expandingBottomMargin = styled.keyframes(["from{margin-bottom:0;}to{margin-bottom:", ";}"], themeGet('spacing.medium'));
var AlertGroup = styled__default.div.withConfig({
  displayName: "Group__AlertGroup",
  componentId: "xdw0is-0"
})(["display:flex;flex-direction:column;align-content:stretch;& > ", ",& > ", "{margin-left:0;margin-right:0;margin-bottom:", ";animation:", " 0.2s ease;}"], AlertBorder, AlertBorder.Small, themeGet('spacing.medium'), expandingBottomMargin);
AlertGroup.Global = styled__default(AlertGroup).withConfig({
  displayName: "Group__Global",
  componentId: "xdw0is-1"
})(["position:fixed;top:0;left:", ";right:", ";padding-top:", ";align-content:center;pointer-events:none;z-index:5000;& > ", ",& > ", "{pointer-events:initial;box-shadow:", ";margin-left:auto;margin-right:auto;}"], themeGet('spacing.large'), themeGet('spacing.large'), themeGet('spacing.large'), AlertBorder, AlertBorder.Small, themeGet('shadows.short'));

var SIZE = '31px';
var SMALL_SIZE = '18px';

var getAlertIcon = function getAlertIcon(size) {
  return styled__default.i.withConfig({
    displayName: "Icon",
    componentId: "cjo7ko-0"
  })(["width:", ";height:", ";display:inline-block;border-color:inherit;&::before{content:", ";box-sizing:border-box;border-width:", ";border-style:solid;border-color:inherit;background:", ";width:", ";height:", ";display:inline-block;line-height:", ";font-family:", ";font-weight:", ";border-color:", ";text-align:center;border-radius:100%;font-size:22px;position:absolute;font-style:normal;}"], size, size, function (_ref) {
    var type = _ref.type;

    switch (type) {
      case 'success':
        return "\"".concat(icons('checkmark'), "\"");

      case 'error':
        return '"!"';

      default:
        return '"i"';
    }
  }, themeGet('thicknesses.normal'), themeGet('colors.background.default'), size, size, size, function (props) {
    switch (props.type) {
      case 'success':
        return themeGet('fonts.icon');

      case 'error':
      default:
        return themeGet('fonts.brand');
    }
  }, function (props) {
    switch (props.type) {
      case 'success':
        return 'normal';

      default:
        return 500;
    }
  }, function (_ref2) {
    var theme = _ref2.theme,
        type = _ref2.type;

    switch (type) {
      case 'success':
        return themeGet('colors.positive.border');

      case 'error':
        return themeGet('colors.negative.border');

      default:
        return themeGet('colors.primary.border');
    }
  });
};

var AlertIcon = getAlertIcon(SIZE);
AlertIcon.Small = styled__default(getAlertIcon(SMALL_SIZE)).withConfig({
  displayName: "Icon__Small",
  componentId: "cjo7ko-1"
})(["&::before{font-size:14px;}", " > &{margin:0 5px auto 0;}"], AlertContent.Small);

var Text = styled__default.p.withConfig({
  displayName: "Text",
  componentId: "ju83by-0"
})(["padding:0;display:inline-block;", " > &,", " > &{margin:auto 0;}"], AlertContent, AlertContent.Small);



var styles$9 = /*#__PURE__*/Object.freeze({
  Border: AlertBorder,
  CloseButton: CloseButton,
  Content: AlertContent,
  Group: AlertGroup,
  Icon: AlertIcon,
  Text: Text
});

/**
 * Alerts are used to present messages to the user. Every alert is an interruption, so
 * you should use alerts only when they provide real value!
 */

var Alert =
/*#__PURE__*/
function (_React$PureComponent) {
  inherits(Alert, _React$PureComponent);

  function Alert() {
    var _getPrototypeOf2;

    var _this;

    classCallCheck(this, Alert);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Alert)).call.apply(_getPrototypeOf2, [this].concat(args)));

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "closeTimeoutRef", null);

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "closingTimeoutRef", null);

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "state", {
      closing: false
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "getCloseButtonType", function () {
      var _this$props = _this.props,
          CloseButton$$1 = _this$props.CloseButton,
          type = _this$props.type;

      switch (type) {
        case 'error':
          return CloseButton$$1.Negative || CloseButton$$1;

        case 'success':
          return CloseButton$$1.Positive || CloseButton$$1;

        default:
          return CloseButton$$1;
      }
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "startClose", function () {
      _this.setState({
        closing: true
      });

      _this.closingTimeoutRef = setTimeout(_this.completeClose, 200);
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "completeClose", function () {
      _this.props.onClose();
    });

    return _this;
  }

  createClass(Alert, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props2 = this.props,
          closeTimeout = _this$props2.closeTimeout,
          onClose = _this$props2.onClose;

      if (closeTimeout && onClose) {
        this.closeTimeoutRef = setTimeout(this.startClose, closeTimeout);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.closeTimeoutRef) {
        clearTimeout(this.closeTimeoutRef);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          Border = _this$props3.Border,
          Text$$1 = _this$props3.Text,
          Icon = _this$props3.Icon,
          Content = _this$props3.Content,
          type = _this$props3.type,
          textOnly = _this$props3.textOnly,
          children = _this$props3.children,
          onClose = _this$props3.onClose,
          rest = objectWithoutProperties(_this$props3, ["Border", "Text", "Icon", "Content", "type", "textOnly", "children", "onClose"]);

      var closing = this.state.closing;
      var CloseButton$$1 = this.getCloseButtonType();
      return React__default.createElement(Border, _extends_1({
        type: type,
        closing: closing
      }, rest), React__default.createElement(reactCollapse.UnmountClosed, {
        isOpened: !closing,
        forceInitialAnimation: true,
        springConfig: {
          stiffness: 300,
          damping: 20
        }
      }, React__default.createElement(Content, null, !textOnly && React__default.createElement(Icon, {
        type: type
      }), React__default.createElement(Text$$1, null, children), onClose && React__default.createElement(CloseButton$$1, {
        icon: "delete",
        onClick: this.startClose
      }))));
    }
  }]);

  return Alert;
}(React__default.PureComponent);

defineProperty(Alert, "propTypes", {
  /**
   * An alert type
   */
  type: propTypes.oneOf(['info', 'success', 'error']),

  /**
   * Specify a CSS value or an object { top, right, bottom, left } or { vertical, horizontal } to
   * control the spacing around the heading. Defaults to a large space below the element.
   */
  spacing: propTypes.oneOfType([propTypes.string, propTypes.object]),

  /**
   * Whether to render only text (true) or an icon alongside text (false).
   */
  textOnly: propTypes.bool,

  /**
   * A callback for when this alert is closed (dismissed). Providing this prop will
   * automatically create a close button for the user.
   */
  onClose: propTypes.func,

  /**
   * A timeout for closing the alert (ms). Only works if `onClose` is also provided. Will
   * call `onClose` after time specified.
   */
  closeTimeout: propTypes.number,

  /**
   * Additional class name to pass to the alert.
   */
  className: propTypes.string,

  /**
   * Additional id to pass to the alert.
   */
  id: propTypes.string,

  /**
   * A component to render the border container
   */
  Border: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A component to render the text inside
   */
  Text: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A component to render the icon
   */
  Icon: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A containing element around the alert, used for expanding style calc.
   */
  Content: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * The link component to use when rendering a close button
   */
  CloseButton: propTypes.oneOfType([propTypes.func, propTypes.object])
});

defineProperty(Alert, "defaultProps", {
  type: 'info',
  textOnly: false,
  className: null,
  id: null,
  spacing: '0',
  Border: AlertBorder,
  Content: AlertContent,
  Text: Text,
  Icon: AlertIcon,
  CloseButton: CloseButton
});

defineProperty(Alert, "styles", styles$9);

defineProperty(Alert, "Small", withProps({
  Border: AlertBorder.Small,
  Icon: AlertIcon.Small,
  Content: AlertContent.Small
})(Alert));

defineProperty(Alert, "Group", AlertGroup);

var StyleRoot = styled__default.div.withConfig({
  displayName: "StyleRoot",
  componentId: "sc-1wnuz8l-0"
})(["font-family:", ";background:", ";color:", ";font-size:", ";line-height:1.5;letter-spacing:0.28px;width:100%;height:100%;"], themeGet('fonts.default'), themeGet('colors.background.default'), themeGet('colors.text.default'), themeGet('fontSizes.default'));

var withDragDropContext = reactDnd.DragDropContext(HTML5Backend__default);

var pickupAnimation = styled.keyframes(["from{transform:translate(-50%,-50%) rotate(0deg);}to{transform:translate(-50%,-50%) rotate(4deg);}"]);
var DragItemPreviewContainer = styled__default.div.withConfig({
  displayName: "DragItemPreviewContainer",
  componentId: "ptsvln-0"
})(["animation:", " 0.3s;animation-fill-mode:forwards;will-change:transform;display:block;pointer-events:none;box-shadow:", ";& > *{width:100%;height:100%;}"], pickupAnimation, themeGet('shadows.long'));

var Overlay$1 = styled__default.div.withConfig({
  displayName: "Overlay",
  componentId: "sc-1fm8ehf-0"
})(["position:fixed;pointer-events:none;z-index:100000;left:0;top:0;width:100%;height:100%;"]);



var styles$a = /*#__PURE__*/Object.freeze({
  DragItemPreviewContainer: DragItemPreviewContainer,
  Overlay: Overlay$1
});

var ChildContainer = styled__default.div.withConfig({
  displayName: "ChildContainer",
  componentId: "wlj6y0-0"
})(["opacity:", ";pointer-events:", ";"], function (_ref) {
  var isDragging = _ref.isDragging;
  return isDragging ? '0' : '1';
}, function (_ref2) {
  var isDragging = _ref2.isDragging;
  return isDragging ? 'none' : 'inherit';
});

var Container$4 = styled__default.div.withConfig({
  displayName: "Container",
  componentId: "sc-1tp2htr-0"
})(["position:relative;", " background-color:", ";", ""], ''
/* padding: 20px;
border: 1px solid
${({ isDragging }) =>
isDragging
 ? get('colors.background.disabled')
 : get('colors.border.medium')}; */
, function (_ref) {
  var isDragging = _ref.isDragging;
  return isDragging ? themeGet('colors.background.disabled') : themeGet('colors.background.default');
}, function (_ref2) {
  var isDragging = _ref2.isDragging;
  return isDragging && styled.css(["cursor:move;pointer-events:all;"]);
});

var IconGroup = styled__default.div.withConfig({
  displayName: "IconGroup",
  componentId: "pb99cw-0"
})(["position:absolute;display:flex;flex-direction:row;top:50%;transform:translateY(-50%);right:15px;color:", ";font-size:18px;opacity:", ";& > *{margin-right:8px;&:last-child{margin-right:0px;}}"], themeGet('colors.primary.default'), function (_ref) {
  var isDragging = _ref.isDragging;
  return isDragging ? 0 : 1;
});



var styles$b = /*#__PURE__*/Object.freeze({
  ChildContainer: ChildContainer,
  Container: Container$4,
  IconGroup: IconGroup
});

var DragContext = React__default.createContext({
  isDragging: false,
  wrapDragHandle: lodash_noop
});

var DragHandle = styled__default(Icon).withConfig({
  displayName: "DragContainer__DragHandle",
  componentId: "g229c6-0"
})(["&:hover:not(:active){cursor:pointer;}"]);
var DefaultControls = React__default.createElement(React__default.Fragment, null, React__default.createElement(Icon, {
  name: "settings"
}), React__default.createElement(Icon, {
  name: "delete3"
}));
/**
 * This is a prebuilt example container that can be used with [DragList](/#!/DragList)
 * or [DragGroup](/#!/DragGroup). It features a drag handle and a section that can have
 * controls for the item - just set `controls` to a react node and attach handlers for
 * the click events as needed.
 */

var DragContainer =
/*#__PURE__*/
function (_React$PureComponent) {
  inherits(DragContainer, _React$PureComponent);

  function DragContainer() {
    var _getPrototypeOf2;

    var _this;

    classCallCheck(this, DragContainer);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(DragContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "renderContents", function (_ref) {
      var isDragging = _ref.isDragging,
          wrapDragHandle = _ref.wrapDragHandle;

      var _this$props = _this.props,
          canDrag = _this$props.canDrag,
          controls = _this$props.controls,
          children = _this$props.children,
          Container = _this$props.Container,
          ChildContainer$$1 = _this$props.ChildContainer,
          IconGroup$$1 = _this$props.IconGroup,
          rest = objectWithoutProperties(_this$props, ["canDrag", "controls", "children", "Container", "ChildContainer", "IconGroup"]);

      return React__default.createElement(Container, _extends_1({
        isDragging: isDragging
      }, rest), React__default.createElement(ChildContainer$$1, {
        isDragging: isDragging
      }, children), React__default.createElement(IconGroup$$1, {
        isDragging: isDragging
      }, controls, canDrag && wrapDragHandle && wrapDragHandle(React__default.createElement(DragHandle, {
        name: "moveGrabber"
      }))));
    });

    return _this;
  }

  createClass(DragContainer, [{
    key: "render",
    value: function render() {
      return React__default.createElement(DragContext.Consumer, null, this.renderContents);
    }
  }]);

  return DragContainer;
}(React__default.PureComponent);

defineProperty(DragContainer, "Context", DragContext);

defineProperty(DragContainer, "propTypes", {
  /**
   * Should dragging be enabled or not?
   */
  canDrag: propTypes.bool,

  /**
   * Pass in custom controls for the list item.
   */
  controls: propTypes.node,

  /**
   * Content to render inside the container itself
   */
  children: propTypes.node.isRequired,

  /**
   * Replaces the component used to render the outer container
   */
  Container: propTypes.oneOfType([propTypes.object, propTypes.func]),

  /**
   * Replaces the component used to render the child container
   */
  ChildContainer: propTypes.oneOfType([propTypes.object, propTypes.func]),

  /**
   * Replaces the component which renders the controls icons
   */
  IconGroup: propTypes.oneOfType([propTypes.object, propTypes.func])
});

defineProperty(DragContainer, "defaultProps", {
  canDrag: true,
  controls: DefaultControls,
  Container: Container$4,
  ChildContainer: ChildContainer,
  IconGroup: IconGroup
});

defineProperty(DragContainer, "styles", styles$b);

/**
 * lodash 3.0.0 (Custom Build) <https://lodash.com/>
 * Build: `lodash modern modularize exports="npm" -o ./`
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.7.0 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */

/**
 * This method returns the first argument provided to it.
 *
 * @static
 * @memberOf _
 * @category Utility
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'user': 'fred' };
 * _.identity(object) === object;
 * // => true
 */
function identity$2(value) {
  return value;
}

var lodash_identity = identity$2;

/**
 * Renders a generic layer for drawing dragged items from draggable
 * components.
 */

var DragLayer =
/*#__PURE__*/
function (_React$Component) {
  inherits(DragLayer, _React$Component);

  function DragLayer() {
    var _getPrototypeOf2;

    var _this;

    classCallCheck(this, DragLayer);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(DragLayer)).call.apply(_getPrototypeOf2, [this].concat(args)));

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "renderPreviewContent", function () {
      var item = _this.props.item;
      return item.children && React__default.Children.map(item.children, function (child) {
        return child ? React__default.cloneElement(child, {
          wrapDragHandle: lodash_identity
        }) : null;
      });
    });

    return _this;
  }

  createClass(DragLayer, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          item = _this$props.item,
          clientOffset = _this$props.clientOffset,
          Overlay = _this$props.Overlay,
          PreviewContainer = _this$props.PreviewContainer,
          Cutout = _this$props.Cutout,
          rest = objectWithoutProperties(_this$props, ["item", "clientOffset", "Overlay", "PreviewContainer", "Cutout"]);

      if (!item || !clientOffset) {
        return React__default.createElement(Overlay, rest);
      }

      var previewPositionStyles = {
        transform: "translate(".concat(clientOffset.x, "px, ").concat(clientOffset.y, "px)"),
        width: item.dimensions ? item.dimensions.width + 'px' : '0px',
        height: item.dimensions ? item.dimensions.height + 'px' : '0px'
      };
      return React__default.createElement(DragContext.Provider, {
        value: {
          wrapDragHandle: lodash_identity
        }
      }, React__default.createElement(Overlay, rest, React__default.createElement("div", {
        style: previewPositionStyles
      }, React__default.createElement(PreviewContainer, null, this.renderPreviewContent()))));
    }
  }]);

  return DragLayer;
}(React__default.Component);

defineProperty(DragLayer, "propTypes", {
  /**
   * Provided by DragGroupItem via drag context.
   * Contains details needed to render an item preview
   */
  item: propTypes.shape({
    children: propTypes.node,
    dimensions: propTypes.shape({
      width: propTypes.number,
      height: propTypes.number
    })
  }),

  /**
   * Provided by
   * Offset values for the position of the dragged preview
   * item
   */
  clientOffset: propTypes.object,

  /**
   * Override the presentational component which renders the full-screen
   * overlay
   */
  Overlay: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * Override the presentational component which positions and sizes
   * the preview element
   */
  PreviewContainer: propTypes.oneOfType([propTypes.func, propTypes.object])
});

defineProperty(DragLayer, "defaultProps", {
  item: null,
  clientOffset: null,
  Overlay: Overlay$1,
  PreviewContainer: DragItemPreviewContainer
});

defineProperty(DragLayer, "styles", styles$a);

var collect = function collect(monitor) {
  return {
    item: monitor.getItem(),
    clientOffset: monitor.getClientOffset()
  };
};

var DefaultDragLayer = reactDnd.DragLayer(collect)(DragLayer);

function _taggedTemplateLiteral(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }

  return Object.freeze(Object.defineProperties(strings, {
    raw: {
      value: Object.freeze(raw)
    }
  }));
}

var taggedTemplateLiteral = _taggedTemplateLiteral;

var overridesCss = styled.css(["font-family:", ";color:", ";box-sizing:border-box;.DateRangePicker{display:block;box-sizing:border-box;}.DayPicker_transitionContainer{width:inherit !important;}.SingleDatePicker_picker,.DateRangePicker_picker{overflow:hidden;}.DateRangePickerInput,.SingleDatePickerInput{width:100%;display:flex;flex-direction:row;border:none;& > .DateInput{flex:1;}& > .DateRangePickerInput_arrow{margin:auto;}}.DateRangePickerInput__disabled,.SingleDatePickerInput__disabled{background:transparent;& > .DateInput{background:", ";border-color:", ";}}.DateRangePicker_picker__openDown,.SingleDatePicker_picker__openDown{top:49px;}.DateRangePicker_picker__openUp,.SingleDatePicker_picker__openUp{bottom:49px;}.DateInput{width:auto;transition:color 200ms;&::after{position:absolute;right:var(--spacing-medium);top:50%;content:\"", "\";font-family:var(--fonts-icon);font-size:1.5em;transform:translateY(-50%);}.DateInput_fang{display:none;}}&.focused .DateInput{color:var(--colors-primary-default);}&.focused-startDate .DateInput:first-child{color:var(--colors-primary-default);}&.focused-endDate .DateInput:last-child{color:var(--colors-primary-default);}.DateInput_input{z-index:100;transition:all 200ms;font-family:var(--fonts-brand);font-size:14px;line-height:1.5;padding:calc(var(--spacing-medium) - 1px) var(--spacing-medium);border:", " solid ", ";}.DateInput_input__focused{box-shadow:inset 0 -5px 0 ", ";border-color:var(--colors-border-medium);}.DateInput_displayText{font-family:", ";font-size:14px;font-weight:normal;color:", ";position:relative;padding-right:2.5em;z-index:0;}.DateInput_displayText__focused{background:transparent;&::after{color:", ";}}.DateInput_input__disabled{font-style:normal;color:var(--colors-text-disabled);}.DayPicker{box-shadow:none;border-width:", ";border-style:solid;border-color:", ";border-radius:0;width:auto !important;& > div > div{width:auto !important;}}.CalendarMonth_table{margin-top:var(--spacing-medium);}.CalendarMonth{background:", ";padding:0 ", " 0 0;color:", ";}.CalendarMonth_caption{font-size:14px;color:", ";padding:var(--spacing-medium);}.CalendarMonthGrid__horizontal{left:0;}.CalendarDay__default{border-color:", ";background:", ";color:", ";&:hover{background:", ";color:", ";}}.CalendarDay__selected_span{background:", ";&:hover{background:var(--colors-primary-default);color:var(--colors-text-inverted);}}.CalendarDay__selected,.CalendarDay__selected:active,.CalendarDay__selected:hover{background:", ";color:", ";}.CalendarDay__blocked_out_of_range{color:", ";background:", ";cursor:normal;&:hover{color:", ";background:", ";border-color:", ";}}.CalendarDay_button{cursor:pointer;}.DayPickerNavigation{display:flex;justify-content:space-between;padding:var(--spacing-medium);position:absolute;width:100%;}.DayPickerNavigation_button{background:transparent;border:none;color:", ";font-size:1em;}.DayPicker_weekHeaders__horizontal{margin:0;}.DayPicker_weekHeader{padding:0;top:45px;white-space:nowrap;color:var(--colors-text-default);&:not(:first-of-type){transform:translateX(4px);}}.DayPicker_weekHeader_li > small{font-weight:bold;}"], themeGet('fonts.brand'), themeGet('colors.text.default'), themeGet('colors.background.disabled'), themeGet('colors.border.medium'), icons('calendar'), themeGet('thicknesses.wide'), themeGet('colors.border.light'), themeGet('colors.primary.light'), themeGet('fonts.brand'), themeGet('colors.text.default'), themeGet('colors.primary.default'), themeGet('thicknesses.wide'), themeGet('colors.border.medium'), themeGet('colors.background.default'), themeGet('spacing.large'), themeGet('colors.text.default'), themeGet('colors.text.default'), themeGet('colors.border.medium'), themeGet('colors.background.default'), themeGet('colors.text.default'), themeGet('colors.primary.default'), themeGet('colors.text.inverted'), themeGet('colors.primary.light'), themeGet('colors.primary.default'), themeGet('colors.text.inverted'), themeGet('colors.text.disabled'), themeGet('colors.background.disabled'), themeGet('colors.text.disabled'), themeGet('colors.background.disabled'), themeGet('colors.border.medium'), themeGet('colors.text.default'));

var datePickerCss = styled.css([".PresetDateRangePicker_panel{padding:0 22px 11px;}.PresetDateRangePicker_button{position:relative;height:100%;text-align:center;background:0 0;border:2px solid #00a699;color:#00a699;padding:4px 12px;margin-right:8px;font:inherit;font-weight:700;line-height:normal;overflow:visible;-moz-box-sizing:border-box;box-sizing:border-box;cursor:pointer;}.PresetDateRangePicker_button:active{outline:0;}.PresetDateRangePicker_button__selected{color:#fff;background:#00a699;}.SingleDatePickerInput{display:inline-block;background-color:#fff;}.SingleDatePickerInput__withBorder{border-radius:2px;border:1px solid #dbdbdb;}.SingleDatePickerInput__rtl{direction:rtl;}.SingleDatePickerInput__disabled{background-color:#f2f2f2;}.SingleDatePickerInput__block{display:block;}.SingleDatePickerInput__showClearDate{padding-right:30px;}.SingleDatePickerInput_clearDate{background:0 0;border:0;color:inherit;font:inherit;line-height:normal;overflow:visible;cursor:pointer;padding:10px;margin:0 10px 0 5px;position:absolute;right:0;top:50%;-webkit-transform:translateY(-50%);-ms-transform:translateY(-50%);transform:translateY(-50%);}.SingleDatePickerInput_clearDate__default:focus,.SingleDatePickerInput_clearDate__default:hover{background:#dbdbdb;border-radius:50%;}.SingleDatePickerInput_clearDate__small{padding:6px;}.SingleDatePickerInput_clearDate__hide{visibility:hidden;}.SingleDatePickerInput_clearDate_svg{fill:#82888a;height:12px;width:15px;vertical-align:middle;}.SingleDatePickerInput_clearDate_svg__small{height:9px;}.SingleDatePickerInput_calendarIcon{background:0 0;border:0;color:inherit;font:inherit;line-height:normal;overflow:visible;cursor:pointer;display:inline-block;vertical-align:middle;padding:10px;margin:0 5px 0 10px;}.SingleDatePickerInput_calendarIcon_svg{fill:#82888a;height:15px;width:14px;vertical-align:middle;}.SingleDatePicker{position:relative;display:inline-block;}.SingleDatePicker__block{display:block;}.SingleDatePicker_picker{z-index:1;background-color:#fff;position:absolute;}.SingleDatePicker_picker__rtl{direction:rtl;}.SingleDatePicker_picker__directionLeft{left:0;}.SingleDatePicker_picker__directionRight{right:0;}.SingleDatePicker_picker__portal{background-color:rgba(0,0,0,0.3);position:fixed;top:0;left:0;height:100%;width:100%;}.SingleDatePicker_picker__fullScreenPortal{background-color:#fff;}.SingleDatePicker_closeButton{background:0 0;border:0;color:inherit;font:inherit;line-height:normal;overflow:visible;cursor:pointer;position:absolute;top:0;right:0;padding:15px;z-index:2;}.SingleDatePicker_closeButton:focus,.SingleDatePicker_closeButton:hover{color:darken(#cacccd,10%);text-decoration:none;}.SingleDatePicker_closeButton_svg{height:15px;width:15px;fill:#cacccd;}.DayPickerKeyboardShortcuts_buttonReset{background:0 0;border:0;border-radius:0;color:inherit;font:inherit;line-height:normal;overflow:visible;padding:0;cursor:pointer;font-size:14px;}.DayPickerKeyboardShortcuts_buttonReset:active{outline:0;}.DayPickerKeyboardShortcuts_show{width:22px;position:absolute;z-index:2;}.DayPickerKeyboardShortcuts_show__bottomRight{border-top:26px solid transparent;border-right:33px solid #00a699;bottom:0;right:0;}.DayPickerKeyboardShortcuts_show__bottomRight:hover{border-right:33px solid #008489;}.DayPickerKeyboardShortcuts_show__topRight{border-bottom:26px solid transparent;border-right:33px solid #00a699;top:0;right:0;}.DayPickerKeyboardShortcuts_show__topRight:hover{border-right:33px solid #008489;}.DayPickerKeyboardShortcuts_show__topLeft{border-bottom:26px solid transparent;border-left:33px solid #00a699;top:0;left:0;}.DayPickerKeyboardShortcuts_show__topLeft:hover{border-left:33px solid #008489;}.DayPickerKeyboardShortcuts_showSpan{color:#fff;position:absolute;}.DayPickerKeyboardShortcuts_showSpan__bottomRight{bottom:0;right:-28px;}.DayPickerKeyboardShortcuts_showSpan__topRight{top:1px;right:-28px;}.DayPickerKeyboardShortcuts_showSpan__topLeft{top:1px;left:-28px;}.DayPickerKeyboardShortcuts_panel{overflow:auto;background:#fff;border:1px solid #dbdbdb;border-radius:2px;position:absolute;top:0;bottom:0;right:0;left:0;z-index:2;padding:22px;margin:33px;}.DayPickerKeyboardShortcuts_title{font-size:16px;font-weight:700;margin:0;}.DayPickerKeyboardShortcuts_list{list-style:none;padding:0;font-size:14px;}.DayPickerKeyboardShortcuts_close{position:absolute;right:22px;top:22px;z-index:2;}.DayPickerKeyboardShortcuts_close:active{outline:0;}.DayPickerKeyboardShortcuts_closeSvg{height:15px;width:15px;fill:#cacccd;}.DayPickerKeyboardShortcuts_closeSvg:focus,.DayPickerKeyboardShortcuts_closeSvg:hover{fill:#82888a;}.CalendarDay{-moz-box-sizing:border-box;box-sizing:border-box;cursor:pointer;font-size:14px;text-align:center;}.CalendarDay:active{outline:0;}.CalendarDay__defaultCursor{cursor:default;}.CalendarDay__default{border:1px solid #e4e7e7;color:#484848;background:#fff;}.CalendarDay__default:hover{background:#e4e7e7;border:1px double #e4e7e7;color:inherit;}.CalendarDay__hovered_offset{background:#f4f5f5;border:1px double #e4e7e7;color:inherit;}.CalendarDay__outside{border:0;background:#fff;color:#484848;}.CalendarDay__outside:hover{border:0;}.CalendarDay__blocked_minimum_nights{background:#fff;border:1px solid #eceeee;color:#cacccd;}.CalendarDay__blocked_minimum_nights:active,.CalendarDay__blocked_minimum_nights:hover{background:#fff;color:#cacccd;}.CalendarDay__highlighted_calendar{background:#ffe8bc;color:#484848;}.CalendarDay__highlighted_calendar:active,.CalendarDay__highlighted_calendar:hover{background:#ffce71;color:#484848;}.CalendarDay__selected_span{background:#66e2da;border:1px solid #33dacd;color:#fff;}.CalendarDay__selected_span:active,.CalendarDay__selected_span:hover{background:#33dacd;border:1px solid #33dacd;color:#fff;}.CalendarDay__last_in_range{border-right:#00a699;}.CalendarDay__selected,.CalendarDay__selected:active,.CalendarDay__selected:hover{background:#00a699;border:1px solid #00a699;color:#fff;}.CalendarDay__hovered_span,.CalendarDay__hovered_span:hover{background:#b2f1ec;border:1px solid #80e8e0;color:#007a87;}.CalendarDay__hovered_span:active{background:#80e8e0;border:1px solid #80e8e0;color:#007a87;}.CalendarDay__blocked_calendar,.CalendarDay__blocked_calendar:active,.CalendarDay__blocked_calendar:hover{background:#cacccd;border:1px solid #cacccd;color:#82888a;}.CalendarDay__blocked_out_of_range,.CalendarDay__blocked_out_of_range:active,.CalendarDay__blocked_out_of_range:hover{background:#fff;border:1px solid #e4e7e7;color:#cacccd;}.CalendarMonth{background:#fff;text-align:center;padding:0 13px;vertical-align:top;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}.CalendarMonth_table{border-collapse:collapse;border-spacing:0;}.CalendarMonth_verticalSpacing{border-collapse:separate;}.CalendarMonth_caption{color:#484848;font-size:18px;text-align:center;padding-top:22px;padding-bottom:37px;caption-side:initial;}.CalendarMonth_caption__verticalScrollable{padding-top:12px;padding-bottom:7px;}.CalendarMonthGrid{background:#fff;text-align:left;z-index:0;}.CalendarMonthGrid__animating{z-index:1;}.CalendarMonthGrid__horizontal{position:absolute;left:9px;}.CalendarMonthGrid__vertical{margin:0 auto;}.CalendarMonthGrid__vertical_scrollable{margin:0 auto;overflow-y:scroll;}.CalendarMonthGrid_month__horizontal{display:inline-block;vertical-align:top;min-height:100%;}.CalendarMonthGrid_month__hideForAnimation{position:absolute;z-index:-1;opacity:0;pointer-events:none;}.CalendarMonthGrid_month__hidden{visibility:hidden;}.DayPickerNavigation{position:relative;z-index:2;}.DayPickerNavigation__verticalDefault{position:absolute;width:100%;height:52px;bottom:0;left:0;}.DayPickerNavigation__verticalScrollableDefault{position:relative;}.DayPickerNavigation_button{cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;border:0;padding:0;margin:0;}.DayPickerNavigation_button__default{border:1px solid #e4e7e7;background-color:#fff;color:#757575;}.DayPickerNavigation_button__default:focus,.DayPickerNavigation_button__default:hover{border:1px solid #c4c4c4;}.DayPickerNavigation_button__default:active{background:#f2f2f2;}.DayPickerNavigation_button__horizontalDefault{position:absolute;top:18px;line-height:0.78;border-radius:3px;padding:6px 9px;}.DayPickerNavigation_leftButton__horizontalDefault{left:22px;}.DayPickerNavigation_rightButton__horizontalDefault{right:22px;}.DayPickerNavigation_button__verticalDefault{padding:5px;background:#fff;box-shadow:0 0 5px 2px rgba(0,0,0,0.1);position:relative;display:inline-block;height:100%;width:50%;}.DayPickerNavigation_nextButton__verticalDefault{border-left:0;}.DayPickerNavigation_nextButton__verticalScrollableDefault{width:100%;}.DayPickerNavigation_svg__horizontal{height:19px;width:19px;fill:#82888a;}.DayPickerNavigation_svg__vertical{height:42px;width:42px;fill:#484848;}.DayPicker{background:#fff;position:relative;text-align:left;}.DayPicker__horizontal{background:#fff;}.DayPicker__verticalScrollable{height:100%;}.DayPicker__hidden{visibility:hidden;}.DayPicker__withBorder{box-shadow:0 2px 6px rgba(0,0,0,0.05),0 0 0 1px rgba(0,0,0,0.07);border-radius:3px;}.DayPicker_portal__horizontal{box-shadow:none;position:absolute;left:50%;top:50%;}.DayPicker_portal__vertical{position:initial;}.DayPicker_focusRegion{outline:0;}.DayPicker_calendarInfo__horizontal,.DayPicker_wrapper__horizontal{display:inline-block;vertical-align:top;}.DayPicker_weekHeaders{position:relative;}.DayPicker_weekHeaders__horizontal{margin-left:9px;}.DayPicker_weekHeader{color:#757575;position:absolute;top:62px;z-index:2;padding:0 13px;text-align:left;}.DayPicker_weekHeader__vertical{left:50%;}.DayPicker_weekHeader__verticalScrollable{top:0;display:table-row;border-bottom:1px solid #dbdbdb;background:#fff;margin-left:0;left:0;width:100%;text-align:center;}.DayPicker_weekHeader_ul{list-style:none;margin:1px 0;padding-left:0;padding-right:0;font-size:14px;}.DayPicker_weekHeader_li{display:inline-block;text-align:center;}.DayPicker_transitionContainer{position:relative;overflow:hidden;border-radius:3px;}.DayPicker_transitionContainer__horizontal{-webkit-transition:height 0.2s ease-in-out;-moz-transition:height 0.2s ease-in-out;transition:height 0.2s ease-in-out;}.DayPicker_transitionContainer__vertical{width:100%;}.DayPicker_transitionContainer__verticalScrollable{padding-top:20px;height:100%;position:absolute;top:0;bottom:0;right:0;left:0;overflow-y:scroll;}.DateInput{margin:0;padding:0;background:#fff;position:relative;display:inline-block;width:130px;vertical-align:middle;}.DateInput__small{width:97px;}.DateInput__block{width:100%;}.DateInput__disabled{background:#f2f2f2;color:#dbdbdb;}.DateInput_input{font-weight:200;font-size:19px;line-height:24px;color:#484848;background-color:#fff;width:100%;padding:11px 11px 9px;border:0;border-top:0;border-right:0;border-bottom:2px solid transparent;border-left:0;border-radius:0;}.DateInput_input__small{font-size:15px;line-height:18px;letter-spacing:0.2px;padding:7px 7px 5px;}.DateInput_input__regular{font-weight:auto;}.DateInput_input__readOnly{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}.DateInput_input__focused{outline:0;background:#fff;border:0;border-top:0;border-right:0;border-bottom:2px solid #008489;border-left:0;}.DateInput_input__disabled{background:#f2f2f2;font-style:italic;}.DateInput_screenReaderMessage{border:0;clip:rect(0,0,0,0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px;}.DateInput_fang{position:absolute;width:20px;height:10px;left:22px;z-index:2;}.DateInput_fangShape{fill:#fff;}.DateInput_fangStroke{stroke:#dbdbdb;fill:transparent;}.DateRangePickerInput{background-color:#fff;display:inline-block;}.DateRangePickerInput__disabled{background:#f2f2f2;}.DateRangePickerInput__withBorder{border-radius:2px;border:1px solid #dbdbdb;}.DateRangePickerInput__rtl{direction:rtl;}.DateRangePickerInput__block{display:block;}.DateRangePickerInput__showClearDates{padding-right:30px;}.DateRangePickerInput_arrow{display:inline-block;vertical-align:middle;color:#484848;}.DateRangePickerInput_arrow_svg{vertical-align:middle;fill:#484848;height:24px;width:24px;}.DateRangePickerInput_clearDates{background:0 0;border:0;color:inherit;font:inherit;line-height:normal;overflow:visible;cursor:pointer;padding:10px;margin:0 10px 0 5px;position:absolute;right:0;top:50%;-webkit-transform:translateY(-50%);-ms-transform:translateY(-50%);transform:translateY(-50%);}.DateRangePickerInput_clearDates__small{padding:6px;}.DateRangePickerInput_clearDates_default:focus,.DateRangePickerInput_clearDates_default:hover{background:#dbdbdb;border-radius:50%;}.DateRangePickerInput_clearDates__hide{visibility:hidden;}.DateRangePickerInput_clearDates_svg{fill:#82888a;height:12px;width:15px;vertical-align:middle;}.DateRangePickerInput_clearDates_svg__small{height:9px;}.DateRangePickerInput_calendarIcon{background:0 0;border:0;color:inherit;font:inherit;line-height:normal;overflow:visible;cursor:pointer;display:inline-block;vertical-align:middle;padding:10px;margin:0 5px 0 10px;}.DateRangePickerInput_calendarIcon_svg{fill:#82888a;height:15px;width:14px;vertical-align:middle;}.DateRangePicker{position:relative;display:inline-block;}.DateRangePicker__block{display:block;}.DateRangePicker_picker{z-index:1;background-color:#fff;position:absolute;}.DateRangePicker_picker__rtl{direction:rtl;}.DateRangePicker_picker__directionLeft{left:0;}.DateRangePicker_picker__directionRight{right:0;}.DateRangePicker_picker__portal{background-color:rgba(0,0,0,0.3);position:fixed;top:0;left:0;height:100%;width:100%;}.DateRangePicker_picker__fullScreenPortal{background-color:#fff;}.DateRangePicker_closeButton{background:0 0;border:0;color:inherit;font:inherit;line-height:normal;overflow:visible;cursor:pointer;position:absolute;top:0;right:0;padding:15px;z-index:2;}.DateRangePicker_closeButton:focus,.DateRangePicker_closeButton:hover{color:darken(#cacccd,10%);text-decoration:none;}.DateRangePicker_closeButton_svg{height:15px;width:15px;fill:#cacccd;}", ";"], overridesCss);

function _templateObject() {
  var data = taggedTemplateLiteral(["\n  * {\n    box-sizing: border-box;\n  }\n\n  body, html {\n    width: 100%;\n    min-height: 100vh;\n    position: relative;\n    color: ", ";\n    font-size: ", ";\n  }\n\n  :root {\n    ", "\n  }\n\n  ", "\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}
var GlobalStyle = styled.createGlobalStyle(_templateObject(), themeGet('colors.text.default'), themeGet('fontSizes.default'), function (props) {
  return cssvars(props.theme);
}, datePickerCss);



var styles$c = /*#__PURE__*/Object.freeze({
  GlobalStyle: GlobalStyle,
  StyleRoot: StyleRoot
});

/**
 * Including this provider at the root of your app will define some global styling,
 * and set up needed contexts for interactions like drag and drop. It also allows
 * you to control the theme programmatically or apply a different theme at a
 * particular level.
 */

var BandwidthProvider =
/*#__PURE__*/
function (_React$PureComponent) {
  inherits(BandwidthProvider, _React$PureComponent);

  function BandwidthProvider() {
    classCallCheck(this, BandwidthProvider);

    return possibleConstructorReturn(this, getPrototypeOf(BandwidthProvider).apply(this, arguments));
  }

  createClass(BandwidthProvider, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          StyleRoot$$1 = _this$props.StyleRoot,
          DragLayer = _this$props.DragLayer,
          dragLayerPortal = _this$props.dragLayerPortal,
          customTheme = _this$props.customTheme,
          skipGlobalStyle = _this$props.skipGlobalStyle,
          children = _this$props.children,
          foregroundLayerPortal = _this$props.foregroundLayerPortal;
      return React__default.createElement(React__default.Fragment, null, React__default.createElement(StyleRoot$$1, {
        className: "styleroot"
      }, React__default.createElement(Foreground.Provider, {
        element: foregroundLayerPortal
      }, children), dragLayerPortal ? ReactDOM__default.createPortal(React__default.createElement(DragLayer, null), dragLayerPortal) : React__default.createElement(DragLayer, null)), skipGlobalStyle || React__default.createElement(GlobalStyle, {
        theme: customTheme
      }));
    }
  }]);

  return BandwidthProvider;
}(React__default.PureComponent);

defineProperty(BandwidthProvider, "propTypes", {
  /**
   *  A custom theme; pass one of the themes from `themes/` or pass in your own JSON!
   */
  customTheme: propTypes.object,

  /**
   * The DOM element to attach the drag layer. By default, attaches it to this component
   */
  dragLayerPortal: propTypes.object,

  /**
   * The DOM element to provide to all Foreground components to render into. Skip this
   * prop and we will generate one for you inside BandwidthProvider
   */
  foregroundLayerPortal: propTypes.any,

  /**
   * Should the global style be skipped. Defaults to false.
   */
  skipGlobalStyle: propTypes.bool,

  /**
   * Custom StyleRoot component
   */
  StyleRoot: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * Custom drag layer component
   */
  DragLayer: propTypes.func,

  /**
   * Any stuff you want to render in your app
   */
  children: propTypes.node.isRequired
});

defineProperty(BandwidthProvider, "defaultProps", {
  customTheme: irisTheme,
  dragLayerPortal: null,
  StyleRoot: StyleRoot,
  DragLayer: DefaultDragLayer,
  skipGlobalStyle: false
});

defineProperty(BandwidthProvider, "styles", styles$c);

var BandwidthProvider$1 = withDragDropContext(BandwidthProvider);

var Breadcrumb = styled__default.div.withConfig({
  displayName: "Breadcrumb",
  componentId: "gyd0pd-0"
})(["display:inline-block;margin:", ";"], userSpacing.text);
Breadcrumb.defaultProps = {
  spacing: {
    bottom: 'md',
    top: 'md'
  }
};

var dedent_1 = createCommonjsModule(function (module) {

function dedent(strings) {

  var raw = void 0;
  if (typeof strings === "string") {
    // dedent can be used as a plain function
    raw = [strings];
  } else {
    raw = strings.raw;
  }

  // first, perform interpolation
  var result = "";
  for (var i = 0; i < raw.length; i++) {
    result += raw[i].
    // join lines when there is a suppressed newline
    replace(/\\\n[ \t]*/g, "").

    // handle escaped backticks
    replace(/\\`/g, "`");

    if (i < (arguments.length <= 1 ? 0 : arguments.length - 1)) {
      result += arguments.length <= i + 1 ? undefined : arguments[i + 1];
    }
  }

  // now strip indentation
  var lines = result.split("\n");
  var mindent = null;
  lines.forEach(function (l) {
    var m = l.match(/^(\s+)\S+/);
    if (m) {
      var indent = m[1].length;
      if (!mindent) {
        // this is the first indented line
        mindent = indent;
      } else {
        mindent = Math.min(mindent, indent);
      }
    }
  });

  if (mindent !== null) {
    result = lines.map(function (l) {
      return l[0] === " " ? l.slice(mindent) : l;
    }).join("\n");
  }

  // dedent eats leading and trailing whitespace too
  result = result.trim();

  // handle escaped newlines at the end to ensure they don't get stripped too
  return result.replace(/\\n/g, "\n");
}

{
  module.exports = dedent;
}
});

function _templateObject$1() {
  var data = taggedTemplateLiteral(["Invalid child component for Breadcrumbs: ", ".  Only ", "         components may be nested within Breadcrumbs."], ["Invalid child component for Breadcrumbs: ", ".  Only ", " \\\n        components may be nested within Breadcrumbs."]);

  _templateObject$1 = function _templateObject() {
    return data;
  };

  return data;
}
var Breadcrumbs = styled__default.div.withConfig({
  displayName: "BreadcrumbGroup__Breadcrumbs",
  componentId: "sc-1b2cbfd-0"
})(["display:flex;flex-direction:row;justify-content:flex-start;align-items:flex-end;padding-left:", ";padding-right:", ";& > ", ":not(:last-child){margin-right:18px;position:relative;&::after{position:absolute;right:-12px;bottom:0;content:'\u203A';}}"], themeGet('spacing.large'), themeGet('spacing.large'), Breadcrumb);
Breadcrumbs.propTypes = {
  children: function children(props) {
    if (!props.children) return;
    var invalidChildren = props.children.filter(function (child) {
      return child.type.displayName !== Breadcrumb.displayName;
    });

    if (invalidChildren.length > 0) {
      var child = invalidChildren[0];
      var childName = child.type.displayName || child.type.name || child.type;
      return new Error(dedent_1(_templateObject$1(), childName, Breadcrumb.displayName));
    }
  }
};
Breadcrumbs.Breadcrumb = Breadcrumb;

Breadcrumb.Group = Breadcrumbs;

/**
 * NOTE: all paddings in button are adjusted to accomodate
 * border widths on both sides. If border widths are changed,
 * also change padding to compensate!
 *
 * Vertical paddings are also displaced to accomodate text cap and base lines.
 * Basically, 1px is added to the top, 1px subtracted from the bottom.
 */

var Button = styled__default.button.withConfig({
  displayName: "Button",
  componentId: "sc-4iie3h-0"
})(["font-size:0.8rem;text-decoration:none;font-weight:700;font-family:", ";text-transform:uppercase;border-width:", ";border-style:solid;border-radius:3em;border-color:", ";color:", ";background:", ";padding:12px 28px 10px 28px;display:inline-block;position:relative;overflow:hidden;line-height:normal;white-space:nowrap;vertical-align:middle;text-align:center;cursor:pointer;-webkit-user-drag:none;user-select:none;box-sizing:border-box;transition:all 0.25s ease;outline:none;&:hover:not(:disabled),&:focus:not(:disabled){background:", ";border-color:", ";box-shadow:", ";}&:disabled{background:", ";color:", ";border-color:", ";cursor:default;opacity:0.5;}&::before,&::after{position:absolute;height:100%;color:inherit;transition:all 0.3s;speak:none;font-family:", ";}&::before{content:'", "';left:-200px;}&::after{content:'", "';right:-200px;}&:hover:not(:disabled)::before{left:10px;}&:hover:not(:disabled)::after{right:10px;}"], themeGet('fonts.brand'), themeGet('thicknesses.normal'), themeGet('colors.primary.default'), themeGet('colors.text.inverted'), themeGet('colors.primary.default'), themeGet('colors.primary.dark'), themeGet('colors.primary.dark'), themeGet('shadows.short'), themeGet('colors.background.disabled'), themeGet('colors.text.disabled'), themeGet('colors.background.disabled'), themeGet('fonts.icon'), function (_ref) {
  var leftIcon = _ref.leftIcon,
      iconHelper = _ref.iconHelper;
  return iconHelper(leftIcon);
}, function (_ref2) {
  var rightIcon = _ref2.rightIcon,
      iconHelper = _ref2.iconHelper;
  return iconHelper(rightIcon);
});
Button.propTypes = {
  /**
   * An icon name for an icon to pop in from the left side of the button on hover.
   */
  leftIcon: propTypes.string,

  /**
   * An icon name for an icon to pop in from the right side of the button on hover.
   */
  rightIcon: propTypes.string,

  /**
   * Use this to override the icon provider function (advanced). An icon provider function takes an icon name and
   * provides a unicode character to render.
   */
  iconHelper: propTypes.func,

  /**
   * A class name to add to the button element.
   */
  className: propTypes.string,

  /**
   * An id to add to the button element.
   */
  id: propTypes.string
};
Button.defaultProps = {
  leftIcon: null,
  rightIcon: null,
  iconHelper: icons,
  className: null,
  id: null
};
Button.Secondary = styled__default(Button).withConfig({
  displayName: "Button__Secondary",
  componentId: "sc-4iie3h-1"
})(["color:", ";border-color:", ";background:transparent;border-width:", ";&:hover:not(:disabled),&:focus:not(:disabled){color:", ";background:", ";border-color:", ";}"], themeGet('colors.primary.dark'), themeGet('colors.primary.dark'), themeGet('thicknesses.wide'), themeGet('colors.text.inverted'), themeGet('colors.primary.dark'), themeGet('colors.primary.dark'));
Button.Small = styled__default(Button).withConfig({
  displayName: "Button__Small",
  componentId: "sc-4iie3h-2"
})(["padding:10px 28px 9px 28px;font-size:0.6rem;"]);
Button.Large = styled__default(Button).withConfig({
  displayName: "Button__Large",
  componentId: "sc-4iie3h-3"
})(["padding:14px 38px 12px 38px;font-size:0.9rem;"]);
Button.Danger = styled__default(Button).withConfig({
  displayName: "Button__Danger",
  componentId: "sc-4iie3h-4"
})(["border-color:", ";background:", ";&:hover:not(:disabled),&:focus:not(:disabled){background:", ";border-color:", ";}"], themeGet('colors.negative.default'), themeGet('colors.negative.default'), themeGet('colors.negative.dark'), themeGet('colors.negative.dark'));

var Container$5 = styled__default.div.withConfig({
  displayName: 'LoaderContainer'
}).withConfig({
  displayName: "Container",
  componentId: "w9fc58-0"
})(["display:flex;flex-direction:row;margin:auto;"]);

var grow = styled.keyframes(["0%{transform:scale(0);}50%{opacity:1;transform:scale(1);}100%{opacity:0;}"]);
var LoaderRing = styled__default.div.withConfig({
  displayName: 'LoaderRing'
}).withConfig({
  displayName: "Ring__LoaderRing",
  componentId: "ctxoz1-0"
})(["height:", ";width:", ";border-width:2px;border-style:solid;border-color:", ";border-radius:50%;margin:0 5px;transform:scale(0);animation:", " 1000ms ease infinite 0ms;&:nth-child(2){animation-delay:300ms;}&:nth-child(3){animation-delay:600ms;}&:first-child{margin-left:0;}&:last-child{margin-right:0;}"], function (_ref) {
  var size = _ref.size;
  return size;
}, function (_ref2) {
  var size = _ref2.size;
  return size;
}, themeGet('colors.primary.default'), grow);
LoaderRing.defaultProps = {
  size: '20px',
  color: null
};



var styles$d = /*#__PURE__*/Object.freeze({
  Container: Container$5,
  Ring: LoaderRing
});

var Loader =
/*#__PURE__*/
function (_React$PureComponent) {
  inherits(Loader, _React$PureComponent);

  function Loader() {
    classCallCheck(this, Loader);

    return possibleConstructorReturn(this, getPrototypeOf(Loader).apply(this, arguments));
  }

  createClass(Loader, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          size = _this$props.size,
          color = _this$props.color,
          id = _this$props.id,
          className = _this$props.className,
          Container = _this$props.Container,
          Ring = _this$props.Ring,
          rest = objectWithoutProperties(_this$props, ["size", "color", "id", "className", "Container", "Ring"]);

      return React__default.createElement(Container, _extends_1({
        id: id,
        className: className
      }, rest), React__default.createElement(Ring, {
        size: size,
        color: color
      }), React__default.createElement(Ring, {
        size: size,
        color: color
      }), React__default.createElement(Ring, {
        size: size,
        color: color
      }));
    }
  }]);

  return Loader;
}(React__default.PureComponent);

defineProperty(Loader, "propTypes", {
  /**
   * The size of each loader 'dot'. Can be any CSS dimension string.
   */
  size: propTypes.string,

  /**
   * The color of the loader. Defaults to the primary theme color.
   */
  color: propTypes.string,

  /**
   * Adds a class name to the element.
   */
  className: propTypes.string,

  /**
   * Adds an id to the element.
   */
  id: propTypes.string,

  /**
   * A component for rendering a ring of the loader
   */
  Ring: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A component for rendering the containing block of the loader
   */
  Container: propTypes.oneOfType([propTypes.func, propTypes.object])
});

defineProperty(Loader, "defaultProps", {
  size: '20px',
  color: null,
  className: null,
  id: null,
  Ring: LoaderRing,
  Container: Container$5
});

defineProperty(Loader, "styles", styles$d);

/**
 * `Button.Submit` is intended to be used within a form. `Button.Submit` should only be used to represent a button
 * that triggers the `onSubmit` actions (do not use for standard actions or cancellation).
 * @visibleName Button.Submit
 */

var SubmitButton =
/*#__PURE__*/
function (_React$Component) {
  inherits(SubmitButton, _React$Component);

  function SubmitButton() {
    var _getPrototypeOf2;

    var _this;

    classCallCheck(this, SubmitButton);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(SubmitButton)).call.apply(_getPrototypeOf2, [this].concat(args)));

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "renderContents", function () {
      var _this$props = _this.props,
          pristine = _this$props.pristine,
          loading = _this$props.loading,
          children = _this$props.children,
          pristineContents = _this$props.pristineContents;

      if (pristine) {
        return React__default.createElement("span", null, pristineContents);
      }

      if (loading) {
        return React__default.createElement(Loader, {
          size: "14px"
        });
      }

      return children;
    });

    return _this;
  }

  createClass(SubmitButton, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          pristine = _this$props2.pristine,
          loading = _this$props2.loading,
          disabled = _this$props2.disabled,
          rest = objectWithoutProperties(_this$props2, ["pristine", "loading", "disabled"]);

      return React__default.createElement(Button, _extends_1({
        disabled: pristine || loading || disabled,
        type: "submit"
      }, rest), this.renderContents());
    }
  }]);

  return SubmitButton;
}(React__default.Component);

defineProperty(SubmitButton, "propTypes", {
  /**
   * Indicates that the form has not been touched yet. Will disable submission.
   */
  pristine: propTypes.bool,

  /**
   * Indicates that the form is loading something. Will disable submission.
   */
  loading: propTypes.bool,

  /**
   * Indicates that the user cannot submit the form.
   */
  disabled: propTypes.bool,

  /**
   * Glyph name for an icon to pop out of the right side of the button on hover.
   */
  rightIcon: propTypes.string,

  /**
   * Glyph name for an icon to pop out of the left side of the butotn on hover.
   */
  leftIcon: propTypes.string,

  /**
   * Contents of the button.
   */
  children: propTypes.node.isRequired,

  /**
   * Alternate optional contents of the button when 'pristine' is true.
   */
  pristineContents: propTypes.node,

  /**
   * Adds an id to the button.
   */
  id: propTypes.string,

  /**
   * Adds a class name to the button.
   */
  className: propTypes.string,

  /**
   * Adds a click handler to the button
   */
  onClick: propTypes.func
});

defineProperty(SubmitButton, "defaultProps", {
  pristine: false,
  loading: false,
  disabled: false,
  rightIcon: null,
  leftIcon: null,
  pristineContents: 'Up to Date',
  id: null,
  className: null,
  onClick: function onClick() {
    return null;
  }
});

Button.Submit = SubmitButton;

var HelpCalloutContainer = styled__default.div.withConfig({
  displayName: "Container__HelpCalloutContainer",
  componentId: "sc-81o5q1-0"
})(["color:", ";font-style:normal;font-size:", ";background-color:", ";border:1px solid ", ";border-radius:4px;overflow-y:auto;box-shadow:", ";z-index:100000;padding:", ";pointer-events:none;max-width:", ";&[data-placement*='top']{margin-bottom:6px;}&[data-placement*='bottom']{margin-top:6px;}&[data-placement*='right']{margin-left:6px;}&[data-placement*='left']{margin-right:6px;}"], themeGet('colors.text.default'), themeGet('fontSizes.default'), themeGet('colors.background.default'), themeGet('colors.border.medium'), themeGet('shadows.short'), themeGet('spacing.medium'), function (_ref) {
  var maxWidth = _ref.maxWidth;
  return typeof maxWidth === 'number' ? maxWidth + 'px' : maxWidth;
});



var styles$e = /*#__PURE__*/Object.freeze({
  Container: HelpCalloutContainer
});

/**
 * Renders a flyout on hover which can display helpful contextual information to the user.
 */

var Callout =
/*#__PURE__*/
function (_React$Component) {
  inherits(Callout, _React$Component);

  function Callout() {
    var _getPrototypeOf2;

    var _this;

    classCallCheck(this, Callout);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Callout)).call.apply(_getPrototypeOf2, [this].concat(args)));

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "state", {
      show: false
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "trigger", function () {
      _this._timer = setTimeout(_this.show, _this.props.delay);
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "show", function () {
      _this.setState({
        show: true
      });
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "cancel", function () {
      _this.setState({
        show: false
      });

      clearTimeout(_this._timer);
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "renderReferenceContent", function (_ref) {
      var ref = _ref.ref;

      /* skip all props used by component and let outermost component to take an extra props */
      var _this$props = _this.props,
          delay = _this$props.delay,
          children = _this$props.children,
          content = _this$props.content,
          boundary = _this$props.boundary,
          maxWidth = _this$props.maxWidth,
          placement = _this$props.placement,
          Container = _this$props.Container,
          extra = objectWithoutProperties(_this$props, ["delay", "children", "content", "boundary", "maxWidth", "placement", "Container"]);

      return React__default.createElement("div", _extends_1({
        style: {
          display: 'inline-block'
        },
        ref: ref,
        onMouseOver: _this.trigger,
        onMouseLeave: _this.cancel
      }, extra), _this.props.children);
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "renderPopperContent", function (_ref2) {
      var ref = _ref2.ref,
          style = _ref2.style,
          placement = _ref2.placement;
      var _this$props2 = _this.props,
          Container = _this$props2.Container,
          contentProps = _this$props2.contentProps;
      return React__default.createElement(Foreground, null, React__default.createElement(Container, _extends_1({}, contentProps, {
        ref: ref,
        style: style,
        "data-placement": placement,
        maxWidth: _this.props.maxWidth
      }), _this.props.content));
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "getBoundariesElement", function () {
      return typeof _this.props.boundary === 'string' ? document.querySelector(_this.props.boundary) : _this.props.boundary;
    });

    return _this;
  }

  createClass(Callout, [{
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          placement = _this$props3.placement,
          rest = objectWithoutProperties(_this$props3, ["placement"]);

      var show = this.state.show;
      return React__default.createElement(reactPopper.Manager, null, React__default.createElement(reactPopper.Reference, null, this.renderReferenceContent), show && React__default.createElement(reactPopper.Popper, _extends_1({
        placement: placement,
        modifiers: {
          preventOverflow: {
            boundariesElement: this.getBoundariesElement() || window.document
          }
        }
      }, rest), this.renderPopperContent));
    }
  }]);

  return Callout;
}(React__default.Component);

defineProperty(Callout, "propTypes", {
  /**
   * Miliseconds to wait before showing the callout.
   */
  delay: propTypes.number,

  /**
   * Elements to render which will activate the callout on hover.
   */
  children: propTypes.node.isRequired,

  /**
   * Content to render inside the callout itself.
   */
  content: propTypes.node.isRequired,

  /**
   * Where to place the element. Use a value from react-popper
   */
  placement: propTypes.oneOf(['auto', 'top', 'top-start', 'top-end', 'right', 'right-start', 'right-end', 'bottom', 'bottom-start', 'bottom-end', 'left', 'left-start', 'left-end']),

  /**
   * Boundary for the callout; either a selector or a DOM element
   */
  boundary: propTypes.oneOfType([propTypes.string, propTypes.object]),

  /**
   * Maximum width of the callout
   */
  maxWidth: propTypes.number,

  /**
   * Any additional props you want to supply to the containing element which
   * wraps the callout content
   */
  contentProps: propTypes.object,

  /**
   * Provide a component to render the outer visual container of the callout content.
   * Must handle the `data-placement` attribute to determine its styling relative
   * to the anchored component!
   */
  Container: propTypes.oneOfType([propTypes.func, propTypes.object])
});

defineProperty(Callout, "defaultProps", {
  delay: 100,
  placement: 'top',
  content: '',
  boundary: null,
  maxWidth: 300,
  Container: HelpCalloutContainer
});

defineProperty(Callout, "styles", styles$e);

var CardWrapper = styled__default.div.withConfig({
  displayName: "Wrapper__CardWrapper",
  componentId: "sc-7jayh7-0"
})(["height:auto;vertical-align:top;flex:1;border-radius:5px;margin:", ";box-shadow:", ";border-color:", ";border-width:0 ", " ", " ", ";border-style:solid;overflow:hidden;"], themeGet('spacing.medium'), themeGet('shadows.long'), themeGet('colors.border.medium'), themeGet('thicknesses.normal'), themeGet('thicknesses.normal'), themeGet('thicknesses.normal'));

var CardGroupConnected = styled__default.div.withConfig({
  displayName: "GroupConnected__CardGroupConnected",
  componentId: "sc-15m3gij-0"
})(["display:flex;border-width:0 ", " ", " ", ";border-color:", ";border-style:solid;border-radius:5px;box-shadow:", ";& > *{margin:0;box-shadow:none;border:none;border-radius:0;}& > ", ":first-of-type{border-radius:0;border-top-left-radius:5px;border-bottom-left-radius:5px;}& > ", ":last-of-type{border-radius:0;border-top-right-radius:5px;border-bottom-right-radius:5px;}& > ", " + ", "{border-left:", " solid ", ";}"], themeGet('thicknesses.normal'), themeGet('thicknesses.normal'), themeGet('thicknesses.normal'), themeGet('colors.border.medium'), themeGet('shadows.long'), CardWrapper, CardWrapper, CardWrapper, CardWrapper, themeGet('thicknesses.normal'), themeGet('colors.border.medium'));

var CardGroup = styled__default.div.withConfig({
  displayName: "Group__CardGroup",
  componentId: "sc-14hi82g-0"
})(["display:flex;"]);
CardGroup.Connected = CardGroupConnected;

var HeaderWrapper = styled__default.div.withConfig({
  displayName: "HeaderWrapper",
  componentId: "hmfydi-0"
})(["color:", ";font-size:1.2em;font-weight:500;text-transform:uppercase;background:", ";background-size:cover;padding:", ";padding-top:", ";flex:1;"], themeGet('colors.background.default'), function (props) {
  return props.image ? "url(".concat(props.image, ")") : themeGet('colors.primary.dark');
}, themeGet('spacing.medium'), themeGet('spacing.extraLarge'));

var LINE_HEIGHT = 1.25;
var H3 = styled__default.h3.withConfig({
  displayName: 'H3'
}).withConfig({
  displayName: "H3",
  componentId: "sc-73l0aw-0"
})(["color:", ";font-weight:300;font-family:", ";font-size:1.75em;line-height:", ";letter-spacing:0;margin:", ";padding:0;"], themeGet('colors.text.default'), themeGet('fonts.brand'), LINE_HEIGHT, userSpacing.withLineHeight(LINE_HEIGHT));
H3.propTypes = {
  /**
   * Specify a CSS value or an object { top, right, bottom, left } or { vertical, horizontal } to
   * control the spacing around the heading. Defaults to a large space below the element.
   */
  spacing: propTypes.oneOfType([propTypes.string, propTypes.object]),

  /**
   * Adds a class name to the element.
   */
  className: propTypes.string,

  /**
   * Adds an id to the element.
   */
  id: propTypes.string
};
H3.defaultProps = {
  spacing: {
    bottom: 'lg'
  },
  className: null,
  id: null
};
H3.Primary = styled__default(H3).withConfig({
  displayName: "H3__Primary",
  componentId: "sc-73l0aw-1"
})(["color:", ";"], themeGet('colors.primary.default'));

var CardHeaderText = styled__default(H3).withConfig({
  displayName: "HeaderText__CardHeaderText",
  componentId: "k34zjn-0"
})(["color:", ";"], themeGet('colors.text.inverted'));

var CardHeader =
/*#__PURE__*/
function (_React$Component) {
  inherits(CardHeader, _React$Component);

  function CardHeader() {
    classCallCheck(this, CardHeader);

    return possibleConstructorReturn(this, getPrototypeOf(CardHeader).apply(this, arguments));
  }

  createClass(CardHeader, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          image = _this$props.image,
          title = _this$props.title,
          HeaderWrapper$$1 = _this$props.HeaderWrapper,
          CardHeaderText$$1 = _this$props.CardHeaderText;
      return React__default.createElement(HeaderWrapper$$1, {
        image: image
      }, title ? React__default.createElement(CardHeaderText$$1, null, title) : null);
    }
  }]);

  return CardHeader;
}(React__default.Component);

defineProperty(CardHeader, "propTypes", {
  /**
   * The text to be displayed in the header.  Optional.  Text is displayed in white font by default.
   */
  title: propTypes.string,

  /**
   * The image to be displayed as the background of the header.  If omitted, no background image is used.
   */
  image: propTypes.string,

  /**
   * A component which controls the styling of the CardHeader
   */
  HeaderWrapper: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A component which controls the appearance of the text in the Card Header
   */
  CardHeaderText: propTypes.oneOfType([propTypes.func, propTypes.object])
});

defineProperty(CardHeader, "defaultProps", {
  title: null,
  image: null,
  HeaderWrapper: HeaderWrapper,
  CardHeaderText: CardHeaderText
});

var CardSection = styled__default.div.withConfig({
  displayName: "Section__CardSection",
  componentId: "sc-1y6ykzo-0"
})(["padding:", ";&:not(:last-of-type){border-bottom-color:", ";border-bottom-width:", ";border-bottom-style:solid;}& > *{margin:0;}"], themeGet('spacing.medium'), themeGet('colors.border.medium'), themeGet('thicknesses.normal'));



var styles$f = /*#__PURE__*/Object.freeze({
  Group: CardGroup,
  GroupConnected: CardGroupConnected,
  Header: CardHeader,
  HeaderText: CardHeaderText,
  HeaderWrapper: HeaderWrapper,
  Section: CardSection,
  Wrapper: CardWrapper
});

/**
 * Card components may be used anywhere on the page as a stand-alone component.
 */

var Card =
/*#__PURE__*/
function (_React$Component) {
  inherits(Card, _React$Component);

  function Card() {
    classCallCheck(this, Card);

    return possibleConstructorReturn(this, getPrototypeOf(Card).apply(this, arguments));
  }

  createClass(Card, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          CardWrapper$$1 = _this$props.CardWrapper,
          rest = objectWithoutProperties(_this$props, ["children", "CardWrapper"]);

      return React__default.createElement(CardWrapper$$1, rest, children);
    }
  }]);

  return Card;
}(React__default.Component);

defineProperty(Card, "propTypes", {
  /**
   * A component which controls the styles for the outline of the Card.
   */
  CardWrapper: propTypes.oneOfType([propTypes.func, propTypes.object])
});

defineProperty(Card, "defaultProps", {
  CardWrapper: CardWrapper
});

defineProperty(Card, "styles", styles$f);

Card.Section = CardSection;
Card.Header = CardHeader;

Card.Group = CardGroup;
Card.Group.Connected = CardGroupConnected;

var Container$6 = styled__default.div.withConfig({
  displayName: "Container",
  componentId: "zq6vqa-0"
})(["display:block;position:relative;& + &{margin-top:", ";}"], themeGet('spacing.extraSmall'));

var Input = styled__default.input.withConfig({
  displayName: "Input",
  componentId: "sc-1s9u2k7-0"
})(["opacity:0;position:absolute;z-index:-1000000;"]);

var SIZE$1 = '30px';
var CHECK_SIZE = '21px';
var SMALL_SIZE$1 = '20px';
var SMALL_CHECK_SIZE = '1em';
var CheckboxLabel = styled__default.label.withConfig({
  displayName: "Label__CheckboxLabel",
  componentId: "sc-18586ig-0"
})(["display:block;padding:4px 0 5px calc(", " + 10px);min-height:", ";min-width:", ";line-height:1.5;cursor:pointer;position:relative;user-select:none;&::before{content:\"\";color:", ";font-family:", ";font-size:", ";display:block;position:absolute;top:50%;left:calc(", " / 2);transform:translate(-50%,-48%);z-index:1;box-sizing:border-box;transition:all 0.2s ease;}&::after{content:\"\";background:", ";border-color:", ";border-width:", ";border-style:solid;border-radius:3px;width:", ";height:", ";position:absolute;top:50%;left:0;transform:translateY(-50%);transition:all 0.2s ease;box-sizing:border-box;}", ":hover:not(:disabled) + &::after,", ":focus:not(:disabled) + &::after,", ":active:not(:disabled) + &::after{box-shadow:", ";}", ":checked + &::after{background:", ";}", ":disabled + &{color:", ";cursor:default;}", ":disabled + &::after{background:", ";border-color:", ";}", ":disabled:checked + &{&::after{background:", ";border-color:", ";}&::before{color:", ";}}", ":checked + &::before{content:\"", "\";}"], SIZE$1, SIZE$1, SIZE$1, themeGet('colors.text.inverted'), themeGet('fonts.icon'), CHECK_SIZE, SIZE$1, themeGet('colors.background.default'), themeGet('colors.primary.dark'), themeGet('thicknesses.wide'), SIZE$1, SIZE$1, Input, Input, Input, themeGet('shadows.focusOutline'), Input, themeGet('colors.primary.dark'), Input, themeGet('colors.text.disabled'), Input, themeGet('colors.background.disabled'), themeGet('colors.border.disabled'), Input, themeGet('colors.background.disabledSelected'), themeGet('colors.border.disabled'), themeGet('colors.text.inverted'), Input, icons('checkmark'));
CheckboxLabel.Small = styled__default(CheckboxLabel).withConfig({
  displayName: "Label__Small",
  componentId: "sc-18586ig-1"
})(["padding:4px 0 5px calc(", " + 10px);min-height:", ";min-width:", ";&::before{font-size:", ";left:calc(", " / 2);}&::after{width:", ";height:", ";}"], SMALL_SIZE$1, SMALL_SIZE$1, SMALL_SIZE$1, SMALL_CHECK_SIZE, SMALL_SIZE$1, SMALL_SIZE$1, SMALL_SIZE$1);



var styles$g = /*#__PURE__*/Object.freeze({
  Container: Container$6,
  Input: Input,
  Label: CheckboxLabel
});

/**
 * A simple checkbox input.
 */

var Checkbox =
/*#__PURE__*/
function (_React$PureComponent) {
  inherits(Checkbox, _React$PureComponent);

  function Checkbox() {
    var _getPrototypeOf2;

    var _this;

    classCallCheck(this, Checkbox);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Checkbox)).call.apply(_getPrototypeOf2, [this].concat(args)));

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "defaultId", generateId('checkbox'));

    return _this;
  }

  createClass(Checkbox, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          id = _this$props.id,
          className = _this$props.className,
          disabled = _this$props.disabled,
          name = _this$props.name,
          required = _this$props.required,
          description = _this$props.description,
          onChange = _this$props.onChange,
          Container = _this$props.Container,
          Input$$1 = _this$props.Input,
          Label = _this$props.Label,
          value = _this$props.value,
          checked = _this$props.checked,
          rest = objectWithoutProperties(_this$props, ["id", "className", "disabled", "name", "required", "description", "onChange", "Container", "Input", "Label", "value", "checked"]);

      var finalId = id || this.defaultId;
      return React__default.createElement(Container, null, React__default.createElement(Input$$1, _extends_1({
        name: name,
        id: finalId,
        className: className,
        type: "checkbox",
        disabled: disabled,
        checked: checked,
        value: value,
        required: required,
        onChange: onChange
      }, rest)), React__default.createElement(Label, {
        htmlFor: finalId,
        active: !!checked
      }, description));
    }
  }]);

  return Checkbox;
}(React__default.PureComponent);

defineProperty(Checkbox, "propTypes", {
  /**
   * Adds a class name to the input element.
   */
  className: propTypes.string,

  /**
   * Adds an id to the input element.
   */
  id: propTypes.string,

  /**
   * The literal value this checkbox represents. For example, if this checkbox
   * represents whether the app is in "Dark Mode", you might provide "darkMode"
   * to this prop to represent that value key.
   */
  value: propTypes.string,

  /**
   * Whether the checkbox is checked or not.
   */
  checked: propTypes.bool,

  /**
   * Whether the checkbox is required for form submission.
   */
  required: propTypes.bool,

  /**
   * Whether the user is prevented from interacting with the checkbox.
   */
  disabled: propTypes.bool,

  /**
   * A description to display next to the checkbox.
   */
  description: propTypes.node,

  /**
   * Callback for the onChange event of the input.
   */
  onChange: propTypes.func,

  /**
   * A component to render an input, by default hidden.
   */
  Input: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A component to render a label. By default this component renders the checkbox itself as a pseudoelement pair.
   */
  Label: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A component to render the wrapping element of the assembled checkbox/label
   */
  Container: propTypes.oneOfType([propTypes.func, propTypes.object])
});

defineProperty(Checkbox, "defaultProps", {
  className: null,
  id: null,
  value: undefined,
  checked: undefined,
  required: false,
  disabled: false,
  description: null,
  onChange: function onChange() {
    return null;
  },
  Input: Input,
  Label: CheckboxLabel,
  Container: Container$6
});

defineProperty(Checkbox, "styles", styles$g);

defineProperty(Checkbox, "Small", defaultProps({
  Label: CheckboxLabel.Small
})(Checkbox));

/**
 * Applies styling to render multiline code.
 * @component
 * @visibleName Code.Block
 */

var Block = styled__default.code.withConfig({
  displayName: "CodeBlock",
  componentId: "sc-1oe2tuq-0"
})(["white-space:pre;display:block;font-family:", ";font-size:1em;background:", ";color:", ";padding:2em;margin:0;word-wrap:break-word;white-space:pre-wrap;text-rendering:optimizeLegibility;-webkit-font-smoothing:antialiased;& pre,& code{background:transparent !important;word-wrap:inherit;white-space:inherit;}"], themeGet('fonts.monospace'), themeGet('colors.background.inverted'), themeGet('colors.text.inverted'));

var Code = styled__default.code.withConfig({
  displayName: 'Code'
}).withConfig({
  displayName: "Code",
  componentId: "sc-18l6hz-0"
})(["white-space:pre;font-family:", ";font-size:0.85em;background:", ";color:", ";border-color:", ";border-width:", ";border-style:solid;border-radius:3px;padding:0.3em;margin:0;display:inline-block;"], themeGet('fonts.monospace'), themeGet('colors.gray.light'), themeGet('colors.text.default'), themeGet('colors.border.medium'), themeGet('thicknesses.normal'));
Code.propTypes = {
  /**
   * A class name to pass to the element.
   */
  className: propTypes.string,

  /**
   * An id to pass to the element.
   */
  id: propTypes.string
};
Code.defaultProps = {
  className: null,
  id: null
};
Code.Block = Block;

var LineSeparator = styled__default.div.withConfig({
  displayName: "LineSeparator",
  componentId: "sc-1vmaq19-0"
})(["width:10px;margin:auto ", ";height:", ";background:", ";"], themeGet('spacing.small'), themeGet('thicknesses.normal'), themeGet('colors.border.medium'));

var WIDTH = 554;
var expandDown = styled.keyframes(["from{transform:translateY(-50%) scaleY(0);opacity:0;}to{transform:translateY(0) scaleY(1);opacity:1;}"]);
var expandUp = styled.keyframes(["from{transform:translateY(50%) scaleY(0);opacity:0;}to{transform:translateY(0) scaleY(1);opacity:1;}"]);
var RangeWrapper = styled__default.div.withConfig({
  displayName: "RangeWrapper",
  componentId: "sc-1tcas31-0"
})([".DateRangePicker{width:", "px;}.CalendarMonth,.DayPicker_weekHeader{}.DateRangePicker_picker{top:", ";bottom:", ";width:", ";animation:", " 200ms;}", ";"], WIDTH, function (_ref) {
  var openDirection = _ref.openDirection;
  return openDirection === 'up' ? 'inherit' : '51px !important';
}, function (_ref2) {
  var openDirection = _ref2.openDirection;
  return openDirection === 'up' ? '51px !important' : 'inherit';
}, function (_ref3) {
  var disabled = _ref3.disabled;
  return disabled ? '262px' : WIDTH + 'px';
}, function (_ref4) {
  var openDirection = _ref4.openDirection;
  return openDirection === 'up' ? expandUp : expandDown;
}, function (_ref5) {
  var invalid = _ref5.invalid;
  return invalid && styled.css([".DateInput_input:not(.DateInput_input__focused){border-color:var(--colors-negative-border) !important;box-shadow:inset 0 -5px 0 ", ";}"], get('colors.negative.light'));
});

var WIDTH$1 = 260;
var expandDown$1 = styled.keyframes(["from{transform:translateY(-50%) scaleY(0);opacity:0;}to{transform:translateY(0) scaleY(1);opacity:1;}"]);
var expandUp$1 = styled.keyframes(["from{transform:translateY(50%) scaleY(0);opacity:0;}to{transform:translateY(0) scaleY(1);opacity:1;}"]);
var Wrapper = styled__default.div.withConfig({
  displayName: "Wrapper",
  componentId: "sc-1gbe636-0"
})([".SingleDatePicker{width:", "px;}.CalendarMonth,.DayPicker_weekHeader{}.DayPicker_transitionContainer{width:", "px !important;}.DayPicker_weekHeader_li{margin-left:", "px;}.SingleDatePicker_picker{top:", ";bottom:", ";width:", ";animation:", " 200ms;}", ";"], WIDTH$1, WIDTH$1 - 4, 2.0 / -7.0, function (_ref) {
  var openDirection = _ref.openDirection;
  return openDirection === 'up' ? 'inherit' : '51px !important';
}, function (_ref2) {
  var openDirection = _ref2.openDirection;
  return openDirection === 'up' ? '51px !important' : 'inherit';
}, function (_ref3) {
  var disabled = _ref3.disabled;
  return disabled ? '262px' : '100%';
}, function (_ref4) {
  var openDirection = _ref4.openDirection;
  return openDirection === 'up' ? expandUp$1 : expandDown$1;
}, function (_ref5) {
  var invalid = _ref5.invalid;
  return invalid && styled.css([".DateInput_input:not(.DateInput_input__focused){border-color:var(--colors-negative-border) !important;box-shadow:inset 0 -5px 0 ", ";}"], get('colors.negative.light'));
});



var styles$h = /*#__PURE__*/Object.freeze({
  LineSeparator: LineSeparator,
  RangeWrapper: RangeWrapper,
  Wrapper: Wrapper,
  baseCss: datePickerCss,
  overridesCss: overridesCss
});

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as references for various `Number` constants. */
var INFINITY$3 = 1 / 0,
    MAX_SAFE_INTEGER$2 = 9007199254740991;

/** `Object#toString` result references. */
var argsTag$1 = '[object Arguments]',
    funcTag$3 = '[object Function]',
    genTag$3 = '[object GeneratorFunction]',
    symbolTag$3 = '[object Symbol]';

/** Detect free variable `global` from Node.js. */
var freeGlobal$4 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

/** Detect free variable `self`. */
var freeSelf$4 = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root$5 = freeGlobal$4 || freeSelf$4 || Function('return this')();

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply$1(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap$1(array, iteratee) {
  var index = -1,
      length = array ? array.length : 0,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush$1(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

/** Used for built-in method references. */
var objectProto$6 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$6 = objectProto$6.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString$6 = objectProto$6.toString;

/** Built-in value references. */
var Symbol$5 = root$5.Symbol,
    propertyIsEnumerable$1 = objectProto$6.propertyIsEnumerable,
    spreadableSymbol$1 = Symbol$5 ? Symbol$5.isConcatSpreadable : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax$1 = Math.max;

/**
 * The base implementation of `_.flatten` with support for restricting flattening.
 *
 * @private
 * @param {Array} array The array to flatten.
 * @param {number} depth The maximum recursion depth.
 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
 * @param {Array} [result=[]] The initial result value.
 * @returns {Array} Returns the new flattened array.
 */
function baseFlatten$1(array, depth, predicate, isStrict, result) {
  var index = -1,
      length = array.length;

  predicate || (predicate = isFlattenable$1);
  result || (result = []);

  while (++index < length) {
    var value = array[index];
    if (depth > 0 && predicate(value)) {
      if (depth > 1) {
        // Recursively flatten arrays (susceptible to call stack limits).
        baseFlatten$1(value, depth - 1, predicate, isStrict, result);
      } else {
        arrayPush$1(result, value);
      }
    } else if (!isStrict) {
      result[result.length] = value;
    }
  }
  return result;
}

/**
 * The base implementation of `_.pick` without support for individual
 * property identifiers.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} props The property identifiers to pick.
 * @returns {Object} Returns the new object.
 */
function basePick$1(object, props) {
  object = Object(object);
  return basePickBy$1(object, props, function(value, key) {
    return key in object;
  });
}

/**
 * The base implementation of  `_.pickBy` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} props The property identifiers to pick from.
 * @param {Function} predicate The function invoked per property.
 * @returns {Object} Returns the new object.
 */
function basePickBy$1(object, props, predicate) {
  var index = -1,
      length = props.length,
      result = {};

  while (++index < length) {
    var key = props[index],
        value = object[key];

    if (predicate(value, key)) {
      result[key] = value;
    }
  }
  return result;
}

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest$1(func, start) {
  start = nativeMax$1(start === undefined ? (func.length - 1) : start, 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax$1(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = array;
    return apply$1(func, this, otherArgs);
  };
}

/**
 * Checks if `value` is a flattenable `arguments` object or array.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
 */
function isFlattenable$1(value) {
  return isArray$3(value) || isArguments$1(value) ||
    !!(spreadableSymbol$1 && value && value[spreadableSymbol$1]);
}

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey$2(value) {
  if (typeof value == 'string' || isSymbol$3(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY$3) ? '-0' : result;
}

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
function isArguments$1(value) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  return isArrayLikeObject$1(value) && hasOwnProperty$6.call(value, 'callee') &&
    (!propertyIsEnumerable$1.call(value, 'callee') || objectToString$6.call(value) == argsTag$1);
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray$3 = Array.isArray;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike$1(value) {
  return value != null && isLength$1(value.length) && !isFunction$3(value);
}

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject$1(value) {
  return isObjectLike$5(value) && isArrayLike$1(value);
}

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction$3(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject$4(value) ? objectToString$6.call(value) : '';
  return tag == funcTag$3 || tag == genTag$3;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength$1(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$2;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject$4(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike$5(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol$3(value) {
  return typeof value == 'symbol' ||
    (isObjectLike$5(value) && objectToString$6.call(value) == symbolTag$3);
}

/**
 * Creates an object composed of the picked `object` properties.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The source object.
 * @param {...(string|string[])} [props] The property identifiers to pick.
 * @returns {Object} Returns the new object.
 * @example
 *
 * var object = { 'a': 1, 'b': '2', 'c': 3 };
 *
 * _.pick(object, ['a', 'c']);
 * // => { 'a': 1, 'c': 3 }
 */
var pick$1 = baseRest$1(function(object, props) {
  return object == null ? {} : basePick$1(object, arrayMap$1(baseFlatten$1(props, 1), toKey$2));
});

var lodash_pick = pick$1;

/**
 * This is a styling wrapper around [react-dates](https://github.com/airbnb/react-dates).
 * Please see [here](https://github.com/airbnb/react-dates#singledatepicker) for prop types.
 *
 * The picker can be controlled by setting the props `startDate`, `endDate` and `onDatesChange`.
 * `startDate` and `endDate` should be set to moment objects of the currently selected dates,
 * while `onDatesChange` should be a function that handles the dates when they
 * change.
 *
 * **NOTE: ** The range picker uses `onDatesChange` not `onDateChange`.
 *
 * @visibleName DatePicker.Range
 */

var DateRangePicker =
/*#__PURE__*/
function (_React$PureComponent) {
  inherits(DateRangePicker, _React$PureComponent);

  function DateRangePicker() {
    var _getPrototypeOf2;

    var _this;

    classCallCheck(this, DateRangePicker);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(DateRangePicker)).call.apply(_getPrototypeOf2, [this].concat(args)));

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "state", {
      internalFocusedInput: null
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleFocusChange", function (internalFocusedInput) {
      return _this.setState({
        internalFocusedInput: internalFocusedInput
      });
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "genStartDateId", generateId('startDate'));

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "getEndDateId", generateId('endDate'));

    return _this;
  }

  createClass(DateRangePicker, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          Wrapper$$1 = _this$props.Wrapper,
          LineSeparator$$1 = _this$props.LineSeparator,
          startDateId = _this$props.startDateId,
          endDateId = _this$props.endDateId,
          rest = objectWithoutProperties(_this$props, ["Wrapper", "LineSeparator", "startDateId", "endDateId"]);

      return React__default.createElement(Wrapper$$1, {
        className: this.focusedInput && 'focused-' + this.focusedInput,
        openDirection: this.props.openDirection,
        disabled: this.props.disabled,
        invalid: this.props.invalid
      }, React__default.createElement(reactDates.DateRangePicker, _extends_1({
        navPrev: React__default.createElement(Icon, {
          name: "back",
          size: "12px"
        }),
        navNext: React__default.createElement(Icon, {
          name: "forward",
          size: "12px"
        }),
        weekDayFormat: "dd",
        displayFormat: "MMM DD YYYY",
        customArrowIcon: React__default.createElement(LineSeparator$$1, null),
        daySize: 35,
        horizontalMargin: 0,
        horizontalMonthPadding: 14,
        hideKeyboardShortcutsPanel: true,
        numberOfMonths: this.props.disabled ? 1 : 2,
        minimumNights: 0,
        focusedInput: this.focusedInput,
        anchorDirection: this.focusedInput === 'endDate' ? 'right' : 'left',
        onFocusChange: this.handleFocusChange,
        startDateId: startDateId || this.genStartDateId,
        endDateId: endDateId || this.getEndDateId
      }, rest)));
    }
  }, {
    key: "focusedInput",
    get: function get() {
      return this.props.disabled !== this.state.internalFocusedInput && this.state.internalFocusedInput;
    }
  }]);

  return DateRangePicker;
}(React__default.PureComponent);

defineProperty(DateRangePicker, "propTypes", {
  /**
   * An id for the start date part of the widget.
   */
  startDateId: propTypes.string,

  /**
   * An id for the end date part of the widget.
   */
  endDateId: propTypes.string,

  /**
   * A component to wrap and control styles of the underlying react-dates DatePicker
   */
  Wrapper: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A component that renders the separator line between the two inputs
   */
  LineSeparator: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * Set to true if the component's value is invalid
   */
  invalid: propTypes.bool,

  /**
   * Set to true if the component should be disabled. Alternatively, set to either 'startDate' or 'endDate'
   * to disable a particular part of the component.
   */
  disabled: propTypes.oneOfType([propTypes.bool, propTypes.string])
});

defineProperty(DateRangePicker, "defaultProps", {
  Wrapper: RangeWrapper,
  LineSeparator: LineSeparator,
  invalid: false,
  disabled: false
});

defineProperty(DateRangePicker, "styles", styles$h);

var moment = createCommonjsModule(function (module, exports) {
(function (global, factory) {
    module.exports = factory();
}(commonjsGlobal, (function () {
    var hookCallback;

    function hooks () {
        return hookCallback.apply(null, arguments);
    }

    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback (callback) {
        hookCallback = callback;
    }

    function isArray(input) {
        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
    }

    function isObject(input) {
        // IE8 will treat undefined and null as object if it wasn't for
        // input != null
        return input != null && Object.prototype.toString.call(input) === '[object Object]';
    }

    function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
            return (Object.getOwnPropertyNames(obj).length === 0);
        } else {
            var k;
            for (k in obj) {
                if (obj.hasOwnProperty(k)) {
                    return false;
                }
            }
            return true;
        }
    }

    function isUndefined(input) {
        return input === void 0;
    }

    function isNumber(input) {
        return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
    }

    function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
    }

    function map(arr, fn) {
        var res = [], i;
        for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }

    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }

    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }

        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function createUTC (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }

    function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
            empty           : false,
            unusedTokens    : [],
            unusedInput     : [],
            overflow        : -2,
            charsLeftOver   : 0,
            nullInput       : false,
            invalidMonth    : null,
            invalidFormat   : false,
            userInvalidated : false,
            iso             : false,
            parsedDateParts : [],
            meridiem        : null,
            rfc2822         : false,
            weekdayMismatch : false
        };
    }

    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }

    var some;
    if (Array.prototype.some) {
        some = Array.prototype.some;
    } else {
        some = function (fun) {
            var t = Object(this);
            var len = t.length >>> 0;

            for (var i = 0; i < len; i++) {
                if (i in t && fun.call(this, t[i], i, t)) {
                    return true;
                }
            }

            return false;
        };
    }

    function isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m);
            var parsedParts = some.call(flags.parsedDateParts, function (i) {
                return i != null;
            });
            var isNowValid = !isNaN(m._d.getTime()) &&
                flags.overflow < 0 &&
                !flags.empty &&
                !flags.invalidMonth &&
                !flags.invalidWeekday &&
                !flags.weekdayMismatch &&
                !flags.nullInput &&
                !flags.invalidFormat &&
                !flags.userInvalidated &&
                (!flags.meridiem || (flags.meridiem && parsedParts));

            if (m._strict) {
                isNowValid = isNowValid &&
                    flags.charsLeftOver === 0 &&
                    flags.unusedTokens.length === 0 &&
                    flags.bigHour === undefined;
            }

            if (Object.isFrozen == null || !Object.isFrozen(m)) {
                m._isValid = isNowValid;
            }
            else {
                return isNowValid;
            }
        }
        return m._isValid;
    }

    function createInvalid (flags) {
        var m = createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        }
        else {
            getParsingFlags(m).userInvalidated = true;
        }

        return m;
    }

    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    var momentProperties = hooks.momentProperties = [];

    function copyConfig(to, from) {
        var i, prop, val;

        if (!isUndefined(from._isAMomentObject)) {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (!isUndefined(from._i)) {
            to._i = from._i;
        }
        if (!isUndefined(from._f)) {
            to._f = from._f;
        }
        if (!isUndefined(from._l)) {
            to._l = from._l;
        }
        if (!isUndefined(from._strict)) {
            to._strict = from._strict;
        }
        if (!isUndefined(from._tzm)) {
            to._tzm = from._tzm;
        }
        if (!isUndefined(from._isUTC)) {
            to._isUTC = from._isUTC;
        }
        if (!isUndefined(from._offset)) {
            to._offset = from._offset;
        }
        if (!isUndefined(from._pf)) {
            to._pf = getParsingFlags(from);
        }
        if (!isUndefined(from._locale)) {
            to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
            for (i = 0; i < momentProperties.length; i++) {
                prop = momentProperties[i];
                val = from[prop];
                if (!isUndefined(val)) {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    var updateInProgress = false;

    // Moment prototype object
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
            this._d = new Date(NaN);
        }
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            hooks.updateOffset(this);
            updateInProgress = false;
        }
    }

    function isMoment (obj) {
        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
    }

    function absFloor (number) {
        if (number < 0) {
            // -0 -> 0
            return Math.ceil(number) || 0;
        } else {
            return Math.floor(number);
        }
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
        }

        return value;
    }

    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if ((dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    function warn(msg) {
        if (hooks.suppressDeprecationWarnings === false &&
                (typeof console !==  'undefined') && console.warn) {
            console.warn('Deprecation warning: ' + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;

        return extend(function () {
            if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(null, msg);
            }
            if (firstTime) {
                var args = [];
                var arg;
                for (var i = 0; i < arguments.length; i++) {
                    arg = '';
                    if (typeof arguments[i] === 'object') {
                        arg += '\n[' + i + '] ';
                        for (var key in arguments[0]) {
                            arg += key + ': ' + arguments[0][key] + ', ';
                        }
                        arg = arg.slice(0, -2); // Remove trailing comma and space
                    } else {
                        arg = arguments[i];
                    }
                    args.push(arg);
                }
                warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    var deprecations = {};

    function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }

    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;

    function isFunction(input) {
        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
    }

    function set (config) {
        var prop, i;
        for (i in config) {
            prop = config[i];
            if (isFunction(prop)) {
                this[i] = prop;
            } else {
                this['_' + i] = prop;
            }
        }
        this._config = config;
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
        // TODO: Remove "ordinalParse" fallback in next major release.
        this._dayOfMonthOrdinalParseLenient = new RegExp(
            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
                '|' + (/\d{1,2}/).source);
    }

    function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig), prop;
        for (prop in childConfig) {
            if (hasOwnProp(childConfig, prop)) {
                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                    res[prop] = {};
                    extend(res[prop], parentConfig[prop]);
                    extend(res[prop], childConfig[prop]);
                } else if (childConfig[prop] != null) {
                    res[prop] = childConfig[prop];
                } else {
                    delete res[prop];
                }
            }
        }
        for (prop in parentConfig) {
            if (hasOwnProp(parentConfig, prop) &&
                    !hasOwnProp(childConfig, prop) &&
                    isObject(parentConfig[prop])) {
                // make sure changes to properties don't modify parent config
                res[prop] = extend({}, res[prop]);
            }
        }
        return res;
    }

    function Locale(config) {
        if (config != null) {
            this.set(config);
        }
    }

    var keys;

    if (Object.keys) {
        keys = Object.keys;
    } else {
        keys = function (obj) {
            var i, res = [];
            for (i in obj) {
                if (hasOwnProp(obj, i)) {
                    res.push(i);
                }
            }
            return res;
        };
    }

    var defaultCalendar = {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    };

    function calendar (key, mom, now) {
        var output = this._calendar[key] || this._calendar['sameElse'];
        return isFunction(output) ? output.call(mom, now) : output;
    }

    var defaultLongDateFormat = {
        LTS  : 'h:mm:ss A',
        LT   : 'h:mm A',
        L    : 'MM/DD/YYYY',
        LL   : 'MMMM D, YYYY',
        LLL  : 'MMMM D, YYYY h:mm A',
        LLLL : 'dddd, MMMM D, YYYY h:mm A'
    };

    function longDateFormat (key) {
        var format = this._longDateFormat[key],
            formatUpper = this._longDateFormat[key.toUpperCase()];

        if (format || !formatUpper) {
            return format;
        }

        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
            return val.slice(1);
        });

        return this._longDateFormat[key];
    }

    var defaultInvalidDate = 'Invalid date';

    function invalidDate () {
        return this._invalidDate;
    }

    var defaultOrdinal = '%d';
    var defaultDayOfMonthOrdinalParse = /\d{1,2}/;

    function ordinal (number) {
        return this._ordinal.replace('%d', number);
    }

    var defaultRelativeTime = {
        future : 'in %s',
        past   : '%s ago',
        s  : 'a few seconds',
        ss : '%d seconds',
        m  : 'a minute',
        mm : '%d minutes',
        h  : 'an hour',
        hh : '%d hours',
        d  : 'a day',
        dd : '%d days',
        M  : 'a month',
        MM : '%d months',
        y  : 'a year',
        yy : '%d years'
    };

    function relativeTime (number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return (isFunction(output)) ?
            output(number, withoutSuffix, string, isFuture) :
            output.replace(/%d/i, number);
    }

    function pastFuture (diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
    }

    var aliases = {};

    function addUnitAlias (unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }

    function normalizeUnits(units) {
        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    var priorities = {};

    function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
    }

    function getPrioritizedUnits(unitsObj) {
        var units = [];
        for (var u in unitsObj) {
            units.push({unit: u, priority: priorities[u]});
        }
        units.sort(function (a, b) {
            return a.priority - b.priority;
        });
        return units;
    }

    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
            zerosToFill = targetLength - absNumber.length,
            sign = number >= 0;
        return (sign ? (forceSign ? '+' : '') : '-') +
            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }

    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

    var formatFunctions = {};

    var formatTokenFunctions = {};

    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken (token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
            func = function () {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(func.apply(this, arguments), token);
            };
        }
    }

    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i, length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = '', i;
            for (i = 0; i < length; i++) {
                output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());
        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }

    var match1         = /\d/;            //       0 - 9
    var match2         = /\d\d/;          //      00 - 99
    var match3         = /\d{3}/;         //     000 - 999
    var match4         = /\d{4}/;         //    0000 - 9999
    var match6         = /[+-]?\d{6}/;    // -999999 - 999999
    var match1to2      = /\d\d?/;         //       0 - 99
    var match3to4      = /\d\d\d\d?/;     //     999 - 9999
    var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
    var match1to3      = /\d{1,3}/;       //       0 - 999
    var match1to4      = /\d{1,4}/;       //       0 - 9999
    var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

    var matchUnsigned  = /\d+/;           //       0 - inf
    var matchSigned    = /[+-]?\d+/;      //    -inf - inf

    var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
    var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

    // any word (or two) characters or numbers including two/three word month in arabic.
    // includes scottish gaelic two word and hyphenated months
    var matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;

    var regexes = {};

    function addRegexToken (token, regex, strictRegex) {
        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
            return (isStrict && strictRegex) ? strictRegex : regex;
        };
    }

    function getParseRegexForToken (token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }

        return regexes[token](config._strict, config._locale);
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
        return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        }));
    }

    function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    var tokens = {};

    function addParseToken (token, callback) {
        var i, func = callback;
        if (typeof token === 'string') {
            token = [token];
        }
        if (isNumber(callback)) {
            func = function (input, array) {
                array[callback] = toInt(input);
            };
        }
        for (i = 0; i < token.length; i++) {
            tokens[token[i]] = func;
        }
    }

    function addWeekParseToken (token, callback) {
        addParseToken(token, function (input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }

    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }

    var YEAR = 0;
    var MONTH = 1;
    var DATE = 2;
    var HOUR = 3;
    var MINUTE = 4;
    var SECOND = 5;
    var MILLISECOND = 6;
    var WEEK = 7;
    var WEEKDAY = 8;

    // FORMATTING

    addFormatToken('Y', 0, 0, function () {
        var y = this.year();
        return y <= 9999 ? '' + y : '+' + y;
    });

    addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
    });

    addFormatToken(0, ['YYYY',   4],       0, 'year');
    addFormatToken(0, ['YYYYY',  5],       0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

    // ALIASES

    addUnitAlias('year', 'y');

    // PRIORITIES

    addUnitPriority('year', 1);

    // PARSING

    addRegexToken('Y',      matchSigned);
    addRegexToken('YY',     match1to2, match2);
    addRegexToken('YYYY',   match1to4, match4);
    addRegexToken('YYYYY',  match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);

    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YYYY', function (input, array) {
        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken('Y', function (input, array) {
        array[YEAR] = parseInt(input, 10);
    });

    // HELPERS

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    // HOOKS

    hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    // MOMENTS

    var getSetYear = makeGetSet('FullYear', true);

    function getIsLeapYear () {
        return isLeapYear(this.year());
    }

    function makeGetSet (unit, keepTime) {
        return function (value) {
            if (value != null) {
                set$1(this, unit, value);
                hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get(this, unit);
            }
        };
    }

    function get (mom, unit) {
        return mom.isValid() ?
            mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
    }

    function set$1 (mom, unit, value) {
        if (mom.isValid() && !isNaN(value)) {
            if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));
            }
            else {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
            }
        }
    }

    // MOMENTS

    function stringGet (units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units]();
        }
        return this;
    }


    function stringSet (units, value) {
        if (typeof units === 'object') {
            units = normalizeObjectUnits(units);
            var prioritized = getPrioritizedUnits(units);
            for (var i = 0; i < prioritized.length; i++) {
                this[prioritized[i].unit](units[prioritized[i].unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
                return this[units](value);
            }
        }
        return this;
    }

    function mod(n, x) {
        return ((n % x) + x) % x;
    }

    var indexOf;

    if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
    } else {
        indexOf = function (o) {
            // I know
            var i;
            for (i = 0; i < this.length; ++i) {
                if (this[i] === o) {
                    return i;
                }
            }
            return -1;
        };
    }

    function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
            return NaN;
        }
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1 ? (isLeapYear(year) ? 29 : 28) : (31 - modMonth % 7 % 2);
    }

    // FORMATTING

    addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
    });

    addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
    });

    addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
    });

    // ALIASES

    addUnitAlias('month', 'M');

    // PRIORITY

    addUnitPriority('month', 8);

    // PARSING

    addRegexToken('M',    match1to2);
    addRegexToken('MM',   match1to2, match2);
    addRegexToken('MMM',  function (isStrict, locale) {
        return locale.monthsShortRegex(isStrict);
    });
    addRegexToken('MMMM', function (isStrict, locale) {
        return locale.monthsRegex(isStrict);
    });

    addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
    });

    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });

    // LOCALES

    var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
    function localeMonths (m, format) {
        if (!m) {
            return isArray(this._months) ? this._months :
                this._months['standalone'];
        }
        return isArray(this._months) ? this._months[m.month()] :
            this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
    }

    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
    function localeMonthsShort (m, format) {
        if (!m) {
            return isArray(this._monthsShort) ? this._monthsShort :
                this._monthsShort['standalone'];
        }
        return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
            this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
    }

    function handleStrictParse(monthName, format, strict) {
        var i, ii, mom, llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
            // this is not used
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
            for (i = 0; i < 12; ++i) {
                mom = createUTC([2000, i]);
                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeMonthsParse (monthName, format, strict) {
        var i, mom, regex;

        if (this._monthsParseExact) {
            return handleStrictParse.call(this, monthName, format, strict);
        }

        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }

        // TODO: add sorting
        // Sorting makes sure if one month (or abbr) is a prefix of another
        // see sorting in computeMonthsParse
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
            }
            if (!strict && !this._monthsParse[i]) {
                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                return i;
            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function setMonth (mom, value) {
        var dayOfMonth;

        if (!mom.isValid()) {
            // No op
            return mom;
        }

        if (typeof value === 'string') {
            if (/^\d+$/.test(value)) {
                value = toInt(value);
            } else {
                value = mom.localeData().monthsParse(value);
                // TODO: Another silent failure?
                if (!isNumber(value)) {
                    return mom;
                }
            }
        }

        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function getSetMonth (value) {
        if (value != null) {
            setMonth(this, value);
            hooks.updateOffset(this, true);
            return this;
        } else {
            return get(this, 'Month');
        }
    }

    function getDaysInMonth () {
        return daysInMonth(this.year(), this.month());
    }

    var defaultMonthsShortRegex = matchWord;
    function monthsShortRegex (isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsShortStrictRegex;
            } else {
                return this._monthsShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsShortRegex')) {
                this._monthsShortRegex = defaultMonthsShortRegex;
            }
            return this._monthsShortStrictRegex && isStrict ?
                this._monthsShortStrictRegex : this._monthsShortRegex;
        }
    }

    var defaultMonthsRegex = matchWord;
    function monthsRegex (isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsStrictRegex;
            } else {
                return this._monthsRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsRegex')) {
                this._monthsRegex = defaultMonthsRegex;
            }
            return this._monthsStrictRegex && isStrict ?
                this._monthsStrictRegex : this._monthsRegex;
        }
    }

    function computeMonthsParse () {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var shortPieces = [], longPieces = [], mixedPieces = [],
            i, mom;
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            shortPieces.push(this.monthsShort(mom, ''));
            longPieces.push(this.months(mom, ''));
            mixedPieces.push(this.months(mom, ''));
            mixedPieces.push(this.monthsShort(mom, ''));
        }
        // Sorting makes sure if one month (or abbr) is a prefix of another it
        // will match the longer piece.
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 12; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
        }
        for (i = 0; i < 24; i++) {
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
    }

    function createDate (y, m, d, h, M, s, ms) {
        // can't just apply() to create a date:
        // https://stackoverflow.com/q/181348
        var date = new Date(y, m, d, h, M, s, ms);

        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
            date.setFullYear(y);
        }
        return date;
    }

    function createUTCDate (y) {
        var date = new Date(Date.UTC.apply(null, arguments));

        // the Date.UTC function remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
            date.setUTCFullYear(y);
        }
        return date;
    }

    // start-of-first-week - start-of-year
    function firstWeekOffset(year, dow, doy) {
        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
            fwd = 7 + dow - doy,
            // first-week day local weekday -- which local weekday is fwd
            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

        return -fwdlw + fwd - 1;
    }

    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7,
            weekOffset = firstWeekOffset(year, dow, doy),
            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
            resYear, resDayOfYear;

        if (dayOfYear <= 0) {
            resYear = year - 1;
            resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
            resYear = year + 1;
            resDayOfYear = dayOfYear - daysInYear(year);
        } else {
            resYear = year;
            resDayOfYear = dayOfYear;
        }

        return {
            year: resYear,
            dayOfYear: resDayOfYear
        };
    }

    function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
            resWeek, resYear;

        if (week < 1) {
            resYear = mom.year() - 1;
            resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
            resWeek = week - weeksInYear(mom.year(), dow, doy);
            resYear = mom.year() + 1;
        } else {
            resYear = mom.year();
            resWeek = week;
        }

        return {
            week: resWeek,
            year: resYear
        };
    }

    function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy),
            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }

    // FORMATTING

    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

    // ALIASES

    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');

    // PRIORITIES

    addUnitPriority('week', 5);
    addUnitPriority('isoWeek', 5);

    // PARSING

    addRegexToken('w',  match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W',  match1to2);
    addRegexToken('WW', match1to2, match2);

    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
        week[token.substr(0, 1)] = toInt(input);
    });

    // HELPERS

    // LOCALES

    function localeWeek (mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }

    var defaultLocaleWeek = {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    };

    function localeFirstDayOfWeek () {
        return this._week.dow;
    }

    function localeFirstDayOfYear () {
        return this._week.doy;
    }

    // MOMENTS

    function getSetWeek (input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    function getSetISOWeek (input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    // FORMATTING

    addFormatToken('d', 0, 'do', 'day');

    addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
    });

    addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
    });

    addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
    });

    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');

    // ALIASES

    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');

    // PRIORITY
    addUnitPriority('day', 11);
    addUnitPriority('weekday', 11);
    addUnitPriority('isoWeekday', 11);

    // PARSING

    addRegexToken('d',    match1to2);
    addRegexToken('e',    match1to2);
    addRegexToken('E',    match1to2);
    addRegexToken('dd',   function (isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict);
    });
    addRegexToken('ddd',   function (isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict);
    });
    addRegexToken('dddd',   function (isStrict, locale) {
        return locale.weekdaysRegex(isStrict);
    });

    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });

    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
    });

    // HELPERS

    function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
            return input;
        }

        if (!isNaN(input)) {
            return parseInt(input, 10);
        }

        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
            return input;
        }

        return null;
    }

    function parseIsoWeekday(input, locale) {
        if (typeof input === 'string') {
            return locale.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
    }

    // LOCALES

    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
    function localeWeekdays (m, format) {
        if (!m) {
            return isArray(this._weekdays) ? this._weekdays :
                this._weekdays['standalone'];
        }
        return isArray(this._weekdays) ? this._weekdays[m.day()] :
            this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
    }

    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
    function localeWeekdaysShort (m) {
        return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
    }

    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
    function localeWeekdaysMin (m) {
        return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
    }

    function handleStrictParse$1(weekdayName, format, strict) {
        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._minWeekdaysParse = [];

            for (i = 0; i < 7; ++i) {
                mom = createUTC([2000, 1]).day(i);
                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeWeekdaysParse (weekdayName, format, strict) {
        var i, mom, regex;

        if (this._weekdaysParseExact) {
            return handleStrictParse$1.call(this, weekdayName, format, strict);
        }

        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._minWeekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._fullWeekdaysParse = [];
        }

        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already

            mom = createUTC([2000, 1]).day(i);
            if (strict && !this._fullWeekdaysParse[i]) {
                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');
                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');
                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');
            }
            if (!this._weekdaysParse[i]) {
                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function getSetDayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }

    function getSetLocaleDayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }

    function getSetISODayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }

        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.

        if (input != null) {
            var weekday = parseIsoWeekday(input, this.localeData());
            return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
            return this.day() || 7;
        }
    }

    var defaultWeekdaysRegex = matchWord;
    function weekdaysRegex (isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysStrictRegex;
            } else {
                return this._weekdaysRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                this._weekdaysRegex = defaultWeekdaysRegex;
            }
            return this._weekdaysStrictRegex && isStrict ?
                this._weekdaysStrictRegex : this._weekdaysRegex;
        }
    }

    var defaultWeekdaysShortRegex = matchWord;
    function weekdaysShortRegex (isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysShortStrictRegex;
            } else {
                return this._weekdaysShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
            }
            return this._weekdaysShortStrictRegex && isStrict ?
                this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
        }
    }

    var defaultWeekdaysMinRegex = matchWord;
    function weekdaysMinRegex (isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysMinStrictRegex;
            } else {
                return this._weekdaysMinRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
            }
            return this._weekdaysMinStrictRegex && isStrict ?
                this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
        }
    }


    function computeWeekdaysParse () {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
            i, mom, minp, shortp, longp;
        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, 1]).day(i);
            minp = this.weekdaysMin(mom, '');
            shortp = this.weekdaysShort(mom, '');
            longp = this.weekdays(mom, '');
            minPieces.push(minp);
            shortPieces.push(shortp);
            longPieces.push(longp);
            mixedPieces.push(minp);
            mixedPieces.push(shortp);
            mixedPieces.push(longp);
        }
        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
        // will match the longer piece.
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 7; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;

        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
    }

    // FORMATTING

    function hFormat() {
        return this.hours() % 12 || 12;
    }

    function kFormat() {
        return this.hours() || 24;
    }

    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, hFormat);
    addFormatToken('k', ['kk', 2], 0, kFormat);

    addFormatToken('hmm', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });

    addFormatToken('hmmss', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2);
    });

    addFormatToken('Hmm', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
    });

    addFormatToken('Hmmss', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2);
    });

    function meridiem (token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
    }

    meridiem('a', true);
    meridiem('A', false);

    // ALIASES

    addUnitAlias('hour', 'h');

    // PRIORITY
    addUnitPriority('hour', 13);

    // PARSING

    function matchMeridiem (isStrict, locale) {
        return locale._meridiemParse;
    }

    addRegexToken('a',  matchMeridiem);
    addRegexToken('A',  matchMeridiem);
    addRegexToken('H',  match1to2);
    addRegexToken('h',  match1to2);
    addRegexToken('k',  match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);
    addRegexToken('kk', match1to2, match2);

    addRegexToken('hmm', match3to4);
    addRegexToken('hmmss', match5to6);
    addRegexToken('Hmm', match3to4);
    addRegexToken('Hmmss', match5to6);

    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['k', 'kk'], function (input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('Hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken('Hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
    });

    // LOCALES

    function localeIsPM (input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return ((input + '').toLowerCase().charAt(0) === 'p');
    }

    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
    function localeMeridiem (hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }


    // MOMENTS

    // Setting the hour should keep the time, because the user explicitly
    // specified which hour they want. So trying to maintain the same hour (in
    // a new timezone) makes sense. Adding/subtracting hours does not follow
    // this rule.
    var getSetHour = makeGetSet('Hours', true);

    var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,

        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,

        week: defaultLocaleWeek,

        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,

        meridiemParse: defaultLocaleMeridiemParse
    };

    // internal storage for locale config files
    var locales = {};
    var localeFamilies = {};
    var globalLocale;

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0, j, next, locale, split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return globalLocale;
    }

    function loadLocale(name) {
        var oldLocale = null;
        // TODO: Find a better way to register and load all the locales in Node
        if (!locales[name] && ('object' !== 'undefined') &&
                module && module.exports) {
            try {
                oldLocale = globalLocale._abbr;
                var aliasedRequire = commonjsRequire;
                aliasedRequire('./locale/' + name);
                getSetGlobalLocale(oldLocale);
            } catch (e) {}
        }
        return locales[name];
    }

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function getSetGlobalLocale (key, values) {
        var data;
        if (key) {
            if (isUndefined(values)) {
                data = getLocale(key);
            }
            else {
                data = defineLocale(key, values);
            }

            if (data) {
                // moment.duration._locale = moment._locale = data;
                globalLocale = data;
            }
            else {
                if ((typeof console !==  'undefined') && console.warn) {
                    //warn user if arguments are passed but the locale could not be set
                    console.warn('Locale ' + key +  ' not found. Did you forget to load it?');
                }
            }
        }

        return globalLocale._abbr;
    }

    function defineLocale (name, config) {
        if (config !== null) {
            var locale, parentConfig = baseConfig;
            config.abbr = name;
            if (locales[name] != null) {
                deprecateSimple('defineLocaleOverride',
                        'use moment.updateLocale(localeName, config) to change ' +
                        'an existing locale. moment.defineLocale(localeName, ' +
                        'config) should only be used for creating a new locale ' +
                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
                parentConfig = locales[name]._config;
            } else if (config.parentLocale != null) {
                if (locales[config.parentLocale] != null) {
                    parentConfig = locales[config.parentLocale]._config;
                } else {
                    locale = loadLocale(config.parentLocale);
                    if (locale != null) {
                        parentConfig = locale._config;
                    } else {
                        if (!localeFamilies[config.parentLocale]) {
                            localeFamilies[config.parentLocale] = [];
                        }
                        localeFamilies[config.parentLocale].push({
                            name: name,
                            config: config
                        });
                        return null;
                    }
                }
            }
            locales[name] = new Locale(mergeConfigs(parentConfig, config));

            if (localeFamilies[name]) {
                localeFamilies[name].forEach(function (x) {
                    defineLocale(x.name, x.config);
                });
            }

            // backwards compat for now: also set the locale
            // make sure we set the locale AFTER all child locales have been
            // created, so we won't end up with the child locale set.
            getSetGlobalLocale(name);


            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    }

    function updateLocale(name, config) {
        if (config != null) {
            var locale, tmpLocale, parentConfig = baseConfig;
            // MERGE
            tmpLocale = loadLocale(name);
            if (tmpLocale != null) {
                parentConfig = tmpLocale._config;
            }
            config = mergeConfigs(parentConfig, config);
            locale = new Locale(config);
            locale.parentLocale = locales[name];
            locales[name] = locale;

            // backwards compat for now: also set the locale
            getSetGlobalLocale(name);
        } else {
            // pass null for config to unupdate, useful for tests
            if (locales[name] != null) {
                if (locales[name].parentLocale != null) {
                    locales[name] = locales[name].parentLocale;
                } else if (locales[name] != null) {
                    delete locales[name];
                }
            }
        }
        return locales[name];
    }

    // returns locale data
    function getLocale (key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return globalLocale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    }

    function listLocales() {
        return keys(locales);
    }

    function checkOverflow (m) {
        var overflow;
        var a = m._a;

        if (a && getParsingFlags(m).overflow === -2) {
            overflow =
                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
                -1;

            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }
            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                overflow = WEEK;
            }
            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                overflow = WEEKDAY;
            }

            getParsingFlags(m).overflow = overflow;
        }

        return m;
    }

    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }

    function currentDateArray(config) {
        // hooks is actually the exported moment object
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray (config) {
        var i, date, input = [], currentDate, expectedWeekday, yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear != null) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

            if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }

            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
        }

        // Check for 24:00:00.000
        if (config._a[HOUR] === 24 &&
                config._a[MINUTE] === 0 &&
                config._a[SECOND] === 0 &&
                config._a[MILLISECOND] === 0) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();

        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
            config._a[HOUR] = 24;
        }

        // check for mismatching day of week
        if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
            getParsingFlags(config).weekdayMismatch = true;
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
            if (weekday < 1 || weekday > 7) {
                weekdayOverflow = true;
            }
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            var curWeek = weekOfYear(createLocal(), dow, doy);

            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

            // Default to current week.
            week = defaults(w.w, curWeek.week);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < 0 || weekday > 6) {
                    weekdayOverflow = true;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from begining of week
                weekday = w.e + dow;
                if (w.e < 0 || w.e > 6) {
                    weekdayOverflow = true;
                }
            } else {
                // default to begining of week
                weekday = dow;
            }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
            getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
            getParsingFlags(config)._overflowWeekday = true;
        } else {
            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
        }
    }

    // iso 8601 regex
    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
    var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

    var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

    var isoDates = [
        ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
        ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
        ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
        ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
        ['YYYY-DDD', /\d{4}-\d{3}/],
        ['YYYY-MM', /\d{4}-\d\d/, false],
        ['YYYYYYMMDD', /[+-]\d{10}/],
        ['YYYYMMDD', /\d{8}/],
        // YYYYMM is NOT allowed by the standard
        ['GGGG[W]WWE', /\d{4}W\d{3}/],
        ['GGGG[W]WW', /\d{4}W\d{2}/, false],
        ['YYYYDDD', /\d{7}/]
    ];

    // iso time formats and regexes
    var isoTimes = [
        ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
        ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
        ['HH:mm:ss', /\d\d:\d\d:\d\d/],
        ['HH:mm', /\d\d:\d\d/],
        ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
        ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
        ['HHmmss', /\d\d\d\d\d\d/],
        ['HHmm', /\d\d\d\d/],
        ['HH', /\d\d/]
    ];

    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

    // date from iso format
    function configFromISO(config) {
        var i, l,
            string = config._i,
            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
            allowTime, dateFormat, timeFormat, tzFormat;

        if (match) {
            getParsingFlags(config).iso = true;

            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(match[1])) {
                    dateFormat = isoDates[i][0];
                    allowTime = isoDates[i][2] !== false;
                    break;
                }
            }
            if (dateFormat == null) {
                config._isValid = false;
                return;
            }
            if (match[3]) {
                for (i = 0, l = isoTimes.length; i < l; i++) {
                    if (isoTimes[i][1].exec(match[3])) {
                        // match[2] should be 'T' or space
                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
                        break;
                    }
                }
                if (timeFormat == null) {
                    config._isValid = false;
                    return;
                }
            }
            if (!allowTime && timeFormat != null) {
                config._isValid = false;
                return;
            }
            if (match[4]) {
                if (tzRegex.exec(match[4])) {
                    tzFormat = 'Z';
                } else {
                    config._isValid = false;
                    return;
                }
            }
            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
    var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;

    function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
        var result = [
            untruncateYear(yearStr),
            defaultLocaleMonthsShort.indexOf(monthStr),
            parseInt(dayStr, 10),
            parseInt(hourStr, 10),
            parseInt(minuteStr, 10)
        ];

        if (secondStr) {
            result.push(parseInt(secondStr, 10));
        }

        return result;
    }

    function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) {
            return 2000 + year;
        } else if (year <= 999) {
            return 1900 + year;
        }
        return year;
    }

    function preprocessRFC2822(s) {
        // Remove comments and folding whitespace and replace multiple-spaces with a single space
        return s.replace(/\([^)]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
    }

    function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
            // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
                weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
            if (weekdayProvided !== weekdayActual) {
                getParsingFlags(config).weekdayMismatch = true;
                config._isValid = false;
                return false;
            }
        }
        return true;
    }

    var obsOffsets = {
        UT: 0,
        GMT: 0,
        EDT: -4 * 60,
        EST: -5 * 60,
        CDT: -5 * 60,
        CST: -6 * 60,
        MDT: -6 * 60,
        MST: -7 * 60,
        PDT: -7 * 60,
        PST: -8 * 60
    };

    function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
            return obsOffsets[obsOffset];
        } else if (militaryOffset) {
            // the only allowed military tz is Z
            return 0;
        } else {
            var hm = parseInt(numOffset, 10);
            var m = hm % 100, h = (hm - m) / 100;
            return h * 60 + m;
        }
    }

    // date and time from ref 2822 format
    function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i));
        if (match) {
            var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
            if (!checkWeekday(match[1], parsedArray, config)) {
                return;
            }

            config._a = parsedArray;
            config._tzm = calculateOffset(match[8], match[9], match[10]);

            config._d = createUTCDate.apply(null, config._a);
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

            getParsingFlags(config).rfc2822 = true;
        } else {
            config._isValid = false;
        }
    }

    // date from iso format or fallback
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);

        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }

        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        configFromRFC2822(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        // Final attempt, use Input Fallback
        hooks.createFromInputFallback(config);
    }

    hooks.createFromInputFallback = deprecate(
        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
        'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
        'discouraged and will be removed in an upcoming major release. Please refer to ' +
        'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
        function (config) {
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
        }
    );

    // constant that refers to the ISO standard
    hooks.ISO_8601 = function () {};

    // constant that refers to the RFC 2822 form
    hooks.RFC_2822 = function () {};

    // date from string and format string
    function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === hooks.ISO_8601) {
            configFromISO(config);
            return;
        }
        if (config._f === hooks.RFC_2822) {
            configFromRFC2822(config);
            return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i, parsedInput, tokens, token, skipped,
            stringLength = string.length,
            totalParsedInputLength = 0;

        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            // console.log('token', token, 'parsedInput', parsedInput,
            //         'regex', getParseRegexForToken(token, config));
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                }
                else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            }
            else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }

        // clear _12h flag if hour is <= 12
        if (config._a[HOUR] <= 12 &&
            getParsingFlags(config).bigHour === true &&
            config._a[HOUR] > 0) {
            getParsingFlags(config).bigHour = undefined;
        }

        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

        configFromArray(config);
        checkOverflow(config);
    }


    function meridiemFixWrap (locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
            // nothing to do
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            // this is not supposed to happen
            return hour;
        }
    }

    // date from string and array of format strings
    function configFromStringAndArray(config) {
        var tempConfig,
            bestMoment,

            scoreToBeat,
            i,
            currentScore;

        if (config._f.length === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);

            if (!isValid(tempConfig)) {
                continue;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += getParsingFlags(tempConfig).charsLeftOver;

            //or tokens
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

            getParsingFlags(tempConfig).score = currentScore;

            if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    function configFromObject(config) {
        if (config._d) {
            return;
        }

        var i = normalizeObjectUnits(config._i);
        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
            return obj && parseInt(obj, 10);
        });

        configFromArray(config);
    }

    function createFromConfig (config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, 'd');
            res._nextDay = undefined;
        }

        return res;
    }

    function prepareConfig (config) {
        var input = config._i,
            format = config._f;

        config._locale = config._locale || getLocale(config._l);

        if (input === null || (format === undefined && input === '')) {
            return createInvalid({nullInput: true});
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
            config._d = input;
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (format) {
            configFromStringAndFormat(config);
        }  else {
            configFromInput(config);
        }

        if (!isValid(config)) {
            config._d = null;
        }

        return config;
    }

    function configFromInput(config) {
        var input = config._i;
        if (isUndefined(input)) {
            config._d = new Date(hooks.now());
        } else if (isDate(input)) {
            config._d = new Date(input.valueOf());
        } else if (typeof input === 'string') {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (isObject(input)) {
            configFromObject(config);
        } else if (isNumber(input)) {
            // from milliseconds
            config._d = new Date(input);
        } else {
            hooks.createFromInputFallback(config);
        }
    }

    function createLocalOrUTC (input, format, locale, strict, isUTC) {
        var c = {};

        if (locale === true || locale === false) {
            strict = locale;
            locale = undefined;
        }

        if ((isObject(input) && isObjectEmpty(input)) ||
                (isArray(input) && input.length === 0)) {
            input = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;

        return createFromConfig(c);
    }

    function createLocal (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }

    var prototypeMin = deprecate(
        'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
        function () {
            var other = createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
                return other < this ? this : other;
            } else {
                return createInvalid();
            }
        }
    );

    var prototypeMax = deprecate(
        'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
        function () {
            var other = createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
                return other > this ? this : other;
            } else {
                return createInvalid();
            }
        }
    );

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    // TODO: Use [].sort instead?
    function min () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    }

    function max () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    }

    var now = function () {
        return Date.now ? Date.now() : +(new Date());
    };

    var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];

    function isDurationValid(m) {
        for (var key in m) {
            if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
                return false;
            }
        }

        var unitHasDecimal = false;
        for (var i = 0; i < ordering.length; ++i) {
            if (m[ordering[i]]) {
                if (unitHasDecimal) {
                    return false; // only allow non-integers for smallest unit
                }
                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                    unitHasDecimal = true;
                }
            }
        }

        return true;
    }

    function isValid$1() {
        return this._isValid;
    }

    function createInvalid$1() {
        return createDuration(NaN);
    }

    function Duration (duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        this._isValid = isDurationValid(normalizedInput);

        // representation for dateAddRemove
        this._milliseconds = +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days +
            weeks * 7;
        // It is impossible to translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months +
            quarters * 3 +
            years * 12;

        this._data = {};

        this._locale = getLocale();

        this._bubble();
    }

    function isDuration (obj) {
        return obj instanceof Duration;
    }

    function absRound (number) {
        if (number < 0) {
            return Math.round(-1 * number) * -1;
        } else {
            return Math.round(number);
        }
    }

    // FORMATTING

    function offset (token, separator) {
        addFormatToken(token, 0, 0, function () {
            var offset = this.utcOffset();
            var sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
        });
    }

    offset('Z', ':');
    offset('ZZ', '');

    // PARSING

    addRegexToken('Z',  matchShortOffset);
    addRegexToken('ZZ', matchShortOffset);
    addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
    });

    // HELPERS

    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;

    function offsetFromString(matcher, string) {
        var matches = (string || '').match(matcher);

        if (matches === null) {
            return null;
        }

        var chunk   = matches[matches.length - 1] || [];
        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        var minutes = +(parts[1] * 60) + toInt(parts[2]);

        return minutes === 0 ?
          0 :
          parts[0] === '+' ? minutes : -minutes;
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(res._d.valueOf() + diff);
            hooks.updateOffset(res, false);
            return res;
        } else {
            return createLocal(input).local();
        }
    }

    function getDateOffset (m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
    }

    // HOOKS

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    hooks.updateOffset = function () {};

    // MOMENTS

    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset (input, keepLocalTime, keepMinutes) {
        var offset = this._offset || 0,
            localAdjust;
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(matchShortOffset, input);
                if (input === null) {
                    return this;
                }
            } else if (Math.abs(input) < 16 && !keepMinutes) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, 'm');
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    addSubtract(this, createDuration(input - offset, 'm'), 1, false);
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }

    function getSetZone (input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') {
                input = -input;
            }

            this.utcOffset(input, keepLocalTime);

            return this;
        } else {
            return -this.utcOffset();
        }
    }

    function setOffsetToUTC (keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }

    function setOffsetToLocal (keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;

            if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
            }
        }
        return this;
    }

    function setOffsetToParsedOffset () {
        if (this._tzm != null) {
            this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === 'string') {
            var tZone = offsetFromString(matchOffset, this._i);
            if (tZone != null) {
                this.utcOffset(tZone);
            }
            else {
                this.utcOffset(0, true);
            }
        }
        return this;
    }

    function hasAlignedHourOffset (input) {
        if (!this.isValid()) {
            return false;
        }
        input = input ? createLocal(input).utcOffset() : 0;

        return (this.utcOffset() - input) % 60 === 0;
    }

    function isDaylightSavingTime () {
        return (
            this.utcOffset() > this.clone().month(0).utcOffset() ||
            this.utcOffset() > this.clone().month(5).utcOffset()
        );
    }

    function isDaylightSavingTimeShifted () {
        if (!isUndefined(this._isDSTShifted)) {
            return this._isDSTShifted;
        }

        var c = {};

        copyConfig(c, this);
        c = prepareConfig(c);

        if (c._a) {
            var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
            this._isDSTShifted = this.isValid() &&
                compareArrays(c._a, other.toArray()) > 0;
        } else {
            this._isDSTShifted = false;
        }

        return this._isDSTShifted;
    }

    function isLocal () {
        return this.isValid() ? !this._isUTC : false;
    }

    function isUtcOffset () {
        return this.isValid() ? this._isUTC : false;
    }

    function isUtc () {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }

    // ASP.NET json date format regex
    var aspNetRegex = /^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
    // and further modified to allow for strings containing both week and day
    var isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

    function createDuration (input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            diffRes;

        if (isDuration(input)) {
            duration = {
                ms : input._milliseconds,
                d  : input._days,
                M  : input._months
            };
        } else if (isNumber(input)) {
            duration = {};
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        } else if (!!(match = aspNetRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y  : 0,
                d  : toInt(match[DATE])                         * sign,
                h  : toInt(match[HOUR])                         * sign,
                m  : toInt(match[MINUTE])                       * sign,
                s  : toInt(match[SECOND])                       * sign,
                ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
            };
        } else if (!!(match = isoRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : (match[1] === '+') ? 1 : 1;
            duration = {
                y : parseIso(match[2], sign),
                M : parseIso(match[3], sign),
                w : parseIso(match[4], sign),
                d : parseIso(match[5], sign),
                h : parseIso(match[6], sign),
                m : parseIso(match[7], sign),
                s : parseIso(match[8], sign)
            };
        } else if (duration == null) {// checks for null or undefined
            duration = {};
        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
            diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }

        return ret;
    }

    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;

    function parseIso (inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
    }

    function positiveMomentsDifference(base, other) {
        var res = {milliseconds: 0, months: 0};

        res.months = other.month() - base.month() +
            (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
            return {milliseconds: 0, months: 0};
        }

        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
                'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
                tmp = val; val = period; period = tmp;
            }

            val = typeof val === 'string' ? +val : val;
            dur = createDuration(val, period);
            addSubtract(this, dur, direction);
            return this;
        };
    }

    function addSubtract (mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = absRound(duration._days),
            months = absRound(duration._months);

        if (!mom.isValid()) {
            // No op
            return;
        }

        updateOffset = updateOffset == null ? true : updateOffset;

        if (months) {
            setMonth(mom, get(mom, 'Month') + months * isAdding);
        }
        if (days) {
            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
        }
        if (milliseconds) {
            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
        }
        if (updateOffset) {
            hooks.updateOffset(mom, days || months);
        }
    }

    var add      = createAdder(1, 'add');
    var subtract = createAdder(-1, 'subtract');

    function getCalendarFormat(myMoment, now) {
        var diff = myMoment.diff(now, 'days', true);
        return diff < -6 ? 'sameElse' :
                diff < -1 ? 'lastWeek' :
                diff < 0 ? 'lastDay' :
                diff < 1 ? 'sameDay' :
                diff < 2 ? 'nextDay' :
                diff < 7 ? 'nextWeek' : 'sameElse';
    }

    function calendar$1 (time, formats) {
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || createLocal(),
            sod = cloneWithOffset(now, this).startOf('day'),
            format = hooks.calendarFormat(this, sod) || 'sameElse';

        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

        return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
    }

    function clone () {
        return new Moment(this);
    }

    function isAfter (input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
        if (units === 'millisecond') {
            return this.valueOf() > localInput.valueOf();
        } else {
            return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
    }

    function isBefore (input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
        if (units === 'millisecond') {
            return this.valueOf() < localInput.valueOf();
        } else {
            return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
    }

    function isBetween (from, to, units, inclusivity) {
        inclusivity = inclusivity || '()';
        return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&
            (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
    }

    function isSame (input, units) {
        var localInput = isMoment(input) ? input : createLocal(input),
            inputMs;
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units || 'millisecond');
        if (units === 'millisecond') {
            return this.valueOf() === localInput.valueOf();
        } else {
            inputMs = localInput.valueOf();
            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
        }
    }

    function isSameOrAfter (input, units) {
        return this.isSame(input, units) || this.isAfter(input,units);
    }

    function isSameOrBefore (input, units) {
        return this.isSame(input, units) || this.isBefore(input,units);
    }

    function diff (input, units, asFloat) {
        var that,
            zoneDelta,
            output;

        if (!this.isValid()) {
            return NaN;
        }

        that = cloneWithOffset(input, this);

        if (!that.isValid()) {
            return NaN;
        }

        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

        units = normalizeUnits(units);

        switch (units) {
            case 'year': output = monthDiff(this, that) / 12; break;
            case 'month': output = monthDiff(this, that); break;
            case 'quarter': output = monthDiff(this, that) / 3; break;
            case 'second': output = (this - that) / 1e3; break; // 1000
            case 'minute': output = (this - that) / 6e4; break; // 1000 * 60
            case 'hour': output = (this - that) / 36e5; break; // 1000 * 60 * 60
            case 'day': output = (this - that - zoneDelta) / 864e5; break; // 1000 * 60 * 60 * 24, negate dst
            case 'week': output = (this - that - zoneDelta) / 6048e5; break; // 1000 * 60 * 60 * 24 * 7, negate dst
            default: output = this - that;
        }

        return asFloat ? output : absFloor(output);
    }

    function monthDiff (a, b) {
        // difference in months
        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
            // b is in (anchor - 1 month, anchor + 1 month)
            anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2, adjust;

        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }

        //check for negative zero, return zero if negative zero
        return -(wholeMonthDiff + adjust) || 0;
    }

    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

    function toString () {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }

    function toISOString(keepOffset) {
        if (!this.isValid()) {
            return null;
        }
        var utc = keepOffset !== true;
        var m = utc ? this.clone().utc() : this;
        if (m.year() < 0 || m.year() > 9999) {
            return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
        }
        if (isFunction(Date.prototype.toISOString)) {
            // native implementation is ~50x faster, use it when we can
            if (utc) {
                return this.toDate().toISOString();
            } else {
                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));
            }
        }
        return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
    }

    /**
     * Return a human readable representation of a moment that can
     * also be evaluated to get a new moment which is the same
     *
     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
     */
    function inspect () {
        if (!this.isValid()) {
            return 'moment.invalid(/* ' + this._i + ' */)';
        }
        var func = 'moment';
        var zone = '';
        if (!this.isLocal()) {
            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
            zone = 'Z';
        }
        var prefix = '[' + func + '("]';
        var year = (0 <= this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
        var datetime = '-MM-DD[T]HH:mm:ss.SSS';
        var suffix = zone + '[")]';

        return this.format(prefix + year + datetime + suffix);
    }

    function format (inputString) {
        if (!inputString) {
            inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
    }

    function from (time, withoutSuffix) {
        if (this.isValid() &&
                ((isMoment(time) && time.isValid()) ||
                 createLocal(time).isValid())) {
            return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function fromNow (withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
    }

    function to (time, withoutSuffix) {
        if (this.isValid() &&
                ((isMoment(time) && time.isValid()) ||
                 createLocal(time).isValid())) {
            return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function toNow (withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
    }

    // If passed a locale key, it will set the locale for this
    // instance.  Otherwise, it will return the locale configuration
    // variables for this instance.
    function locale (key) {
        var newLocaleData;

        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }

    var lang = deprecate(
        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
        function (key) {
            if (key === undefined) {
                return this.localeData();
            } else {
                return this.locale(key);
            }
        }
    );

    function localeData () {
        return this._locale;
    }

    function startOf (units) {
        units = normalizeUnits(units);
        // the following switch intentionally omits break keywords
        // to utilize falling through the cases.
        switch (units) {
            case 'year':
                this.month(0);
                /* falls through */
            case 'quarter':
            case 'month':
                this.date(1);
                /* falls through */
            case 'week':
            case 'isoWeek':
            case 'day':
            case 'date':
                this.hours(0);
                /* falls through */
            case 'hour':
                this.minutes(0);
                /* falls through */
            case 'minute':
                this.seconds(0);
                /* falls through */
            case 'second':
                this.milliseconds(0);
        }

        // weeks are a special case
        if (units === 'week') {
            this.weekday(0);
        }
        if (units === 'isoWeek') {
            this.isoWeekday(1);
        }

        // quarters are also special
        if (units === 'quarter') {
            this.month(Math.floor(this.month() / 3) * 3);
        }

        return this;
    }

    function endOf (units) {
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond') {
            return this;
        }

        // 'date' is an alias for 'day', so it should be considered as such.
        if (units === 'date') {
            units = 'day';
        }

        return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
    }

    function valueOf () {
        return this._d.valueOf() - ((this._offset || 0) * 60000);
    }

    function unix () {
        return Math.floor(this.valueOf() / 1000);
    }

    function toDate () {
        return new Date(this.valueOf());
    }

    function toArray () {
        var m = this;
        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
    }

    function toObject () {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds()
        };
    }

    function toJSON () {
        // new Date(NaN).toJSON() === null
        return this.isValid() ? this.toISOString() : null;
    }

    function isValid$2 () {
        return isValid(this);
    }

    function parsingFlags () {
        return extend({}, getParsingFlags(this));
    }

    function invalidAt () {
        return getParsingFlags(this).overflow;
    }

    function creationData() {
        return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict
        };
    }

    // FORMATTING

    addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
    });

    addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
    });

    function addWeekYearFormatToken (token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
    }

    addWeekYearFormatToken('gggg',     'weekYear');
    addWeekYearFormatToken('ggggg',    'weekYear');
    addWeekYearFormatToken('GGGG',  'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

    // ALIASES

    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');

    // PRIORITY

    addUnitPriority('weekYear', 1);
    addUnitPriority('isoWeekYear', 1);


    // PARSING

    addRegexToken('G',      matchSigned);
    addRegexToken('g',      matchSigned);
    addRegexToken('GG',     match1to2, match2);
    addRegexToken('gg',     match1to2, match2);
    addRegexToken('GGGG',   match1to4, match4);
    addRegexToken('gggg',   match1to4, match4);
    addRegexToken('GGGGG',  match1to6, match6);
    addRegexToken('ggggg',  match1to6, match6);

    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
        week[token.substr(0, 2)] = toInt(input);
    });

    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
        week[token] = hooks.parseTwoDigitYear(input);
    });

    // MOMENTS

    function getSetWeekYear (input) {
        return getSetWeekYearHelper.call(this,
                input,
                this.week(),
                this.weekday(),
                this.localeData()._week.dow,
                this.localeData()._week.doy);
    }

    function getSetISOWeekYear (input) {
        return getSetWeekYearHelper.call(this,
                input, this.isoWeek(), this.isoWeekday(), 1, 4);
    }

    function getISOWeeksInYear () {
        return weeksInYear(this.year(), 1, 4);
    }

    function getWeeksInYear () {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }

    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
            return weekOfYear(this, dow, doy).year;
        } else {
            weeksTarget = weeksInYear(input, dow, doy);
            if (week > weeksTarget) {
                week = weeksTarget;
            }
            return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
    }

    function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
    }

    // FORMATTING

    addFormatToken('Q', 0, 'Qo', 'quarter');

    // ALIASES

    addUnitAlias('quarter', 'Q');

    // PRIORITY

    addUnitPriority('quarter', 7);

    // PARSING

    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });

    // MOMENTS

    function getSetQuarter (input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }

    // FORMATTING

    addFormatToken('D', ['DD', 2], 'Do', 'date');

    // ALIASES

    addUnitAlias('date', 'D');

    // PRIORITY
    addUnitPriority('date', 9);

    // PARSING

    addRegexToken('D',  match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
        // TODO: Remove "ordinalParse" fallback in next major release.
        return isStrict ?
          (locale._dayOfMonthOrdinalParse || locale._ordinalParse) :
          locale._dayOfMonthOrdinalParseLenient;
    });

    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
    });

    // MOMENTS

    var getSetDayOfMonth = makeGetSet('Date', true);

    // FORMATTING

    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

    // ALIASES

    addUnitAlias('dayOfYear', 'DDD');

    // PRIORITY
    addUnitPriority('dayOfYear', 4);

    // PARSING

    addRegexToken('DDD',  match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
    });

    // HELPERS

    // MOMENTS

    function getSetDayOfYear (input) {
        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
    }

    // FORMATTING

    addFormatToken('m', ['mm', 2], 0, 'minute');

    // ALIASES

    addUnitAlias('minute', 'm');

    // PRIORITY

    addUnitPriority('minute', 14);

    // PARSING

    addRegexToken('m',  match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);

    // MOMENTS

    var getSetMinute = makeGetSet('Minutes', false);

    // FORMATTING

    addFormatToken('s', ['ss', 2], 0, 'second');

    // ALIASES

    addUnitAlias('second', 's');

    // PRIORITY

    addUnitPriority('second', 15);

    // PARSING

    addRegexToken('s',  match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);

    // MOMENTS

    var getSetSecond = makeGetSet('Seconds', false);

    // FORMATTING

    addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
    });

    addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
    });

    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
    });
    addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
    });
    addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1000000;
    });


    // ALIASES

    addUnitAlias('millisecond', 'ms');

    // PRIORITY

    addUnitPriority('millisecond', 16);

    // PARSING

    addRegexToken('S',    match1to3, match1);
    addRegexToken('SS',   match1to3, match2);
    addRegexToken('SSS',  match1to3, match3);

    var token;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
    }

    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }

    for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
    }
    // MOMENTS

    var getSetMillisecond = makeGetSet('Milliseconds', false);

    // FORMATTING

    addFormatToken('z',  0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');

    // MOMENTS

    function getZoneAbbr () {
        return this._isUTC ? 'UTC' : '';
    }

    function getZoneName () {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }

    var proto = Moment.prototype;

    proto.add               = add;
    proto.calendar          = calendar$1;
    proto.clone             = clone;
    proto.diff              = diff;
    proto.endOf             = endOf;
    proto.format            = format;
    proto.from              = from;
    proto.fromNow           = fromNow;
    proto.to                = to;
    proto.toNow             = toNow;
    proto.get               = stringGet;
    proto.invalidAt         = invalidAt;
    proto.isAfter           = isAfter;
    proto.isBefore          = isBefore;
    proto.isBetween         = isBetween;
    proto.isSame            = isSame;
    proto.isSameOrAfter     = isSameOrAfter;
    proto.isSameOrBefore    = isSameOrBefore;
    proto.isValid           = isValid$2;
    proto.lang              = lang;
    proto.locale            = locale;
    proto.localeData        = localeData;
    proto.max               = prototypeMax;
    proto.min               = prototypeMin;
    proto.parsingFlags      = parsingFlags;
    proto.set               = stringSet;
    proto.startOf           = startOf;
    proto.subtract          = subtract;
    proto.toArray           = toArray;
    proto.toObject          = toObject;
    proto.toDate            = toDate;
    proto.toISOString       = toISOString;
    proto.inspect           = inspect;
    proto.toJSON            = toJSON;
    proto.toString          = toString;
    proto.unix              = unix;
    proto.valueOf           = valueOf;
    proto.creationData      = creationData;
    proto.year       = getSetYear;
    proto.isLeapYear = getIsLeapYear;
    proto.weekYear    = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;
    proto.quarter = proto.quarters = getSetQuarter;
    proto.month       = getSetMonth;
    proto.daysInMonth = getDaysInMonth;
    proto.week           = proto.weeks        = getSetWeek;
    proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;
    proto.weeksInYear    = getWeeksInYear;
    proto.isoWeeksInYear = getISOWeeksInYear;
    proto.date       = getSetDayOfMonth;
    proto.day        = proto.days             = getSetDayOfWeek;
    proto.weekday    = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear  = getSetDayOfYear;
    proto.hour = proto.hours = getSetHour;
    proto.minute = proto.minutes = getSetMinute;
    proto.second = proto.seconds = getSetSecond;
    proto.millisecond = proto.milliseconds = getSetMillisecond;
    proto.utcOffset            = getSetOffset;
    proto.utc                  = setOffsetToUTC;
    proto.local                = setOffsetToLocal;
    proto.parseZone            = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST                = isDaylightSavingTime;
    proto.isLocal              = isLocal;
    proto.isUtcOffset          = isUtcOffset;
    proto.isUtc                = isUtc;
    proto.isUTC                = isUtc;
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;
    proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
    proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
    proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
    proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
    proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

    function createUnix (input) {
        return createLocal(input * 1000);
    }

    function createInZone () {
        return createLocal.apply(null, arguments).parseZone();
    }

    function preParsePostFormat (string) {
        return string;
    }

    var proto$1 = Locale.prototype;

    proto$1.calendar        = calendar;
    proto$1.longDateFormat  = longDateFormat;
    proto$1.invalidDate     = invalidDate;
    proto$1.ordinal         = ordinal;
    proto$1.preparse        = preParsePostFormat;
    proto$1.postformat      = preParsePostFormat;
    proto$1.relativeTime    = relativeTime;
    proto$1.pastFuture      = pastFuture;
    proto$1.set             = set;

    proto$1.months            =        localeMonths;
    proto$1.monthsShort       =        localeMonthsShort;
    proto$1.monthsParse       =        localeMonthsParse;
    proto$1.monthsRegex       = monthsRegex;
    proto$1.monthsShortRegex  = monthsShortRegex;
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;

    proto$1.weekdays       =        localeWeekdays;
    proto$1.weekdaysMin    =        localeWeekdaysMin;
    proto$1.weekdaysShort  =        localeWeekdaysShort;
    proto$1.weekdaysParse  =        localeWeekdaysParse;

    proto$1.weekdaysRegex       =        weekdaysRegex;
    proto$1.weekdaysShortRegex  =        weekdaysShortRegex;
    proto$1.weekdaysMinRegex    =        weekdaysMinRegex;

    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;

    function get$1 (format, index, field, setter) {
        var locale = getLocale();
        var utc = createUTC().set(setter, index);
        return locale[field](utc, format);
    }

    function listMonthsImpl (format, index, field) {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';

        if (index != null) {
            return get$1(format, index, field, 'month');
        }

        var i;
        var out = [];
        for (i = 0; i < 12; i++) {
            out[i] = get$1(format, i, field, 'month');
        }
        return out;
    }

    // ()
    // (5)
    // (fmt, 5)
    // (fmt)
    // (true)
    // (true, 5)
    // (true, fmt, 5)
    // (true, fmt)
    function listWeekdaysImpl (localeSorted, format, index, field) {
        if (typeof localeSorted === 'boolean') {
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        } else {
            format = localeSorted;
            index = format;
            localeSorted = false;

            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        }

        var locale = getLocale(),
            shift = localeSorted ? locale._week.dow : 0;

        if (index != null) {
            return get$1(format, (index + shift) % 7, field, 'day');
        }

        var i;
        var out = [];
        for (i = 0; i < 7; i++) {
            out[i] = get$1(format, (i + shift) % 7, field, 'day');
        }
        return out;
    }

    function listMonths (format, index) {
        return listMonthsImpl(format, index, 'months');
    }

    function listMonthsShort (format, index) {
        return listMonthsImpl(format, index, 'monthsShort');
    }

    function listWeekdays (localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
    }

    function listWeekdaysShort (localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
    }

    function listWeekdaysMin (localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
    }

    getSetGlobalLocale('en', {
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (toInt(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });

    // Side effect imports

    hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
    hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);

    var mathAbs = Math.abs;

    function abs () {
        var data           = this._data;

        this._milliseconds = mathAbs(this._milliseconds);
        this._days         = mathAbs(this._days);
        this._months       = mathAbs(this._months);

        data.milliseconds  = mathAbs(data.milliseconds);
        data.seconds       = mathAbs(data.seconds);
        data.minutes       = mathAbs(data.minutes);
        data.hours         = mathAbs(data.hours);
        data.months        = mathAbs(data.months);
        data.years         = mathAbs(data.years);

        return this;
    }

    function addSubtract$1 (duration, input, value, direction) {
        var other = createDuration(input, value);

        duration._milliseconds += direction * other._milliseconds;
        duration._days         += direction * other._days;
        duration._months       += direction * other._months;

        return duration._bubble();
    }

    // supports only 2.0-style add(1, 's') or add(duration)
    function add$1 (input, value) {
        return addSubtract$1(this, input, value, 1);
    }

    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function subtract$1 (input, value) {
        return addSubtract$1(this, input, value, -1);
    }

    function absCeil (number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    }

    function bubble () {
        var milliseconds = this._milliseconds;
        var days         = this._days;
        var months       = this._months;
        var data         = this._data;
        var seconds, minutes, hours, years, monthsFromDays;

        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
                (milliseconds <= 0 && days <= 0 && months <= 0))) {
            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
            days = 0;
            months = 0;
        }

        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;

        seconds           = absFloor(milliseconds / 1000);
        data.seconds      = seconds % 60;

        minutes           = absFloor(seconds / 60);
        data.minutes      = minutes % 60;

        hours             = absFloor(minutes / 60);
        data.hours        = hours % 24;

        days += absFloor(hours / 24);

        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        data.days   = days;
        data.months = months;
        data.years  = years;

        return this;
    }

    function daysToMonths (days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return days * 4800 / 146097;
    }

    function monthsToDays (months) {
        // the reverse of daysToMonths
        return months * 146097 / 4800;
    }

    function as (units) {
        if (!this.isValid()) {
            return NaN;
        }
        var days;
        var months;
        var milliseconds = this._milliseconds;

        units = normalizeUnits(units);

        if (units === 'month' || units === 'year') {
            days   = this._days   + milliseconds / 864e5;
            months = this._months + daysToMonths(days);
            return units === 'month' ? months : months / 12;
        } else {
            // handle milliseconds separately because of floating point math errors (issue #1867)
            days = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
                case 'week'   : return days / 7     + milliseconds / 6048e5;
                case 'day'    : return days         + milliseconds / 864e5;
                case 'hour'   : return days * 24    + milliseconds / 36e5;
                case 'minute' : return days * 1440  + milliseconds / 6e4;
                case 'second' : return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
                default: throw new Error('Unknown unit ' + units);
            }
        }
    }

    // TODO: Use this.as('ms')?
    function valueOf$1 () {
        if (!this.isValid()) {
            return NaN;
        }
        return (
            this._milliseconds +
            this._days * 864e5 +
            (this._months % 12) * 2592e6 +
            toInt(this._months / 12) * 31536e6
        );
    }

    function makeAs (alias) {
        return function () {
            return this.as(alias);
        };
    }

    var asMilliseconds = makeAs('ms');
    var asSeconds      = makeAs('s');
    var asMinutes      = makeAs('m');
    var asHours        = makeAs('h');
    var asDays         = makeAs('d');
    var asWeeks        = makeAs('w');
    var asMonths       = makeAs('M');
    var asYears        = makeAs('y');

    function clone$1 () {
        return createDuration(this);
    }

    function get$2 (units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + 's']() : NaN;
    }

    function makeGetter(name) {
        return function () {
            return this.isValid() ? this._data[name] : NaN;
        };
    }

    var milliseconds = makeGetter('milliseconds');
    var seconds      = makeGetter('seconds');
    var minutes      = makeGetter('minutes');
    var hours        = makeGetter('hours');
    var days         = makeGetter('days');
    var months       = makeGetter('months');
    var years        = makeGetter('years');

    function weeks () {
        return absFloor(this.days() / 7);
    }

    var round = Math.round;
    var thresholds = {
        ss: 44,         // a few seconds to seconds
        s : 45,         // seconds to minute
        m : 45,         // minutes to hour
        h : 22,         // hours to day
        d : 26,         // days to month
        M : 11          // months to year
    };

    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function relativeTime$1 (posNegDuration, withoutSuffix, locale) {
        var duration = createDuration(posNegDuration).abs();
        var seconds  = round(duration.as('s'));
        var minutes  = round(duration.as('m'));
        var hours    = round(duration.as('h'));
        var days     = round(duration.as('d'));
        var months   = round(duration.as('M'));
        var years    = round(duration.as('y'));

        var a = seconds <= thresholds.ss && ['s', seconds]  ||
                seconds < thresholds.s   && ['ss', seconds] ||
                minutes <= 1             && ['m']           ||
                minutes < thresholds.m   && ['mm', minutes] ||
                hours   <= 1             && ['h']           ||
                hours   < thresholds.h   && ['hh', hours]   ||
                days    <= 1             && ['d']           ||
                days    < thresholds.d   && ['dd', days]    ||
                months  <= 1             && ['M']           ||
                months  < thresholds.M   && ['MM', months]  ||
                years   <= 1             && ['y']           || ['yy', years];

        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }

    // This function allows you to set the rounding function for relative time strings
    function getSetRelativeTimeRounding (roundingFunction) {
        if (roundingFunction === undefined) {
            return round;
        }
        if (typeof(roundingFunction) === 'function') {
            round = roundingFunction;
            return true;
        }
        return false;
    }

    // This function allows you to set a threshold for relative time strings
    function getSetRelativeTimeThreshold (threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        if (threshold === 's') {
            thresholds.ss = limit - 1;
        }
        return true;
    }

    function humanize (withSuffix) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var locale = this.localeData();
        var output = relativeTime$1(this, !withSuffix, locale);

        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }

        return locale.postformat(output);
    }

    var abs$1 = Math.abs;

    function sign(x) {
        return ((x > 0) - (x < 0)) || +x;
    }

    function toISOString$1() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var seconds = abs$1(this._milliseconds) / 1000;
        var days         = abs$1(this._days);
        var months       = abs$1(this._months);
        var minutes, hours, years;

        // 3600 seconds -> 60 minutes -> 1 hour
        minutes           = absFloor(seconds / 60);
        hours             = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;

        // 12 months -> 1 year
        years  = absFloor(months / 12);
        months %= 12;


        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        var Y = years;
        var M = months;
        var D = days;
        var h = hours;
        var m = minutes;
        var s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
        var total = this.asSeconds();

        if (!total) {
            // this is the same as C#'s (Noda) and python (isodate)...
            // but not other JS (goog.date)
            return 'P0D';
        }

        var totalSign = total < 0 ? '-' : '';
        var ymSign = sign(this._months) !== sign(total) ? '-' : '';
        var daysSign = sign(this._days) !== sign(total) ? '-' : '';
        var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

        return totalSign + 'P' +
            (Y ? ymSign + Y + 'Y' : '') +
            (M ? ymSign + M + 'M' : '') +
            (D ? daysSign + D + 'D' : '') +
            ((h || m || s) ? 'T' : '') +
            (h ? hmsSign + h + 'H' : '') +
            (m ? hmsSign + m + 'M' : '') +
            (s ? hmsSign + s + 'S' : '');
    }

    var proto$2 = Duration.prototype;

    proto$2.isValid        = isValid$1;
    proto$2.abs            = abs;
    proto$2.add            = add$1;
    proto$2.subtract       = subtract$1;
    proto$2.as             = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds      = asSeconds;
    proto$2.asMinutes      = asMinutes;
    proto$2.asHours        = asHours;
    proto$2.asDays         = asDays;
    proto$2.asWeeks        = asWeeks;
    proto$2.asMonths       = asMonths;
    proto$2.asYears        = asYears;
    proto$2.valueOf        = valueOf$1;
    proto$2._bubble        = bubble;
    proto$2.clone          = clone$1;
    proto$2.get            = get$2;
    proto$2.milliseconds   = milliseconds;
    proto$2.seconds        = seconds;
    proto$2.minutes        = minutes;
    proto$2.hours          = hours;
    proto$2.days           = days;
    proto$2.weeks          = weeks;
    proto$2.months         = months;
    proto$2.years          = years;
    proto$2.humanize       = humanize;
    proto$2.toISOString    = toISOString$1;
    proto$2.toString       = toISOString$1;
    proto$2.toJSON         = toISOString$1;
    proto$2.locale         = locale;
    proto$2.localeData     = localeData;

    proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
    proto$2.lang = lang;

    // Side effect imports

    // FORMATTING

    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');

    // PARSING

    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input, 10) * 1000);
    });
    addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
    });

    // Side effect imports


    hooks.version = '2.22.2';

    setHookCallback(createLocal);

    hooks.fn                    = proto;
    hooks.min                   = min;
    hooks.max                   = max;
    hooks.now                   = now;
    hooks.utc                   = createUTC;
    hooks.unix                  = createUnix;
    hooks.months                = listMonths;
    hooks.isDate                = isDate;
    hooks.locale                = getSetGlobalLocale;
    hooks.invalid               = createInvalid;
    hooks.duration              = createDuration;
    hooks.isMoment              = isMoment;
    hooks.weekdays              = listWeekdays;
    hooks.parseZone             = createInZone;
    hooks.localeData            = getLocale;
    hooks.isDuration            = isDuration;
    hooks.monthsShort           = listMonthsShort;
    hooks.weekdaysMin           = listWeekdaysMin;
    hooks.defineLocale          = defineLocale;
    hooks.updateLocale          = updateLocale;
    hooks.locales               = listLocales;
    hooks.weekdaysShort         = listWeekdaysShort;
    hooks.normalizeUnits        = normalizeUnits;
    hooks.relativeTimeRounding  = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat        = getCalendarFormat;
    hooks.prototype             = proto;

    // currently HTML5 input type only supports 24-hour formats
    hooks.HTML5_FMT = {
        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',             // <input type="datetime-local" />
        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',  // <input type="datetime-local" step="1" />
        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',   // <input type="datetime-local" step="0.001" />
        DATE: 'YYYY-MM-DD',                             // <input type="date" />
        TIME: 'HH:mm',                                  // <input type="time" />
        TIME_SECONDS: 'HH:mm:ss',                       // <input type="time" step="1" />
        TIME_MS: 'HH:mm:ss.SSS',                        // <input type="time" step="0.001" />
        WEEK: 'YYYY-[W]WW',                             // <input type="week" />
        MONTH: 'YYYY-MM'                                // <input type="month" />
    };

    return hooks;

})));
});

moment.updateLocale('en', {
  weekdaysMin: ['S', 'M', 'T', 'W', 'T', 'F', 'S']
});
/**
 * This is a styling wrapper around [react-dates](https://github.com/airbnb/react-dates).
 * Please see [here](https://github.com/airbnb/react-dates#singledatepicker) for prop types.
 *
 * The picker can be controlled by setting the props `date` and `onDateChange`.
 * `date` should be set to a moment object of the currently selected date,
 * while `onDateChange` should be a function that handles the date when it
 * changes.
 */

var DatePicker =
/*#__PURE__*/
function (_React$PureComponent) {
  inherits(DatePicker, _React$PureComponent);

  function DatePicker() {
    var _getPrototypeOf2;

    var _this;

    classCallCheck(this, DatePicker);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(DatePicker)).call.apply(_getPrototypeOf2, [this].concat(args)));

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "state", {
      focused: false
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleFocusChange", function (_ref) {
      var focused = _ref.focused;
      return _this.setState({
        focused: focused
      });
    });

    return _this;
  }

  createClass(DatePicker, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          Wrapper$$1 = _this$props.Wrapper,
          rest = objectWithoutProperties(_this$props, ["Wrapper"]);

      var focused = this.state.focused;
      return React__default.createElement(Wrapper$$1, {
        className: focused && 'focused',
        openDirection: this.props.openDirection,
        invalid: this.props.invalid,
        disabled: this.props.disabled
      }, React__default.createElement(reactDates.SingleDatePicker, _extends_1({
        navPrev: React__default.createElement(Icon, {
          name: "back"
        }),
        navNext: React__default.createElement(Icon, {
          name: "forward"
        }),
        weekDayFormat: "dd",
        daySize: 35,
        horizontalMonthPadding: 5,
        horizontalMargin: 0,
        numberOfMonths: 1,
        hideKeyboardShortcutsPanel: true,
        focused: focused,
        onFocusChange: this.handleFocusChange
      }, rest)));
    }
  }]);

  return DatePicker;
}(React__default.PureComponent);

defineProperty(DatePicker, "Range", DateRangePicker);

defineProperty(DatePicker, "propTypes", {
  id: propTypes.string,

  /**
   * A component to wrap and control styles of the underlying react-dates DatePicker
   */
  Wrapper: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * Format to pass to moment to control the input's value
   */
  displayFormat: propTypes.string,

  /**
   * Set to true if the component's value is invalid
   */
  invalid: propTypes.bool,

  /**
   * Set to true if the component should be disabled.
   */
  disabled: propTypes.bool
});

defineProperty(DatePicker, "defaultProps", {
  Wrapper: Wrapper,
  displayFormat: 'MMM DD YYYY',
  invalid: false,
  disabled: false
});

defineProperty(DatePicker, "styles", styles$h);

var Container$7 = styled__default.div.withConfig({
  displayName: "Container",
  componentId: "sc-1qchshb-0"
})(["flex:1 1 auto;position:relative;display:inline-block;&:first-of-type > label{border-top-left-radius:3px;border-bottom-left-radius:3px;}&:last-of-type > label{border-top-right-radius:3px;border-bottom-right-radius:3px;}&:not(.disabled) + & > label{border-left:0;}&.disabled:not(:last-of-type) > label{border-right:0;}"]);

var Content = styled__default.div.withConfig({
  displayName: "Content",
  componentId: "nfhv39-0"
})(["font-size:1em;font-weight:200;text-transform:none;margin:auto auto auto 0;"]);

var RadioGroupContainer = styled__default.div.withConfig({
  displayName: "GroupContainer__RadioGroupContainer",
  componentId: "sc-1978jm4-0"
})(["display:flex;flex-direction:row;align-items:stretch;"]);
RadioGroupContainer.Vertical = styled__default(RadioGroupContainer).withConfig({
  displayName: "GroupContainer__Vertical",
  componentId: "sc-1978jm4-1"
})(["flex-direction:column;"]);

var RadioGroupButtonInput = styled__default.input.withConfig({
  displayName: "Input__RadioGroupButtonInput",
  componentId: "sc-1aiztis-0"
})(["display:block;height:0;width:0;margin:0;padding:0;border:none;position:absolute;opacity:0;"]);

var RadioGroupButtonLabel = styled__default.label.withConfig({
  displayName: "Label__RadioGroupButtonLabel",
  componentId: "y62vwb-0"
})(["border-width:", ";border-style:solid;border-color:", ";padding:1em 15px;cursor:pointer;position:relative;display:flex;flex-direction:column;align-content:flex-start;background:", ";color:", ";transition:opacity 0.2s ease,background 0.2s ease,color 0.2s ease,box-shadow 0.2s ease;text-transform:uppercase;font-weight:bold;font-size:1em;height:100%;min-width:53px;box-shadow:inset 0 0 0 ", ";user-select:none;", ":not(:checked):focus:not(:disabled) + &,", ":not(:checked):hover:not(:disabled) + &{z-index:3;}", ":focus:not(:disabled) + &,", ":hover:not(:disabled) + &,", ":active:not(:disabled) + &{&::before{content:'';box-shadow:var(--shadows-focus-outline);position:absolute;bottom:-2px;left:-2px;right:-2px;top:-2px;z-index:2;border-radius:3px;}}", ":checked + &{background:", ";color:", ";box-shadow:inset 0 -5px 0 ", ";z-index:1;}", ":disabled + &{z-index;-1;cursor:default;color:", ";background-color:", ";border-color:", ";}", ":checked:disabled + &{color:", ";background-color:", ";box-shadow:inset 0 -5px 0 ", ";}"], themeGet('thicknesses.thick'), themeGet('colors.primary.dark'), themeGet('colors.background.default'), themeGet('colors.primary.dark'), themeGet('colors.primary.default'), RadioGroupButtonInput, RadioGroupButtonInput, RadioGroupButtonInput, RadioGroupButtonInput, RadioGroupButtonInput, RadioGroupButtonInput, themeGet('colors.primary.dark'), themeGet('colors.text.inverted'), themeGet('colors.primary.default'), RadioGroupButtonInput, themeGet('colors.text.disabled'), themeGet('colors.background.disabled'), themeGet('colors.border.disabled'), RadioGroupButtonInput, themeGet('colors.text.inverted'), themeGet('colors.background.disabledSelected'), themeGet('colors.background.disabled'));
RadioGroupButtonLabel.Small = styled__default(RadioGroupButtonLabel).withConfig({
  displayName: "Label__Small",
  componentId: "y62vwb-1"
})(["font-size:0.8em;padding:3px 10px;font-weight:normal;min-width:30px;", ":checked + &{box-shadow:inset 0 -4px 0 ", ";}", ":checked:disabled + &{box-shadow:inset 0 -4px 0 ", ";}"], RadioGroupButtonInput, themeGet('colors.primary.default'), RadioGroupButtonInput, themeGet('colors.background.disabled'));

var LabelText$1 = styled__default.span.withConfig({
  displayName: "LabelText",
  componentId: "l57a2a-0"
})(["font-size:inherit;font-weight:bold;color:inherit;margin:auto 0 auto 0;line-height:21px;text-align:center;"]);



var styles$i = /*#__PURE__*/Object.freeze({
  Container: Container$7,
  Content: Content,
  GroupContainer: RadioGroupContainer,
  Input: RadioGroupButtonInput,
  Label: RadioGroupButtonLabel,
  LabelText: LabelText$1
});

/**
 * A stylized `<input type="radio">` meant to be used in a group with others. You can either include individual `RadioButton`
 * elements inside a `RadioButton.Group`, or you can use `RadioButton.Options` if you just need to render a simple
 * list of options from an array.
 */

var RadioButton =
/*#__PURE__*/
function (_React$Component) {
  inherits(RadioButton, _React$Component);

  function RadioButton() {
    var _getPrototypeOf2;

    var _this;

    classCallCheck(this, RadioButton);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(RadioButton)).call.apply(_getPrototypeOf2, [this].concat(args)));

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "renderChildren", function () {
      var _this$props = _this.props,
          children = _this$props.children,
          checked = _this$props.checked;

      if (typeof children === 'function') {
        return children({
          checked: checked
        });
      }

      return children;
    });

    return _this;
  }

  createClass(RadioButton, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          id = _this$props2.id,
          checked = _this$props2.checked,
          label = _this$props2.label,
          name = _this$props2.name,
          value = _this$props2.value,
          disabled = _this$props2.disabled,
          onChange = _this$props2.onChange,
          children = _this$props2.children,
          className = _this$props2.className,
          Container = _this$props2.Container,
          Content$$1 = _this$props2.Content,
          Input = _this$props2.Input,
          Label = _this$props2.Label,
          LabelText = _this$props2.LabelText,
          rest = objectWithoutProperties(_this$props2, ["id", "checked", "label", "name", "value", "disabled", "onChange", "children", "className", "Container", "Content", "Input", "Label", "LabelText"]);

      var finalId = id || "radio-".concat(name, ">").concat(value);
      return React__default.createElement(Container, {
        className: disabled && 'disabled'
      }, React__default.createElement(Input, _extends_1({
        type: "radio",
        id: finalId,
        value: value,
        name: name,
        checked: checked,
        onChange: onChange,
        className: className,
        disabled: disabled
      }, rest)), React__default.createElement(Label, {
        htmlFor: finalId,
        active: checked,
        disabled: disabled
      }, React__default.createElement(LabelText, null, label), children && React__default.createElement(Content$$1, null, this.renderChildren())));
    }
  }]);

  return RadioButton;
}(React__default.Component);

defineProperty(RadioButton, "propTypes", {
  /**
   * Whether or not the button is currently selected.
   * Use undefined to make this an 'uncontrolled' component
   */
  checked: propTypes.bool,

  /**
   * Called when the checked state of the button changes.
   */
  onChange: propTypes.func,

  /**
   * Text to render inside the button's label.
   */
  label: propTypes.string.isRequired,

  /**
   * Content to render inside the main part of the button. You can pass
   * a node, string, or a function. If a function is passed, it receives
   * a parameter `{ checked: boolean }` and should return a node.
   */
  children: propTypes.oneOfType([propTypes.node, propTypes.string, propTypes.func]),

  /**
   * A field name for the input.
   */
  name: propTypes.string.isRequired,

  /**
   * The input value.
   */
  value: propTypes.string.isRequired,

  /**
   * If true, user cannot interact with this button.
   */
  disabled: propTypes.bool,

  /**
   * Adds a class name to the input element.
   */
  className: propTypes.string,

  /**
   * Adds an id to the input element.
   */
  id: propTypes.string,

  /**
   * A component to render the container around the button
   */
  Container: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A component to render the content inside the button (not the label)
   */
  Content: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A component to render the input for the button (usually hidden)
   */
  Input: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A component to render the label inside the button
   */
  Label: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A component to render the text inside the label
   */
  LabelText: propTypes.oneOfType([propTypes.func, propTypes.object])
});

defineProperty(RadioButton, "defaultProps", {
  content: null,
  className: null,
  id: null,
  disabled: false,
  Container: Container$7,
  Content: Content,
  Input: RadioGroupButtonInput,
  Label: RadioGroupButtonLabel,
  LabelText: LabelText$1
});

defineProperty(RadioButton, "styles", styles$i);

RadioButton.Small = withProps({
  Label: RadioGroupButtonLabel.Small
})(RadioButton);
RadioButton.Large = withProps({
  Label: RadioGroupButtonLabel.Large
})(RadioButton);
RadioButton.Group = RadioGroupContainer;
RadioButton.Small.Group = RadioGroupContainer;
RadioButton.Large.Group = RadioGroupContainer;

var InputContainer = styled__default.div.withConfig({
  displayName: "InputContainer",
  componentId: "lrany9-0"
})([".TimeInput-input{letter-spacing:0.02em;line-height:1.5;font-size:14px;font-family:var(--fonts-brand);transition:all 0.2s ease;padding:calc(var(--spacing-extra-small) - 1px) var(--spacing-extra-small);border-width:var(--thicknesses-wide);border-style:solid;color:var(--colors-text-default);background:var(--colors-background-default);opacity:1;border-color:var(--colors-border-light);width:4em;text-align:center;outline:none;&:focus{box-shadow:inset 0 -5px 0 var(--colors-primary-light);border-color:var(--colors-border-medium);}", ";}"], function (_ref) {
  var disabled = _ref.disabled;
  return disabled && styled.css(["pointer-events:none;background:var(--colors-background-disabled);border-color:var(--colors-border-disabled);opacity:1;color:var(--colors-text-disabled);"]);
});

var RadioContainer = styled__default.div.withConfig({
  displayName: "RadioContainer",
  componentId: "sc-1jmlr2i-0"
})(["display:flex;flex:1 1 content;"]);

var TimeContainer = styled__default.div.withConfig({
  displayName: "TimeContainer",
  componentId: "qrgig2-0"
})(["display:flex;& > * + *{margin-left:var(--spacing-small);}"]);



var styles$j = /*#__PURE__*/Object.freeze({
  InputContainer: InputContainer,
  RadioContainer: RadioContainer,
  TimeContainer: TimeContainer
});

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

var emptyObject = {};

{
  Object.freeze(emptyObject);
}

var emptyObject_1 = emptyObject;

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var validateFormat = function validateFormat(format) {};

{
  validateFormat = function validateFormat(format) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  };
}

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

var invariant_1 = invariant;

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
var emptyFunction = function emptyFunction() {};

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

var emptyFunction_1 = emptyFunction;

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction_1;

{
  var printWarning$2 = function printWarning(format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  warning = function warning(condition, format) {
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (format.indexOf('Failed Composite propType: ') === 0) {
      return; // Ignore CompositeComponent proptype check.
    }

    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning$2.apply(undefined, [format].concat(args));
    }
  };
}

var warning_1 = warning;

{
  var warning$1 = warning_1;
}

var MIXINS_KEY = 'mixins';

// Helper function to allow the creation of anonymous functions which do not
// have .name set to the name of the variable being assigned to.
function identity$3(fn) {
  return fn;
}

var ReactPropTypeLocationNames;
{
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

function factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {
  /**
   * Policies that describe methods in `ReactClassInterface`.
   */

  var injectedMixins = [];

  /**
   * Composite components are higher-level components that compose other composite
   * or host components.
   *
   * To create a new type of `ReactClass`, pass a specification of
   * your new class to `React.createClass`. The only requirement of your class
   * specification is that you implement a `render` method.
   *
   *   var MyComponent = React.createClass({
   *     render: function() {
   *       return <div>Hello World</div>;
   *     }
   *   });
   *
   * The class specification supports a specific protocol of methods that have
   * special meaning (e.g. `render`). See `ReactClassInterface` for
   * more the comprehensive protocol. Any other properties and methods in the
   * class specification will be available on the prototype.
   *
   * @interface ReactClassInterface
   * @internal
   */
  var ReactClassInterface = {
    /**
     * An array of Mixin objects to include when defining your component.
     *
     * @type {array}
     * @optional
     */
    mixins: 'DEFINE_MANY',

    /**
     * An object containing properties and methods that should be defined on
     * the component's constructor instead of its prototype (static methods).
     *
     * @type {object}
     * @optional
     */
    statics: 'DEFINE_MANY',

    /**
     * Definition of prop types for this component.
     *
     * @type {object}
     * @optional
     */
    propTypes: 'DEFINE_MANY',

    /**
     * Definition of context types for this component.
     *
     * @type {object}
     * @optional
     */
    contextTypes: 'DEFINE_MANY',

    /**
     * Definition of context types this component sets for its children.
     *
     * @type {object}
     * @optional
     */
    childContextTypes: 'DEFINE_MANY',

    // ==== Definition methods ====

    /**
     * Invoked when the component is mounted. Values in the mapping will be set on
     * `this.props` if that prop is not specified (i.e. using an `in` check).
     *
     * This method is invoked before `getInitialState` and therefore cannot rely
     * on `this.state` or use `this.setState`.
     *
     * @return {object}
     * @optional
     */
    getDefaultProps: 'DEFINE_MANY_MERGED',

    /**
     * Invoked once before the component is mounted. The return value will be used
     * as the initial value of `this.state`.
     *
     *   getInitialState: function() {
     *     return {
     *       isOn: false,
     *       fooBaz: new BazFoo()
     *     }
     *   }
     *
     * @return {object}
     * @optional
     */
    getInitialState: 'DEFINE_MANY_MERGED',

    /**
     * @return {object}
     * @optional
     */
    getChildContext: 'DEFINE_MANY_MERGED',

    /**
     * Uses props from `this.props` and state from `this.state` to render the
     * structure of the component.
     *
     * No guarantees are made about when or how often this method is invoked, so
     * it must not have side effects.
     *
     *   render: function() {
     *     var name = this.props.name;
     *     return <div>Hello, {name}!</div>;
     *   }
     *
     * @return {ReactComponent}
     * @required
     */
    render: 'DEFINE_ONCE',

    // ==== Delegate methods ====

    /**
     * Invoked when the component is initially created and about to be mounted.
     * This may have side effects, but any external subscriptions or data created
     * by this method must be cleaned up in `componentWillUnmount`.
     *
     * @optional
     */
    componentWillMount: 'DEFINE_MANY',

    /**
     * Invoked when the component has been mounted and has a DOM representation.
     * However, there is no guarantee that the DOM node is in the document.
     *
     * Use this as an opportunity to operate on the DOM when the component has
     * been mounted (initialized and rendered) for the first time.
     *
     * @param {DOMElement} rootNode DOM element representing the component.
     * @optional
     */
    componentDidMount: 'DEFINE_MANY',

    /**
     * Invoked before the component receives new props.
     *
     * Use this as an opportunity to react to a prop transition by updating the
     * state using `this.setState`. Current props are accessed via `this.props`.
     *
     *   componentWillReceiveProps: function(nextProps, nextContext) {
     *     this.setState({
     *       likesIncreasing: nextProps.likeCount > this.props.likeCount
     *     });
     *   }
     *
     * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
     * transition may cause a state change, but the opposite is not true. If you
     * need it, you are probably looking for `componentWillUpdate`.
     *
     * @param {object} nextProps
     * @optional
     */
    componentWillReceiveProps: 'DEFINE_MANY',

    /**
     * Invoked while deciding if the component should be updated as a result of
     * receiving new props, state and/or context.
     *
     * Use this as an opportunity to `return false` when you're certain that the
     * transition to the new props/state/context will not require a component
     * update.
     *
     *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
     *     return !equal(nextProps, this.props) ||
     *       !equal(nextState, this.state) ||
     *       !equal(nextContext, this.context);
     *   }
     *
     * @param {object} nextProps
     * @param {?object} nextState
     * @param {?object} nextContext
     * @return {boolean} True if the component should update.
     * @optional
     */
    shouldComponentUpdate: 'DEFINE_ONCE',

    /**
     * Invoked when the component is about to update due to a transition from
     * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
     * and `nextContext`.
     *
     * Use this as an opportunity to perform preparation before an update occurs.
     *
     * NOTE: You **cannot** use `this.setState()` in this method.
     *
     * @param {object} nextProps
     * @param {?object} nextState
     * @param {?object} nextContext
     * @param {ReactReconcileTransaction} transaction
     * @optional
     */
    componentWillUpdate: 'DEFINE_MANY',

    /**
     * Invoked when the component's DOM representation has been updated.
     *
     * Use this as an opportunity to operate on the DOM when the component has
     * been updated.
     *
     * @param {object} prevProps
     * @param {?object} prevState
     * @param {?object} prevContext
     * @param {DOMElement} rootNode DOM element representing the component.
     * @optional
     */
    componentDidUpdate: 'DEFINE_MANY',

    /**
     * Invoked when the component is about to be removed from its parent and have
     * its DOM representation destroyed.
     *
     * Use this as an opportunity to deallocate any external resources.
     *
     * NOTE: There is no `componentDidUnmount` since your component will have been
     * destroyed by that point.
     *
     * @optional
     */
    componentWillUnmount: 'DEFINE_MANY',

    /**
     * Replacement for (deprecated) `componentWillMount`.
     *
     * @optional
     */
    UNSAFE_componentWillMount: 'DEFINE_MANY',

    /**
     * Replacement for (deprecated) `componentWillReceiveProps`.
     *
     * @optional
     */
    UNSAFE_componentWillReceiveProps: 'DEFINE_MANY',

    /**
     * Replacement for (deprecated) `componentWillUpdate`.
     *
     * @optional
     */
    UNSAFE_componentWillUpdate: 'DEFINE_MANY',

    // ==== Advanced methods ====

    /**
     * Updates the component's currently mounted DOM representation.
     *
     * By default, this implements React's rendering and reconciliation algorithm.
     * Sophisticated clients may wish to override this.
     *
     * @param {ReactReconcileTransaction} transaction
     * @internal
     * @overridable
     */
    updateComponent: 'OVERRIDE_BASE'
  };

  /**
   * Similar to ReactClassInterface but for static methods.
   */
  var ReactClassStaticInterface = {
    /**
     * This method is invoked after a component is instantiated and when it
     * receives new props. Return an object to update state in response to
     * prop changes. Return null to indicate no change to state.
     *
     * If an object is returned, its keys will be merged into the existing state.
     *
     * @return {object || null}
     * @optional
     */
    getDerivedStateFromProps: 'DEFINE_MANY_MERGED'
  };

  /**
   * Mapping from class specification keys to special processing functions.
   *
   * Although these are declared like instance properties in the specification
   * when defining classes using `React.createClass`, they are actually static
   * and are accessible on the constructor instead of the prototype. Despite
   * being static, they must be defined outside of the "statics" key under
   * which all other static methods are defined.
   */
  var RESERVED_SPEC_KEYS = {
    displayName: function(Constructor, displayName) {
      Constructor.displayName = displayName;
    },
    mixins: function(Constructor, mixins) {
      if (mixins) {
        for (var i = 0; i < mixins.length; i++) {
          mixSpecIntoComponent(Constructor, mixins[i]);
        }
      }
    },
    childContextTypes: function(Constructor, childContextTypes) {
      {
        validateTypeDef(Constructor, childContextTypes, 'childContext');
      }
      Constructor.childContextTypes = objectAssign(
        {},
        Constructor.childContextTypes,
        childContextTypes
      );
    },
    contextTypes: function(Constructor, contextTypes) {
      {
        validateTypeDef(Constructor, contextTypes, 'context');
      }
      Constructor.contextTypes = objectAssign(
        {},
        Constructor.contextTypes,
        contextTypes
      );
    },
    /**
     * Special case getDefaultProps which should move into statics but requires
     * automatic merging.
     */
    getDefaultProps: function(Constructor, getDefaultProps) {
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps = createMergedResultFunction(
          Constructor.getDefaultProps,
          getDefaultProps
        );
      } else {
        Constructor.getDefaultProps = getDefaultProps;
      }
    },
    propTypes: function(Constructor, propTypes) {
      {
        validateTypeDef(Constructor, propTypes, 'prop');
      }
      Constructor.propTypes = objectAssign({}, Constructor.propTypes, propTypes);
    },
    statics: function(Constructor, statics) {
      mixStaticSpecIntoComponent(Constructor, statics);
    },
    autobind: function() {}
  };

  function validateTypeDef(Constructor, typeDef, location) {
    for (var propName in typeDef) {
      if (typeDef.hasOwnProperty(propName)) {
        // use a warning instead of an _invariant so components
        // don't show up in prod but only in __DEV__
        {
          warning$1(
            typeof typeDef[propName] === 'function',
            '%s: %s type `%s` is invalid; it must be a function, usually from ' +
              'React.PropTypes.',
            Constructor.displayName || 'ReactClass',
            ReactPropTypeLocationNames[location],
            propName
          );
        }
      }
    }
  }

  function validateMethodOverride(isAlreadyDefined, name) {
    var specPolicy = ReactClassInterface.hasOwnProperty(name)
      ? ReactClassInterface[name]
      : null;

    // Disallow overriding of base class methods unless explicitly allowed.
    if (ReactClassMixin.hasOwnProperty(name)) {
      invariant_1(
        specPolicy === 'OVERRIDE_BASE',
        'ReactClassInterface: You are attempting to override ' +
          '`%s` from your class specification. Ensure that your method names ' +
          'do not overlap with React methods.',
        name
      );
    }

    // Disallow defining methods more than once unless explicitly allowed.
    if (isAlreadyDefined) {
      invariant_1(
        specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED',
        'ReactClassInterface: You are attempting to define ' +
          '`%s` on your component more than once. This conflict may be due ' +
          'to a mixin.',
        name
      );
    }
  }

  /**
   * Mixin helper which handles policy validation and reserved
   * specification keys when building React classes.
   */
  function mixSpecIntoComponent(Constructor, spec) {
    if (!spec) {
      {
        var typeofSpec = typeof spec;
        var isMixinValid = typeofSpec === 'object' && spec !== null;

        {
          warning$1(
            isMixinValid,
            "%s: You're attempting to include a mixin that is either null " +
              'or not an object. Check the mixins included by the component, ' +
              'as well as any mixins they include themselves. ' +
              'Expected object but got %s.',
            Constructor.displayName || 'ReactClass',
            spec === null ? null : typeofSpec
          );
        }
      }

      return;
    }

    invariant_1(
      typeof spec !== 'function',
      "ReactClass: You're attempting to " +
        'use a component class or function as a mixin. Instead, just use a ' +
        'regular object.'
    );
    invariant_1(
      !isValidElement(spec),
      "ReactClass: You're attempting to " +
        'use a component as a mixin. Instead, just use a regular object.'
    );

    var proto = Constructor.prototype;
    var autoBindPairs = proto.__reactAutoBindPairs;

    // By handling mixins before any other properties, we ensure the same
    // chaining order is applied to methods with DEFINE_MANY policy, whether
    // mixins are listed before or after these methods in the spec.
    if (spec.hasOwnProperty(MIXINS_KEY)) {
      RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
    }

    for (var name in spec) {
      if (!spec.hasOwnProperty(name)) {
        continue;
      }

      if (name === MIXINS_KEY) {
        // We have already handled mixins in a special case above.
        continue;
      }

      var property = spec[name];
      var isAlreadyDefined = proto.hasOwnProperty(name);
      validateMethodOverride(isAlreadyDefined, name);

      if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
        RESERVED_SPEC_KEYS[name](Constructor, property);
      } else {
        // Setup methods on prototype:
        // The following member methods should not be automatically bound:
        // 1. Expected ReactClass methods (in the "interface").
        // 2. Overridden methods (that were mixed in).
        var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
        var isFunction = typeof property === 'function';
        var shouldAutoBind =
          isFunction &&
          !isReactClassMethod &&
          !isAlreadyDefined &&
          spec.autobind !== false;

        if (shouldAutoBind) {
          autoBindPairs.push(name, property);
          proto[name] = property;
        } else {
          if (isAlreadyDefined) {
            var specPolicy = ReactClassInterface[name];

            // These cases should already be caught by validateMethodOverride.
            invariant_1(
              isReactClassMethod &&
                (specPolicy === 'DEFINE_MANY_MERGED' ||
                  specPolicy === 'DEFINE_MANY'),
              'ReactClass: Unexpected spec policy %s for key %s ' +
                'when mixing in component specs.',
              specPolicy,
              name
            );

            // For methods which are defined more than once, call the existing
            // methods before calling the new property, merging if appropriate.
            if (specPolicy === 'DEFINE_MANY_MERGED') {
              proto[name] = createMergedResultFunction(proto[name], property);
            } else if (specPolicy === 'DEFINE_MANY') {
              proto[name] = createChainedFunction(proto[name], property);
            }
          } else {
            proto[name] = property;
            {
              // Add verbose displayName to the function, which helps when looking
              // at profiling tools.
              if (typeof property === 'function' && spec.displayName) {
                proto[name].displayName = spec.displayName + '_' + name;
              }
            }
          }
        }
      }
    }
  }

  function mixStaticSpecIntoComponent(Constructor, statics) {
    if (!statics) {
      return;
    }

    for (var name in statics) {
      var property = statics[name];
      if (!statics.hasOwnProperty(name)) {
        continue;
      }

      var isReserved = name in RESERVED_SPEC_KEYS;
      invariant_1(
        !isReserved,
        'ReactClass: You are attempting to define a reserved ' +
          'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
          'as an instance property instead; it will still be accessible on the ' +
          'constructor.',
        name
      );

      var isAlreadyDefined = name in Constructor;
      if (isAlreadyDefined) {
        var specPolicy = ReactClassStaticInterface.hasOwnProperty(name)
          ? ReactClassStaticInterface[name]
          : null;

        invariant_1(
          specPolicy === 'DEFINE_MANY_MERGED',
          'ReactClass: You are attempting to define ' +
            '`%s` on your component more than once. This conflict may be ' +
            'due to a mixin.',
          name
        );

        Constructor[name] = createMergedResultFunction(Constructor[name], property);

        return;
      }

      Constructor[name] = property;
    }
  }

  /**
   * Merge two objects, but throw if both contain the same key.
   *
   * @param {object} one The first object, which is mutated.
   * @param {object} two The second object
   * @return {object} one after it has been mutated to contain everything in two.
   */
  function mergeIntoWithNoDuplicateKeys(one, two) {
    invariant_1(
      one && two && typeof one === 'object' && typeof two === 'object',
      'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'
    );

    for (var key in two) {
      if (two.hasOwnProperty(key)) {
        invariant_1(
          one[key] === undefined,
          'mergeIntoWithNoDuplicateKeys(): ' +
            'Tried to merge two objects with the same key: `%s`. This conflict ' +
            'may be due to a mixin; in particular, this may be caused by two ' +
            'getInitialState() or getDefaultProps() methods returning objects ' +
            'with clashing keys.',
          key
        );
        one[key] = two[key];
      }
    }
    return one;
  }

  /**
   * Creates a function that invokes two functions and merges their return values.
   *
   * @param {function} one Function to invoke first.
   * @param {function} two Function to invoke second.
   * @return {function} Function that invokes the two argument functions.
   * @private
   */
  function createMergedResultFunction(one, two) {
    return function mergedResult() {
      var a = one.apply(this, arguments);
      var b = two.apply(this, arguments);
      if (a == null) {
        return b;
      } else if (b == null) {
        return a;
      }
      var c = {};
      mergeIntoWithNoDuplicateKeys(c, a);
      mergeIntoWithNoDuplicateKeys(c, b);
      return c;
    };
  }

  /**
   * Creates a function that invokes two functions and ignores their return vales.
   *
   * @param {function} one Function to invoke first.
   * @param {function} two Function to invoke second.
   * @return {function} Function that invokes the two argument functions.
   * @private
   */
  function createChainedFunction(one, two) {
    return function chainedFunction() {
      one.apply(this, arguments);
      two.apply(this, arguments);
    };
  }

  /**
   * Binds a method to the component.
   *
   * @param {object} component Component whose method is going to be bound.
   * @param {function} method Method to be bound.
   * @return {function} The bound method.
   */
  function bindAutoBindMethod(component, method) {
    var boundMethod = method.bind(component);
    {
      boundMethod.__reactBoundContext = component;
      boundMethod.__reactBoundMethod = method;
      boundMethod.__reactBoundArguments = null;
      var componentName = component.constructor.displayName;
      var _bind = boundMethod.bind;
      boundMethod.bind = function(newThis) {
        for (
          var _len = arguments.length,
            args = Array(_len > 1 ? _len - 1 : 0),
            _key = 1;
          _key < _len;
          _key++
        ) {
          args[_key - 1] = arguments[_key];
        }

        // User is trying to bind() an autobound method; we effectively will
        // ignore the value of "this" that the user is trying to use, so
        // let's warn.
        if (newThis !== component && newThis !== null) {
          {
            warning$1(
              false,
              'bind(): React component methods may only be bound to the ' +
                'component instance. See %s',
              componentName
            );
          }
        } else if (!args.length) {
          {
            warning$1(
              false,
              'bind(): You are binding a component method to the component. ' +
                'React does this for you automatically in a high-performance ' +
                'way, so you can safely remove this call. See %s',
              componentName
            );
          }
          return boundMethod;
        }
        var reboundMethod = _bind.apply(boundMethod, arguments);
        reboundMethod.__reactBoundContext = component;
        reboundMethod.__reactBoundMethod = method;
        reboundMethod.__reactBoundArguments = args;
        return reboundMethod;
      };
    }
    return boundMethod;
  }

  /**
   * Binds all auto-bound methods in a component.
   *
   * @param {object} component Component whose method is going to be bound.
   */
  function bindAutoBindMethods(component) {
    var pairs = component.__reactAutoBindPairs;
    for (var i = 0; i < pairs.length; i += 2) {
      var autoBindKey = pairs[i];
      var method = pairs[i + 1];
      component[autoBindKey] = bindAutoBindMethod(component, method);
    }
  }

  var IsMountedPreMixin = {
    componentDidMount: function() {
      this.__isMounted = true;
    }
  };

  var IsMountedPostMixin = {
    componentWillUnmount: function() {
      this.__isMounted = false;
    }
  };

  /**
   * Add more to the ReactClass base class. These are all legacy features and
   * therefore not already part of the modern ReactComponent.
   */
  var ReactClassMixin = {
    /**
     * TODO: This will be deprecated because state should always keep a consistent
     * type signature and the only use case for this, is to avoid that.
     */
    replaceState: function(newState, callback) {
      this.updater.enqueueReplaceState(this, newState, callback);
    },

    /**
     * Checks whether or not this composite component is mounted.
     * @return {boolean} True if mounted, false otherwise.
     * @protected
     * @final
     */
    isMounted: function() {
      {
        warning$1(
          this.__didWarnIsMounted,
          '%s: isMounted is deprecated. Instead, make sure to clean up ' +
            'subscriptions and pending requests in componentWillUnmount to ' +
            'prevent memory leaks.',
          (this.constructor && this.constructor.displayName) ||
            this.name ||
            'Component'
        );
        this.__didWarnIsMounted = true;
      }
      return !!this.__isMounted;
    }
  };

  var ReactClassComponent = function() {};
  objectAssign(
    ReactClassComponent.prototype,
    ReactComponent.prototype,
    ReactClassMixin
  );

  /**
   * Creates a composite component class given a class specification.
   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  function createClass(spec) {
    // To keep our warnings more understandable, we'll use a little hack here to
    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
    // unnecessarily identify a class without displayName as 'Constructor'.
    var Constructor = identity$3(function(props, context, updater) {
      // This constructor gets overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted.

      {
        warning$1(
          this instanceof Constructor,
          'Something is calling a React component directly. Use a factory or ' +
            'JSX instead. See: https://fb.me/react-legacyfactory'
        );
      }

      // Wire up auto-binding
      if (this.__reactAutoBindPairs.length) {
        bindAutoBindMethods(this);
      }

      this.props = props;
      this.context = context;
      this.refs = emptyObject_1;
      this.updater = updater || ReactNoopUpdateQueue;

      this.state = null;

      // ReactClasses doesn't have constructors. Instead, they use the
      // getInitialState and componentWillMount methods for initialization.

      var initialState = this.getInitialState ? this.getInitialState() : null;
      {
        // We allow auto-mocks to proceed as if they're returning null.
        if (
          initialState === undefined &&
          this.getInitialState._isMockFunction
        ) {
          // This is probably bad practice. Consider warning here and
          // deprecating this convenience.
          initialState = null;
        }
      }
      invariant_1(
        typeof initialState === 'object' && !Array.isArray(initialState),
        '%s.getInitialState(): must return an object or null',
        Constructor.displayName || 'ReactCompositeComponent'
      );

      this.state = initialState;
    });
    Constructor.prototype = new ReactClassComponent();
    Constructor.prototype.constructor = Constructor;
    Constructor.prototype.__reactAutoBindPairs = [];

    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

    mixSpecIntoComponent(Constructor, IsMountedPreMixin);
    mixSpecIntoComponent(Constructor, spec);
    mixSpecIntoComponent(Constructor, IsMountedPostMixin);

    // Initialize the defaultProps property after all mixins have been merged.
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    {
      // This is a tag to indicate that the use of these method names is ok,
      // since it's used with createClass. If it's not, then it's likely a
      // mistake so we'll warn you to use the static property, property
      // initializer or constructor respectively.
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps.isReactClassApproved = {};
      }
      if (Constructor.prototype.getInitialState) {
        Constructor.prototype.getInitialState.isReactClassApproved = {};
      }
    }

    invariant_1(
      Constructor.prototype.render,
      'createClass(...): Class specification must implement a `render` method.'
    );

    {
      warning$1(
        !Constructor.prototype.componentShouldUpdate,
        '%s has a method called ' +
          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
          'The name is phrased as a question because the function is ' +
          'expected to return a value.',
        spec.displayName || 'A component'
      );
      warning$1(
        !Constructor.prototype.componentWillRecieveProps,
        '%s has a method called ' +
          'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',
        spec.displayName || 'A component'
      );
      warning$1(
        !Constructor.prototype.UNSAFE_componentWillRecieveProps,
        '%s has a method called UNSAFE_componentWillRecieveProps(). ' +
          'Did you mean UNSAFE_componentWillReceiveProps()?',
        spec.displayName || 'A component'
      );
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactClassInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    return Constructor;
  }

  return createClass;
}

var factory_1 = factory;

if (typeof React__default === 'undefined') {
  throw Error(
    'create-react-class could not find the React object. If you are using script tags, ' +
      'make sure that React is being loaded before create-react-class.'
  );
}

// Hack to grab NoopUpdateQueue from isomorphic React
var ReactNoopUpdateQueue = new React__default.Component().updater;

var createReactClass = factory_1(
  React__default.Component,
  React__default.isValidElement,
  ReactNoopUpdateQueue
);

var isTwelveHourTime = function isTwelveHourTime(groups) {
  return (/[a-z]/i.test(groups[groups.length - 1])
  );
};

var replaceCharAt = function replaceCharAt(str, index, replacement) {
  str = str.split('');
  str[index] = replacement;
  return str.join('');
};

var getGroupId = function getGroupId(index) {
  if (index < 3) return 0;
  if (index < 6) return 1;
  if (index < 9) return 2;
  if (index < 13) return 3;
  return 4;
};

var getGroups = function getGroups(str) {
  return str.split(/[:\s+]/);
};

var zeroPad = function zeroPad(val, digits) {
  while (val.length < digits) {
    val = '0' + val;
  }return val;
};

var getBase = function getBase(groupId, twelveHourTime) {
  if (!groupId) return twelveHourTime ? 12 : 24;
  if (groupId < 3) return 60;
  return 1000;
};

var stringify = function stringify(groups) {
  if (isTwelveHourTime(groups)) return groups.slice(0, -1).join(':') + ' ' + groups[groups.length - 1];
  return groups.join(':');
};

var toggle24Hour = function toggle24Hr(groups) {
  var m = groups[groups.length - 1].toUpperCase();
  groups[groups.length - 1] = m === 'AM' ? 'PM' : 'AM';
  return groups;
};

var timeStringAdder = function adder(str, groupId, amount) {
  var groups = getGroups(str);
  var twelveHourTime = isTwelveHourTime(groups);
  if (twelveHourTime && groupId === groups.length - 1) return stringify(toggle24Hour(groups));
  return stringify(add(groups, groupId, amount, twelveHourTime));
};

function add(groups, groupId, amount, twelveHourTime) {
  var base = getBase(groupId, twelveHourTime);
  if (!groupId && groups[groupId] === '12' && twelveHourTime) groups[groupId] = '00';
  var val = Number(groups[groupId]) + amount;
  groups = replace(groups, groupId, (val + base) % base);
  if (groupId && val >= base) return add(groups, groupId - 1, 1, twelveHourTime);
  if (groupId && val < 0) return add(groups, groupId - 1, -1, twelveHourTime);
  if (!groupId && twelveHourTime) {
    if (val >= base || val < 0) toggle24Hour(groups);
    if (groups[0] === '00') groups[0] = '12';
  }
  return groups;
}

function replace(groups, groupId, amount) {
  var digits = groups[groupId].length;
  groups[groupId] = zeroPad(String(amount), digits);
  return groups;
}

var caret = {
  start: function start(el) {
    return el.selectionStart;
  },
  end: function end(el) {
    return el.selectionEnd;
  },
  set: function set(el, start, end) {
    el.setSelectionRange(start, end || start);
  }
};

var validate = function validate(val) {
  // ಠ_ಠ
  return (/^[0-2][0-9]:[0-5][0-9](:[0-5][0-9](:[0-9][0-9][0-9])?)?(\s+[ap]m)?$/i.test(val)
  );
};

var SILHOUETTE = '00:00:00:000 AM';

var TimeInput = createReactClass({
  getInitialState: function getInitialState() {
    return {};
  },
  getDefaultProps: function getDefaultProps() {
    return {
      value: '12:00 AM'
    };
  },

  propTypes: {
    className: propTypes.string,
    value: propTypes.string,
    onChange: propTypes.func
  },
  render: function render() {
    var _this = this;

    var className = 'TimeInput';
    if (this.props.className) {
      className += ' ' + this.props.className;
    }
    return React__default.createElement(
      'div',
      { className: className },
      React__default.createElement('input', {
        className: 'TimeInput-input',
        ref: function ref(input) {
          _this.input = input;
        },
        type: 'text',
        value: this.format(this.props.value),
        onChange: this.handleChange,
        onBlur: this.handleBlur,
        onKeyDown: this.handleKeyDown
      })
    );
  },
  format: function format(val) {
    if (isTwelveHourTime(val)) val = val.replace(/^00/, '12');
    return val.toUpperCase();
  },
  componentDidMount: function componentDidMount() {
    this.mounted = true;
  },
  componentWillUnmount: function componentWillUnmount() {
    this.mounted = false;
  },
  componentDidUpdate: function componentDidUpdate() {
    var index = this.state.caretIndex;
    if (index || index === 0) caret.set(this.input, index);
  },
  handleBlur: function handleBlur() {
    if (this.mounted) this.setState({ caretIndex: null });
  },
  handleEscape: function handleEscape() {
    if (this.mounted) this.input.blur();
  },
  handleTab: function handleTab(event) {
    var start = caret.start(this.input);
    var value = this.props.value;
    var groups = getGroups(value);
    var groupId = getGroupId(start);
    if (event.shiftKey) {
      if (!groupId) return;
      groupId--;
    } else {
      if (groupId >= groups.length - 1) return;
      groupId++;
    }
    event.preventDefault();
    var index = groupId * 3;
    if (this.props.value.charAt(index) === ' ') index++;
    if (this.mounted) this.setState({ caretIndex: index });
  },
  handleArrows: function handleArrows(event) {
    event.preventDefault();
    var start = caret.start(this.input);
    var value = this.props.value;
    var amount = event.which === 38 ? 1 : -1;
    if (event.shiftKey) {
      amount *= 2;
      if (event.metaKey) amount *= 2;
    }
    value = timeStringAdder(value, getGroupId(start), amount);
    this.onChange(value, start);
  },
  silhouette: function silhouette() {
    return this.props.value.replace(/\d/g, function (val, i) {
      return SILHOUETTE.charAt(i);
    });
  },
  handleBackspace: function handleBackspace(event) {
    event.preventDefault();
    var start = caret.start(this.input);
    var value = this.props.value;
    var end = caret.end(this.input);
    if (!start && !end) return;
    var diff = end - start;
    var silhouette = this.silhouette();
    if (!diff) {
      if (value[start - 1] === ':') start--;
      value = replaceCharAt(value, start - 1, silhouette.charAt(start - 1));
      start--;
    } else {
      while (diff--) {
        if (value[end - 1] !== ':') {
          value = replaceCharAt(value, end - 1, silhouette.charAt(end - 1));
        }
        end--;
      }
    }
    if (value.charAt(start - 1) === ':') start--;
    this.onChange(value, start);
  },
  handleForwardspace: function handleForwardspace(event) {
    event.preventDefault();
    var start = caret.start(this.input);
    var value = this.props.value;
    var end = caret.end(this.input);
    if (start === end === value.length - 1) return;
    var diff = end - start;
    var silhouette = this.silhouette();
    if (!diff) {
      if (value[start] === ':') start++;
      value = replaceCharAt(value, start, silhouette.charAt(start));
      start++;
    } else {
      while (diff--) {
        if (value[end - 1] !== ':') {
          value = replaceCharAt(value, start, silhouette.charAt(start));
        }
        start++;
      }
    }
    if (value.charAt(start) === ':') start++;
    this.onChange(value, start);
  },
  handleKeyDown: function handleKeyDown(event) {
    if (event.which === 9) return this.handleTab(event);
    if (event.which === 38 || event.which === 40) return this.handleArrows(event);
    if (event.which === 8) return this.handleBackspace(event);
    if (event.which === 46) return this.handleForwardspace(event);
    if (event.which === 27) return this.handleEscape(event);
  },
  isSeparator: function isSeparator(char) {
    return (/[:\s]/.test(char)
    );
  },
  handleChange: function handleChange(event) {
    var value = this.props.value;
    var newValue = this.input.value;
    // newValue += value.substr(newValue.length, value.length)
    var diff = newValue.length - value.length;
    var end = caret.start(this.input);
    var insertion;
    var start = end - Math.abs(diff);
    event.preventDefault();
    if (diff > 0) {
      insertion = newValue.slice(end - diff, end);
      while (diff--) {
        var oldChar = value.charAt(start);
        var newChar = insertion.charAt(0);
        if (this.isSeparator(oldChar)) {
          if (this.isSeparator(newChar)) {
            insertion = insertion.slice(1);
            start++;
          } else {
            start++;
            diff++;
            end++;
          }
        } else {
          value = replaceCharAt(value, start, newChar);
          insertion = insertion.slice(1);
          start++;
        }
      }
      newValue = value;
    } else {
      if (newValue.charAt(start) === ':') start++;
      // apply default to selection
      var result = value;
      for (var i = start; i < end; i++) {
        result = replaceCharAt(result, i, newValue.charAt(i));
      }
      newValue = result;
    }
    if (validate(newValue)) {
      if (newValue.charAt(end) === ':') end++;
      this.onChange(newValue, end);
    } else {
      var caretIndex = this.props.value.length - (newValue.length - end);
      if (this.mounted) this.setState({ caretIndex: caretIndex });
    }
  },

  onChange: function onChange(str, caretIndex) {
    if (this.props.onChange) this.props.onChange(this.format(str));
    if (this.mounted && typeof caretIndex === 'number') this.setState({ caretIndex: caretIndex });
  }
});

var TimeInput_1 = TimeInput;

var InternalTimePicker =
/*#__PURE__*/
function (_React$Component) {
  inherits(InternalTimePicker, _React$Component);

  function InternalTimePicker() {
    classCallCheck(this, InternalTimePicker);

    return possibleConstructorReturn(this, getPrototypeOf(InternalTimePicker).apply(this, arguments));
  }

  createClass(InternalTimePicker, [{
    key: "render",
    value: function render() {
      return React__default.createElement(InputContainer, {
        disabled: this.props.disabled
      }, React__default.createElement(TimeInput_1, this.props));
    }
  }]);

  return InternalTimePicker;
}(React__default.Component);

defineProperty(InternalTimePicker, "propTypes", {
  disabled: propTypes.bool
});

defineProperty(InternalTimePicker, "defaultProps", {
  disabled: false
});

/**
 * A widget that allows users to select a time.
 */

var TimePicker =
/*#__PURE__*/
function (_React$PureComponent) {
  inherits(TimePicker, _React$PureComponent);

  function TimePicker() {
    var _getPrototypeOf2;

    var _this;

    classCallCheck(this, TimePicker);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(TimePicker)).call.apply(_getPrototypeOf2, [this].concat(args)));

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "state", {
      internalValue: undefined
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleOnChange", function (_ref) {
      var value = _ref.value,
          amSelected = _ref.amSelected;

      if (!value) {
        return;
      }

      var timeValue = moment(value, _this.props.timeFormat);
      var timeValueIsAm = timeValue.hours() < 12;
      var sign = 0;
      if (!_this.twentyFourHour && amSelected !== timeValueIsAm) sign = amSelected ? -1 : 1;
      var newValue = timeValue.add(sign * 12, 'hours');

      _this.setState({
        internalValue: newValue
      });

      _this.props.onChange(newValue);
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleTimeChange", function (date) {
      return _this.handleOnChange({
        value: date,
        amSelected: _this.isAm
      });
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleAmPm", function (amSelected) {
      return function (ev) {
        return _this.handleOnChange({
          value: _this.momentValue,
          amSelected: amSelected
        });
      };
    });

    return _this;
  }

  createClass(TimePicker, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          name = _this$props.name,
          value = _this$props.value,
          timeFormat = _this$props.timeFormat,
          onChange = _this$props.onChange,
          disabled = _this$props.disabled,
          rest = objectWithoutProperties(_this$props, ["name", "value", "timeFormat", "onChange", "disabled"]);

      return React__default.createElement(TimeContainer, null, React__default.createElement(InternalTimePicker, _extends_1({}, rest, {
        disabled: disabled,
        onChange: this.handleTimeChange,
        value: this.momentValue.format(this.props.timeFormat)
      })), !this.twentyFourHour && React__default.createElement(RadioContainer, null, React__default.createElement(RadioButton.Small, {
        onChange: this.handleAmPm(true),
        checked: this.isAm,
        name: "".concat(name, "-ampm"),
        value: "am",
        label: "AM",
        disabled: disabled
      }), React__default.createElement(RadioButton.Small, {
        onChange: this.handleAmPm(false),
        checked: !this.isAm,
        name: "".concat(name, "-ampm"),
        value: "pm",
        label: "PM",
        disabled: disabled
      })));
    }
  }, {
    key: "twentyFourHour",
    get: function get() {
      return /[Hk]/g.test(this.props.timeFormat);
    }
  }, {
    key: "value",
    get: function get() {
      return this.props.value ? this.props.value : this.state.internalValue;
    }
  }, {
    key: "momentValue",
    get: function get() {
      return moment(this.value);
    }
  }, {
    key: "isAm",
    get: function get() {
      return this.momentValue.hours() <= 11;
    }
  }]);

  return TimePicker;
}(React__default.PureComponent);

defineProperty(TimePicker, "propTypes", {
  /**
   * The current time value of the widget. The value should be a moment object or a unix time.
   * If value is not passed, the component will control its own time.
   */
  value: propTypes.oneOfType([propTypes.object, propTypes.number]),

  /**
   * Called with the new time value when a change happens
   */
  onChange: propTypes.func,

  /**
   * Time format to pass to moment to format the string. Probably hh:mm or HH:mm for 24 hour time
   */
  timeFormat: propTypes.string,

  /**
   * Should the time input be disabled?
   */
  disabled: propTypes.bool
});

defineProperty(TimePicker, "defaultProps", {
  value: undefined,
  timeFormat: 'hh:mm',
  disabled: false
});

defineProperty(TimePicker, "styles", styles$j);

var Container$8 = styled__default.div.withConfig({
  displayName: "Container",
  componentId: "sc-1o8u7hr-0"
})(["padding:var(--spacing-small) 0;"]);

var RangeContainer = styled__default.div.withConfig({
  displayName: "RangeContainer",
  componentId: "sc-1co6493-0"
})(["display:flex;padding:var(--spacing-small) 0;justify-content:space-around;& > *{&:first-child{padding-right:var(--spacing-medium);}&:last-child{padding-left:var(--spacing-medium);}}"]);



var styles$k = /*#__PURE__*/Object.freeze({
  Container: Container$8,
  RangeContainer: RangeContainer
});

/**
 * **DateTimeRangePicker** combines the functionality of DatePicker.Range and TimePicker
 * into a single interface. It passes all of its props into DatePicker.Range.
 * @visibleName DateTimePicker.Range
 */

var DateTimeRangePicker =
/*#__PURE__*/
function (_React$PureComponent) {
  inherits(DateTimeRangePicker, _React$PureComponent);

  function DateTimeRangePicker() {
    var _getPrototypeOf2;

    var _this;

    classCallCheck(this, DateTimeRangePicker);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(DateTimeRangePicker)).call.apply(_getPrototypeOf2, [this].concat(args)));

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "state", {
      internalValue: {
        start: undefined,
        end: undefined
      }
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "startDateDisabled", function () {
      return [true, 'startDate'].includes(_this.props.disabled);
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "endDateDisabled", function () {
      return [true, 'endDate'].includes(_this.props.disabled);
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "triggerOnChange", function (_ref) {
      var start = _ref.start,
          end = _ref.end;
      return _this.props.onChange({
        start: _this.startDateDisabled() ? null : start,
        end: _this.endDateDisabled() ? null : end
      });
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleStartTimeChange", function (time) {
      var start = _this.momentStartValue.hours(time.hours()).minutes(time.minutes());

      var newState = {
        start: start,
        end: _this.momentEndValue
      };

      _this.triggerOnChange(newState);

      _this.setState({
        internalValue: newState
      });
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleEndTimeChange", function (time) {
      var end = _this.momentEndValue.hours(time.hours()).minutes(time.minutes());

      var newState = {
        start: _this.momentStartValue,
        end: end
      };

      _this.triggerOnChange(newState);

      _this.setState({
        internalValue: newState
      });
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleDatesChange", function (_ref2) {
      var startDate = _ref2.startDate,
          endDate = _ref2.endDate;
      var newState = {
        start: _this.momentStartValue,
        end: _this.momentEndValue
      };

      if (startDate) {
        newState.start = _this.moment(startDate).hours(_this.momentStartValue.hours()).minutes(_this.momentStartValue.minutes());
      }

      if (endDate) {
        newState.end = _this.moment(endDate).hours(_this.momentEndValue.hours()).minutes(_this.momentEndValue.minutes());
      }

      _this.triggerOnChange(newState);

      _this.setState({
        internalValue: newState
      });
    });

    return _this;
  }

  createClass(DateTimeRangePicker, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          onChange = _this$props.onChange,
          disabledStartText = _this$props.disabledStartText,
          disabledEndText = _this$props.disabledEndText,
          Container = _this$props.Container,
          rest = objectWithoutProperties(_this$props, ["onChange", "disabledStartText", "disabledEndText", "Container"]);

      return React__default.createElement(DatePicker.Range, _extends_1({
        startDatePlaceholderText: this.startDateDisabled() ? disabledStartText : null,
        endDatePlaceholderText: this.endDateDisabled() ? disabledEndText : null,
        startDate: this.startDateDisabled() ? null : this.momentStartValue,
        endDate: this.endDateDisabled() ? null : this.momentEndValue,
        onDatesChange: this.handleDatesChange,
        calendarInfoPosition: "top",
        renderCalendarInfo: function renderCalendarInfo() {
          return React__default.createElement(Container, null, _this2.startDateDisabled() || React__default.createElement(TimePicker, {
            name: "start-time-picker",
            timeFormat: _this2.props.timeDisplayFormat,
            value: _this2.momentStartValue,
            onChange: _this2.handleStartTimeChange
          }), _this2.endDateDisabled() || React__default.createElement(TimePicker, {
            name: "end-time-picker",
            timeFormat: _this2.props.timeDisplayFormat,
            value: _this2.momentEndValue,
            onChange: _this2.handleEndTimeChange
          }));
        }
      }, rest));
    }
  }, {
    key: "moment",
    get: function get() {
      return this.props.utc ? moment.utc : moment;
    }
  }, {
    key: "value",
    get: function get() {
      return this.props.value ? this.props.value : this.state.internalValue;
    }
  }, {
    key: "startValue",
    get: function get() {
      return this.value && this.value.start;
    }
  }, {
    key: "endValue",
    get: function get() {
      return this.value && this.value.end;
    }
  }, {
    key: "momentStartValue",
    get: function get() {
      return this.moment(this.startValue);
    }
  }, {
    key: "momentEndValue",
    get: function get() {
      return this.moment(this.endValue);
    } // Trigger onChange prop

  }]);

  return DateTimeRangePicker;
}(React__default.PureComponent);

defineProperty(DateTimeRangePicker, "propTypes", {
  /**
   * Callback invoked when the datetime is changed. Includes an object with the signature `{startDatetime, endDatetime}`.
   * The values are provided as moment objects.
   */
  onChange: propTypes.func.isRequired,

  /**
   * Moment date time format to display in the input
   */
  displayFormat: propTypes.string,

  /**
   * Moment date time format to display in the time picker
   */
  timeDisplayFormat: propTypes.string,

  /**
   * Use UTC datetime.
   */
  utc: propTypes.bool,

  /**
   * Text to use when the start date is disabled.
   */
  disabledStartText: propTypes.string,

  /**
   * Text to use when the end date is disabled.
   */
  disabledEndText: propTypes.string,

  /**
   * The current datetimes being displayed. If unset, the component will track its own internal state.
   * Datetime should be provided as an object `{start: <moment>, end: <moment>}`, where <moment>
   * is a moment object.
   */
  value: propTypes.object,

  /**
   * Set to true if the component's value is invalid
   */
  invalid: propTypes.bool,

  /**
   * Set to true if the component should be disabled. Alternatively, set to either 'startDate' or 'endDate'
   * to disable a particular part of the component.
   */
  disabled: propTypes.oneOfType([propTypes.bool, propTypes.string]),

  /**
   * Provides a different component to contain the picker
   */
  Container: propTypes.oneOfType([propTypes.object, propTypes.func])
});

defineProperty(DateTimeRangePicker, "defaultProps", {
  onChange: lodash_noop,
  displayFormat: 'MMM DD YYYY [at] hh:mm A',
  timeDisplayFormat: 'hh:mm',
  utc: false,
  disabledStartText: 'Now',
  disabledEndText: 'Forever',
  value: undefined,
  invalid: false,
  disabled: false,
  Container: RangeContainer
});

defineProperty(DateTimeRangePicker, "styles", styles$k);

/**
 * **DateTimePicker** combines the functionality of DatePicker and TimePicker
 * into a single interface. It passes all of its props into DatePicker.
 */

var DateTimePicker =
/*#__PURE__*/
function (_React$PureComponent) {
  inherits(DateTimePicker, _React$PureComponent);

  function DateTimePicker() {
    var _getPrototypeOf2;

    var _this;

    classCallCheck(this, DateTimePicker);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(DateTimePicker)).call.apply(_getPrototypeOf2, [this].concat(args)));

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "state", {
      internalValue: undefined
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleTimeChange", function (time) {
      // Set time on existing datetime
      var newDatetime = _this.momentValue.hours(time.hours()).minutes(time.minutes());

      _this.props.onChange(newDatetime);

      _this.setState({
        internalValue: newDatetime
      });
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleDateChange", function (date) {
      // Set time from existing datetime on incoming date, since it's easier to set hours/minutes than year/month/day
      var newDatetime = _this.moment(date).hours(_this.momentValue.hours()).minutes(_this.momentValue.minutes());

      _this.props.onChange(newDatetime);

      _this.setState({
        internalValue: newDatetime
      });
    });

    return _this;
  }

  createClass(DateTimePicker, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          onChange = _this$props.onChange,
          Container = _this$props.Container,
          rest = objectWithoutProperties(_this$props, ["onChange", "Container"]);

      return React__default.createElement(DatePicker, _extends_1({
        date: this.momentValue,
        onDateChange: this.handleDateChange,
        calendarInfoPosition: "top",
        renderCalendarInfo: function renderCalendarInfo() {
          return React__default.createElement(Container, null, React__default.createElement(TimePicker, {
            name: "time-picker",
            value: _this2.momentValue,
            onChange: _this2.handleTimeChange
          }));
        }
      }, rest));
    }
  }, {
    key: "moment",
    get: function get() {
      return this.props.utc ? moment.utc : moment;
    }
  }, {
    key: "value",
    get: function get() {
      return this.props.value ? this.props.value : this.state.internalValue;
    }
  }, {
    key: "momentValue",
    get: function get() {
      return this.moment(this.value);
    }
  }]);

  return DateTimePicker;
}(React__default.PureComponent);

defineProperty(DateTimePicker, "propTypes", {
  /**
   * A function to handle the datetime when it changes.
   */
  onChange: propTypes.func.isRequired,

  /**
   * Moment date time format to display in the input
   */
  displayFormat: propTypes.string,

  /**
   * Use UTC datetime.
   */
  utc: propTypes.bool,

  /**
   * The current datetime being displayed. If unset, the component will track its own internal state.
   * Datetime should be provided as a moment object.
   */
  value: propTypes.object,

  /**
   * Set to true if the component's value is invalid
   */
  invalid: propTypes.bool,

  /**
   * Set to true if the component should be disabled.
   */
  disabled: propTypes.bool,

  /**
   * Provides a different component to contain the picker
   */
  Container: propTypes.oneOfType([propTypes.object, propTypes.func])
});

defineProperty(DateTimePicker, "defaultProps", {
  onChange: lodash_noop,
  displayFormat: 'MMM DD YYYY [at] hh:mm A',
  utc: false,
  value: undefined,
  invalid: false,
  disabled: false,
  Container: Container$8
});

defineProperty(DateTimePicker, "styles", styles$k);

DateTimePicker.Range = DateTimeRangePicker;

var lodash_partition = createCommonjsModule(function (module, exports) {
/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used to compose bitmasks for comparison styles. */
var UNORDERED_COMPARE_FLAG = 1,
    PARTIAL_COMPARE_FLAG = 2;

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0,
    MAX_SAFE_INTEGER = 9007199254740991;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/,
    reLeadingDot = /^\./,
    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Detect free variable `exports`. */
var freeExports = exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    return freeProcess && freeProcess.binding('util');
  } catch (e) {}
}());

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * A specialized version of `baseAggregator` for arrays.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} setter The function to set `accumulator` values.
 * @param {Function} iteratee The iteratee to transform keys.
 * @param {Object} accumulator The initial aggregated object.
 * @returns {Function} Returns `accumulator`.
 */
function arrayAggregator(array, setter, iteratee, accumulator) {
  var index = -1,
      length = array ? array.length : 0;

  while (++index < length) {
    var value = array[index];
    setter(accumulator, value, iteratee(value), array);
  }
  return accumulator;
}

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array ? array.length : 0;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */
function isHostObject(value) {
  // Many host objects are `Object` objects that can coerce to strings
  // despite having improperly defined `toString` methods.
  var result = false;
  if (value != null && typeof value.toString != 'function') {
    try {
      result = !!(value + '');
    } catch (e) {}
  }
  return result;
}

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

/** Used for built-in method references. */
var arrayProto = Array.prototype,
    funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/** Built-in value references. */
var Symbol = root.Symbol,
    Uint8Array = root.Uint8Array,
    propertyIsEnumerable = objectProto.propertyIsEnumerable,
    splice = arrayProto.splice;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView'),
    Map = getNative(root, 'Map'),
    Promise = getNative(root, 'Promise'),
    Set = getNative(root, 'Set'),
    WeakMap = getNative(root, 'WeakMap'),
    nativeCreate = getNative(Object, 'create');

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  return this.has(key) && delete this.__data__[key];
}

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
}

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  return true;
}

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  return getMapData(this, key)['delete'](key);
}

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  getMapData(this, key).set(key, value);
  return this;
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values ? values.length : 0;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  this.__data__ = new ListCache(entries);
}

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
}

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  return this.__data__['delete'](key);
}

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var cache = this.__data__;
  if (cache instanceof ListCache) {
    var pairs = cache.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      return this;
    }
    cache = this.__data__ = new MapCache(pairs);
  }
  cache.set(key, value);
  return this;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  // Safari 9 makes `arguments.length` enumerable in strict mode.
  var result = (isArray(value) || isArguments(value))
    ? baseTimes(value.length, String)
    : [];

  var length = result.length,
      skipIndexes = !!length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/**
 * Aggregates elements of `collection` on `accumulator` with keys transformed
 * by `iteratee` and values set by `setter`.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} setter The function to set `accumulator` values.
 * @param {Function} iteratee The iteratee to transform keys.
 * @param {Object} accumulator The initial aggregated object.
 * @returns {Function} Returns `accumulator`.
 */
function baseAggregator(collection, setter, iteratee, accumulator) {
  baseEach(collection, function(value, key, collection) {
    setter(accumulator, value, iteratee(value), collection);
  });
  return accumulator;
}

/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */
var baseEach = createBaseEach(baseForOwn);

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return object && baseFor(object, iteratee, keys);
}

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = isKey(path, object) ? [path] : castPath(path);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

/**
 * The base implementation of `getTag`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  return objectToString.call(value);
}

/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {boolean} [bitmask] The bitmask of comparison flags.
 *  The bitmask may be composed of the following flags:
 *     1 - Unordered comparison
 *     2 - Partial comparison
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, customizer, bitmask, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
}

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = arrayTag,
      othTag = arrayTag;

  if (!objIsArr) {
    objTag = getTag(object);
    objTag = objTag == argsTag ? objectTag : objTag;
  }
  if (!othIsArr) {
    othTag = getTag(other);
    othTag = othTag == argsTag ? objectTag : othTag;
  }
  var objIsObj = objTag == objectTag && !isHostObject(object),
      othIsObj = othTag == objectTag && !isHostObject(other),
      isSameTag = objTag == othTag;

  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack);
    return (objIsArr || isTypedArray(object))
      ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)
      : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
  }
  if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack);
      return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack);
  return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
}

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */
function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if ((noCustomizer && data[2])
          ? data[1] !== object[data[0]]
          : !(data[0] in object)
        ) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack;
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === undefined
            ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)
            : result
          )) {
        return false;
      }
    }
  }
  return true;
}

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
}

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */
function baseIteratee(value) {
  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if (typeof value == 'function') {
    return value;
  }
  if (value == null) {
    return identity;
  }
  if (typeof value == 'object') {
    return isArray(value)
      ? baseMatchesProperty(value[0], value[1])
      : baseMatches(value);
  }
  return property(value);
}

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatches(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
  }
  return function(object) {
    return object === source || baseIsMatch(object, source, matchData);
  };
}

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatchesProperty(path, srcValue) {
  if (isKey(path) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey(path), srcValue);
  }
  return function(object) {
    var objValue = get(object, path);
    return (objValue === undefined && objValue === srcValue)
      ? hasIn(object, path)
      : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
  };
}

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyDeep(path) {
  return function(object) {
    return baseGet(object, path);
  };
}

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value) {
  return isArray(value) ? value : stringToPath(value);
}

/**
 * Creates a function like `_.groupBy`.
 *
 * @private
 * @param {Function} setter The function to set accumulator values.
 * @param {Function} [initializer] The accumulator object initializer.
 * @returns {Function} Returns the new aggregator function.
 */
function createAggregator(setter, initializer) {
  return function(collection, iteratee) {
    var func = isArray(collection) ? arrayAggregator : baseAggregator,
        accumulator = initializer ? initializer() : {};

    return func(collection, setter, baseIteratee(iteratee, 2), accumulator);
  };
}

/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseEach(eachFunc, fromRight) {
  return function(collection, iteratee) {
    if (collection == null) {
      return collection;
    }
    if (!isArrayLike(collection)) {
      return eachFunc(collection, iteratee);
    }
    var length = collection.length,
        index = fromRight ? length : -1,
        iterable = Object(collection);

    while ((fromRight ? index-- : ++index < length)) {
      if (iteratee(iterable[index], index, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} customizer The function to customize comparisons.
 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(array);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var index = -1,
      result = true,
      seen = (bitmask & UNORDERED_COMPARE_FLAG) ? new SetCache : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function(othValue, othIndex) {
            if (!seen.has(othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
              return seen.add(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, customizer, bitmask, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} customizer The function to customize comparisons.
 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
  switch (tag) {
    case dataViewTag:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= UNORDERED_COMPARE_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} customizer The function to customize comparisons.
 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
      objProps = keys(object),
      objLength = objProps.length,
      othProps = keys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(object);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */
function getMatchData(object) {
  var result = keys(object),
      length = result.length;

  while (length--) {
    var key = result[length],
        value = object[key];

    result[length] = [key, value, isStrictComparable(value)];
  }
  return result;
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11,
// for data views in Edge < 14, and promises in Node.js.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = objectToString.call(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : undefined;

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath(object, path, hasFunc) {
  path = isKey(path, object) ? [path] : castPath(path);

  var result,
      index = -1,
      length = path.length;

  while (++index < length) {
    var key = toKey(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result) {
    return result;
  }
  var length = object ? object.length : 0;
  return !!length && isLength(length) && isIndex(key, length) &&
    (isArray(object) || isArguments(object));
}

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length &&
    (typeof value == 'number' || reIsUint.test(value)) &&
    (value > -1 && value % 1 == 0 && value < length);
}

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */
function isStrictComparable(value) {
  return value === value && !isObject(value);
}

/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function matchesStrictComparable(key, srcValue) {
  return function(object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue &&
      (srcValue !== undefined || (key in Object(object)));
  };
}

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoize(function(string) {
  string = toString(string);

  var result = [];
  if (reLeadingDot.test(string)) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, string) {
    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to process.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * Creates an array of elements split into two groups, the first of which
 * contains elements `predicate` returns truthy for, the second of which
 * contains elements `predicate` returns falsey for. The predicate is
 * invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the array of grouped elements.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'age': 36, 'active': false },
 *   { 'user': 'fred',    'age': 40, 'active': true },
 *   { 'user': 'pebbles', 'age': 1,  'active': false }
 * ];
 *
 * _.partition(users, function(o) { return o.active; });
 * // => objects for [['fred'], ['barney', 'pebbles']]
 *
 * // The `_.matches` iteratee shorthand.
 * _.partition(users, { 'age': 1, 'active': false });
 * // => objects for [['pebbles'], ['barney', 'fred']]
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.partition(users, ['active', false]);
 * // => objects for [['barney', 'pebbles'], ['fred']]
 *
 * // The `_.property` iteratee shorthand.
 * _.partition(users, 'active');
 * // => objects for [['fred'], ['barney', 'pebbles']]
 */
var partition = createAggregator(function(result, value, key) {
  result[key ? 0 : 1].push(value);
}, function() { return [[], []]; });

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result);
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache);
  return memoized;
}

// Assign cache to `_.memoize`.
memoize.Cache = MapCache;

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
function isArguments(value) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && objectToString.call(value) == symbolTag);
}

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */
function property(path) {
  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}

module.exports = partition;
});

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT$1 = 'Expected a function';

/** Used as references for various `Number` constants. */
var NAN$1 = 0 / 0;

/** `Object#toString` result references. */
var symbolTag$4 = '[object Symbol]';

/** Used to match leading and trailing whitespace. */
var reTrim$1 = /^\s+|\s+$/g;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex$1 = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary$1 = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal$1 = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt$1 = parseInt;

/** Detect free variable `global` from Node.js. */
var freeGlobal$5 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

/** Detect free variable `self`. */
var freeSelf$5 = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root$6 = freeGlobal$5 || freeSelf$5 || Function('return this')();

/** Used for built-in method references. */
var objectProto$7 = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString$7 = objectProto$7.toString;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax$2 = Math.max,
    nativeMin = Math.min;

/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */
var now = function() {
  return root$6.Date.now();
};

/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */
function debounce(func, wait, options) {
  var lastArgs,
      lastThis,
      maxWait,
      result,
      timerId,
      lastCallTime,
      lastInvokeTime = 0,
      leading = false,
      maxing = false,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT$1);
  }
  wait = toNumber$1(wait) || 0;
  if (isObject$5(options)) {
    leading = !!options.leading;
    maxing = 'maxWait' in options;
    maxWait = maxing ? nativeMax$2(toNumber$1(options.maxWait) || 0, wait) : maxWait;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }

  function invokeFunc(time) {
    var args = lastArgs,
        thisArg = lastThis;

    lastArgs = lastThis = undefined;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }

  function leadingEdge(time) {
    // Reset any `maxWait` timer.
    lastInvokeTime = time;
    // Start the timer for the trailing edge.
    timerId = setTimeout(timerExpired, wait);
    // Invoke the leading edge.
    return leading ? invokeFunc(time) : result;
  }

  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime,
        result = wait - timeSinceLastCall;

    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
  }

  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime;

    // Either this is the first call, activity has stopped and we're at the
    // trailing edge, the system time has gone backwards and we're treating
    // it as the trailing edge, or we've hit the `maxWait` limit.
    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
  }

  function timerExpired() {
    var time = now();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    // Restart the timer.
    timerId = setTimeout(timerExpired, remainingWait(time));
  }

  function trailingEdge(time) {
    timerId = undefined;

    // Only invoke if we have `lastArgs` which means `func` has been
    // debounced at least once.
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = undefined;
    return result;
  }

  function cancel() {
    if (timerId !== undefined) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = undefined;
  }

  function flush() {
    return timerId === undefined ? result : trailingEdge(now());
  }

  function debounced() {
    var time = now(),
        isInvoking = shouldInvoke(time);

    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;

    if (isInvoking) {
      if (timerId === undefined) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        // Handle invocations in a tight loop.
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === undefined) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}

/**
 * Creates a throttled function that only invokes `func` at most once per
 * every `wait` milliseconds. The throttled function comes with a `cancel`
 * method to cancel delayed `func` invocations and a `flush` method to
 * immediately invoke them. Provide `options` to indicate whether `func`
 * should be invoked on the leading and/or trailing edge of the `wait`
 * timeout. The `func` is invoked with the last arguments provided to the
 * throttled function. Subsequent calls to the throttled function return the
 * result of the last `func` invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the throttled function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.throttle` and `_.debounce`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to throttle.
 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=true]
 *  Specify invoking on the leading edge of the timeout.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new throttled function.
 * @example
 *
 * // Avoid excessively updating the position while scrolling.
 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
 *
 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
 * jQuery(element).on('click', throttled);
 *
 * // Cancel the trailing throttled invocation.
 * jQuery(window).on('popstate', throttled.cancel);
 */
function throttle(func, wait, options) {
  var leading = true,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT$1);
  }
  if (isObject$5(options)) {
    leading = 'leading' in options ? !!options.leading : leading;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }
  return debounce(func, wait, {
    'leading': leading,
    'maxWait': wait,
    'trailing': trailing
  });
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject$5(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike$6(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol$4(value) {
  return typeof value == 'symbol' ||
    (isObjectLike$6(value) && objectToString$7.call(value) == symbolTag$4);
}

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber$1(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol$4(value)) {
    return NAN$1;
  }
  if (isObject$5(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject$5(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim$1, '');
  var isBinary = reIsBinary$1.test(value);
  return (isBinary || reIsOctal$1.test(value))
    ? freeParseInt$1(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex$1.test(value) ? NAN$1 : +value);
}

var lodash_throttle = throttle;

/**
 *  **DragBoxSelect** is a specialized usage of [DragBox](/#!/DragBox) that is also accessible via `DragBox.Select`. It is
 *  provided as a convenience as it is a commonly used group of components. All properties available in both
 *  [Selectable](/#!/Selectable) and [DragBox](/#!/DragBox) are passed into the `renderContents`
 *  render prop for **DragBoxSelect**.
 * @visibleName DragBox.Select
 */

var DragBoxSelect =
/*#__PURE__*/
function (_React$Component) {
  inherits(DragBoxSelect, _React$Component);

  function DragBoxSelect() {
    var _getPrototypeOf2;

    var _this;

    classCallCheck(this, DragBoxSelect);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(DragBoxSelect)).call.apply(_getPrototypeOf2, [this].concat(args)));

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "renderDragBox", function (selectableProps) {
      var _assertThisInitialize = assertThisInitialized(assertThisInitialized(_this)),
          _assertThisInitialize2 = _assertThisInitialize.props,
          _renderContents = _assertThisInitialize2.renderContents,
          rest = objectWithoutProperties(_assertThisInitialize2, ["renderContents"]);

      return React__default.createElement(DragBox, _extends_1({}, _this.props, {
        onCollisionBegin: function onCollisionBegin(items) {
          return items.forEach(selectableProps.toggleItem);
        },
        onCollisionEnd: function onCollisionEnd(items) {
          return items.forEach(selectableProps.toggleItem);
        },
        renderContents: function renderContents(dragBoxProps) {
          return _renderContents(objectSpread({}, dragBoxProps, selectableProps));
        }
      }, rest));
    });

    return _this;
  }

  createClass(DragBoxSelect, [{
    key: "render",
    value: function render() {
      return React__default.createElement(Selectable, {
        render: this.renderDragBox
      });
    }
  }]);

  return DragBoxSelect;
}(React__default.Component);

defineProperty(DragBoxSelect, "propTypes", {
  /**
   * Callback invoked when the mouse is clicked in the **DragBoxSelect** area
   */
  onMouseDown: propTypes.func,

  /**
   * Callback invoked when the mouse is released in the **DragBoxSelect** area.
   * Passed the **Set** of collision keys as its argument.
   */
  onMouseUp: propTypes.func,

  /**
   * Callback invoked when the **DragBoxSelect** box set of collisions changes.
   * Called with an object that has two keys, `added` and `removed`, each
   * with an array of items that were just added or removed respectively
   * to the collision set.
   */
  onCollisionChange: propTypes.func,

  /**
   * Callback invoked when the **DragBoxSelect** box collides with new items
   * that it wasn't colliding with at the previous mouse position.
   * Called with an array of items that have just been collided with.
   */
  onCollisionBegin: propTypes.func,

  /**
   * Callback invoked when the **DragBoxSelect** box stops colliding with items
   * that it was colliding with at the previous mouse position.
   * Called with an array of items that have just stopped colliding.
   */
  onCollisionEnd: propTypes.func,

  /**
   * Render prop to render contents inside **DragBoxSelect**.
   * Supports all callbacks that **DragBoxSelect** itself supports as well as the following props:
   *
   * *collisions*: The **Set** of keys that are currently being collided with
   *
   * *getRef*: A function that should be passed into the `ref` property of each child
   * that can be selected by **DragBoxSelect**. It should be called with a unique key
   * for each component. For example, `<button ref={getRef("uniquekey")} key="uniquekey" />`.
   */
  renderContents: propTypes.func,

  /**
   * Render prop to render the draggable rectangle. It is passed an object with the left, top, width, and height of
   * the rectangle to be drawn should return the component to render.
   */
  renderRect: propTypes.func
});

function _templateObject$2() {
  var data = taggedTemplateLiteral(["\n          & > * {\n            pointer-events: none;\n          }\n        "]);

  _templateObject$2 = function _templateObject() {
    return data;
  };

  return data;
}
var Div = styled__default.div.withConfig({
  displayName: "Div",
  componentId: "ci2a5r-0"
})(["", ";"], function (_ref) {
  var disablePointerEvents = _ref.disablePointerEvents;
  return disablePointerEvents ? css(_templateObject$2()) : null;
});

var Rect = styled__default.div.withConfig({
  displayName: "Rect",
  componentId: "sc-1w1635r-0"
})(["border-width:2px;border-color:black;border-style:dotted;z-index:100000;position:fixed;pointer-events:none;"]);

// avoid missed clicks on buttons when moving the mouse inaccurately.
// TODO: We should probably turn on drag box once this size is met and not turn it off until
// the mouse button is released

var MIN_SIZE_DRAGBOX = 16;
/**
 * **DragBox** creates an area where the user can drag a box that can then control other types of behavior. It is intended to
 * be used with the [Selectable](/#!/Selectable) behavior, though it can be used for general purposes. For a prebuilt implementation
 * of **DragBox** with [Selectable](/#!/Selectable), use [DragBox.Select](#!/DragBoxSelect).
 *
 * **DragBox** uses render props, which means that it takes functions that it passes several arguments and uses the result
 * of that function to perform renders. This allows it to be easily composed with other types of components.
 *
 * **DragBox** requires that the `getRef()` function be passed down and called in the `ref` property of each React
 * component that should be selectable. Note that this requires that the component have an instance - it cannot be a
 * purely functional component. **DragBox.Item** is provided as a simple wrapper component for this purpose.
 */

var DragBox$1 =
/*#__PURE__*/
function (_React$Component) {
  inherits(DragBox, _React$Component);

  function DragBox() {
    var _getPrototypeOf2;

    var _this;

    classCallCheck(this, DragBox);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(DragBox)).call.apply(_getPrototypeOf2, [this].concat(args)));

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "state", {
      mouseDown: false,
      start: null,
      end: null,
      collisions: new Set(),
      scrollLeft: 0,
      scrollTop: 0
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "getScrollElement", function () {
      return _this.props.scrollSelector && window.document.querySelector(_this.props.scrollSelector) || window.document.documentElement;
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "getScroll", function () {
      return lodash_pick(_this.getScrollElement(), ['scrollLeft', 'scrollTop']);
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "attachScrollSelector", function () {
      var el = _this.getScrollElement();

      el.addEventListener('scroll', _this.throttledScroll);
      window.document.addEventListener('mousemove', _this.handleMouseMove);
      window.document.addEventListener('mouseup', _this.handleMouseUp);
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "detachScrollSelector", function () {
      var el = _this.getScrollElement();

      el.removeEventListener('scroll', _this.throttledScroll);
      window.document.removeEventListener('mousemove', _this.handleMouseMove);
      window.document.removeEventListener('mouseup', _this.handleMouseUp);
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "getMousePosition", function (ev) {
      var customScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      if (_this.getScrollElement() === window.document.documentElement) {
        return {
          x: ev.pageX,
          y: ev.pageY
        };
      }

      return _this.addScroll({
        x: ev.pageX,
        y: ev.pageY
      }, customScroll);
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "__handleScroll", function (ev) {
      var _assertThisInitialize = assertThisInitialized(assertThisInitialized(_this)),
          _assertThisInitialize2 = _assertThisInitialize.state,
          lastScrollLeft = _assertThisInitialize2.scrollLeft,
          lastScrollTop = _assertThisInitialize2.scrollTop,
          lastEnd = _assertThisInitialize2.end;

      var _this$getScroll = _this.getScroll(),
          scrollLeft = _this$getScroll.scrollLeft,
          scrollTop = _this$getScroll.scrollTop; // If the mouse is being held down as we scroll, we need to adjust the rectangle


      var end = lastEnd ? {
        x: lastEnd.x + (scrollLeft - lastScrollLeft),
        y: lastEnd.y + (scrollTop - lastScrollTop)
      } : null;

      _this.setState({
        end: end,
        scrollLeft: scrollLeft,
        scrollTop: scrollTop
      });

      _this.checkChildrenBoxCollisions();
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "throttledScroll", lodash_throttle(_this.__handleScroll, 50));

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "addScroll", function (_ref) {
      var x = _ref.x,
          y = _ref.y;
      var customScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      return {
        x: x + (customScroll || _this.state).scrollLeft,
        y: y + (customScroll || _this.state).scrollTop
      };
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleMouseDown", function (ev) {
      // Left click
      if (ev.button !== 0) return;

      _this.attachScrollSelector(); // When we start dragging, it's possible that we dragged a bunch
      // and now our scroll state is invalid. We update the scroll state
      // while using the new scroll state to calculate the mouse positions


      var _this$getScroll2 = _this.getScroll(),
          scrollLeft = _this$getScroll2.scrollLeft,
          scrollTop = _this$getScroll2.scrollTop;

      _this.setState({
        scrollLeft: scrollLeft,
        scrollTop: scrollTop,
        mouseDown: true,
        start: _this.getMousePosition(ev, {
          scrollLeft: scrollLeft,
          scrollTop: scrollTop
        }),
        end: _this.getMousePosition(ev, {
          scrollLeft: scrollLeft,
          scrollTop: scrollTop
        })
      });

      _this.props.onMouseDown();
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleMouseUp", function (ev) {
      if (!_this.state.mouseDown) {
        return;
      }

      if (ev.button !== 0) return;

      _this.detachScrollSelector();

      _this.props.onMouseUp(_this.state.collisions);

      _this.setState({
        mouseDown: false,
        start: null,
        end: null,
        collisions: new Set()
      });
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleMouseMove", function (ev) {
      if (!_this.state.mouseDown) {
        return;
      }

      ev.preventDefault();

      _this.setState({
        end: _this.getMousePosition(ev)
      });

      _this.checkChildrenBoxCollisions();
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "calcRect", function () {
      var _assertThisInitialize3 = assertThisInitialized(assertThisInitialized(_this)),
          _assertThisInitialize4 = _assertThisInitialize3.state,
          start = _assertThisInitialize4.start,
          end = _assertThisInitialize4.end,
          scrollLeft = _assertThisInitialize4.scrollLeft,
          scrollTop = _assertThisInitialize4.scrollTop;

      if (!start || !end) return {};
      return {
        x: Math.min(start.x, end.x) - scrollLeft,
        y: Math.min(start.y, end.y) - scrollTop,
        width: Math.abs(start.x - end.x),
        height: Math.abs(start.y - end.y)
      };
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "checkChildrenBoxCollisions", function () {
      var _assertThisInitialize5 = assertThisInitialized(assertThisInitialized(_this)),
          _assertThisInitialize6 = _assertThisInitialize5.props,
          onCollisionBegin = _assertThisInitialize6.onCollisionBegin,
          onCollisionEnd = _assertThisInitialize6.onCollisionEnd,
          onCollisionChange = _assertThisInitialize6.onCollisionChange,
          collisions = _assertThisInitialize5.state.collisions;

      var collisionBox = _this.calcRect(); // Divide all clickable refs into two arrays based on whether they are colliding or not.


      var itemElements = _this.dragElement.querySelectorAll('[data-drag-box-key]');

      var _partition = lodash_partition(itemElements, function (node) {
        var childRect = node.getBoundingClientRect(); // We are looking for intersections of the edges of the rectangle.

        return _this.checkBoxCollision(childRect, collisionBox) && !_this.checkBoxContains(childRect, collisionBox);
      }),
          _partition2 = slicedToArray(_partition, 2),
          collidingNodes = _partition2[0],
          notCollidingNodes = _partition2[1];

      var colliding = collidingNodes.map(function (node) {
        return node.getAttribute('data-drag-box-key');
      });
      var notColliding = notCollidingNodes.map(function (node) {
        return node.getAttribute('data-drag-box-key');
      }); // Pull out elements that haven't changed their collision state.

      var added = colliding.filter(function (key) {
        return !collisions.has(key);
      });
      var removed = notColliding.filter(function (key) {
        return collisions.has(key);
      }); //Update collisions set

      added.forEach(function (i) {
        return collisions.add(i);
      });
      removed.forEach(function (i) {
        return collisions.delete(i);
      }); //Invoke callbacks if necessary

      if (added.length > 0) {
        onCollisionBegin(added);
      }

      if (removed.length > 0) {
        onCollisionEnd(removed);
      }

      if (added.length > 0 || removed.length > 0) {
        onCollisionChange({
          added: added,
          removed: removed
        });
      }

      _this.setState({
        collisions: collisions
      });
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "checkBoxCollision", function (b1, b2) {
      return b1.x < b2.x + b2.width && b1.x + b1.width > b2.x && b1.y < b2.y + b2.height && b1.height + b1.y > b2.y;
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "checkBoxContains", function (b1, b2) {
      return b1.x <= b2.x && b2.x <= b1.x + b1.width && b1.x <= b2.x + b2.width && b2.x + b2.width <= b1.x + b1.width && b1.y <= b2.y && b2.y <= b1.y + b1.height && b1.y <= b2.y + b2.height && b2.y + b2.height <= b1.y + b1.height;
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "shouldDrawRect", function (rect) {
      var _assertThisInitialize7 = assertThisInitialized(assertThisInitialized(_this)),
          mouseDown = _assertThisInitialize7.state.mouseDown;

      return mouseDown && (rect.width + 1) * (rect.height + 1) >= MIN_SIZE_DRAGBOX;
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "renderRect", function (rect) {
      var _assertThisInitialize8 = assertThisInitialized(assertThisInitialized(_this)),
          renderRect = _assertThisInitialize8.props.renderRect,
          shouldDrawRect = _assertThisInitialize8.shouldDrawRect;

      if (!shouldDrawRect(rect)) return;
      return renderRect({
        left: rect.x,
        top: rect.y,
        width: rect.width,
        height: rect.height
      });
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "getRef", function (key) {
      return function (el) {
        if (el !== null) {
          el.setAttribute('data-drag-box-key', key);
        }
      };
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "itemRef", function (el) {
      if (el === null) {
        return;
      }

      var key = el.getAttribute('data-drag-box-key');

      if (!key) {
        throw new Error("You used the `ref` mode for DragBox, but did not provide a `data-drag-box-key` attribute to the referenced element. This is not allowed. If you can't provide a custom data prop to the element, please use the `getRef(key)` mode");
      }
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "renderContents", function () {
      var _assertThisInitialize9 = assertThisInitialized(assertThisInitialized(_this)),
          _assertThisInitialize10 = _assertThisInitialize9.props,
          onCollisionChange = _assertThisInitialize10.onCollisionChange,
          onCollisionBegin = _assertThisInitialize10.onCollisionBegin,
          onCollisionEnd = _assertThisInitialize10.onCollisionEnd,
          onMouseUp = _assertThisInitialize10.onMouseUp,
          onMouseDown = _assertThisInitialize10.onMouseDown,
          renderContents = _assertThisInitialize10.renderContents,
          collisions = _assertThisInitialize9.state.collisions,
          getRef = _assertThisInitialize9.getRef,
          itemRef = _assertThisInitialize9.itemRef;

      return renderContents({
        onMouseDown: onMouseDown,
        onMouseUp: onMouseUp,
        onCollisionChange: onCollisionChange,
        onCollisionBegin: onCollisionBegin,
        onCollisionEnd: onCollisionEnd,
        collisions: collisions,
        getRef: getRef,
        ref: itemRef
      });
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "refDragElement", function (el) {
      return _this.dragElement = el;
    });

    return _this;
  }

  createClass(DragBox, [{
    key: "render",
    value: function render() {
      var refDragElement = this.refDragElement,
          handleMouseDown = this.handleMouseDown,
          renderRect = this.renderRect,
          renderContents = this.renderContents,
          calcRect = this.calcRect,
          _this$props = this.props,
          disablePointerEventsWhileDragging = _this$props.disablePointerEventsWhileDragging,
          children = _this$props.children,
          onCollisionChange = _this$props.onCollisionChange,
          onCollisionBegin = _this$props.onCollisionBegin,
          onCollisionEnd = _this$props.onCollisionEnd,
          onMouseDown = _this$props.onMouseDown,
          rest = objectWithoutProperties(_this$props, ["disablePointerEventsWhileDragging", "children", "onCollisionChange", "onCollisionBegin", "onCollisionEnd", "onMouseDown"]);

      var rect = calcRect();
      return React__default.createElement(Div, _extends_1({
        ref: refDragElement,
        onMouseDown: handleMouseDown,
        disablePointerEvents: disablePointerEventsWhileDragging && this.shouldDrawRect(rect)
      }, rest), renderRect(rect), renderContents());
    }
  }]);

  return DragBox;
}(React__default.Component);

defineProperty(DragBox$1, "propTypes", {
  /**
   * Callback invoked when the mouse is clicked in the **DragBox** area
   */
  onMouseDown: propTypes.func,

  /**
   * Callback invoked when the mouse is released in the **DragBox** area.
   * Passed the **Set** of collision keys as its argument.
   */
  onMouseUp: propTypes.func,

  /**
   * Callback invoked when the **DragBox** box set of collisions changes.
   * Called with an object that has two keys, `added` and `removed`, each
   * with an array of items that were just added or removed respectively
   * to the collision set.
   */
  onCollisionChange: propTypes.func,

  /**
   * Callback invoked when the **DragBox** box collides with new items
   * that it wasn't colliding with at the previous mouse position.
   * Called with an array of items that have just been collided with.
   */
  onCollisionBegin: propTypes.func,

  /**
   * Callback invoked when the **DragBox** box stops colliding with items
   * that it was colliding with at the previous mouse position.
   * Called with an array of items that have just stopped colliding.
   */
  onCollisionEnd: propTypes.func,

  /**
   * Render prop to render contents inside **DragBox**.
   * Supports all callbacks that **DragBox** itself supports as well as the following props:
   *
   * *collisions*: The **Set** of keys that are currently being collided with
   *
   * *getRef*: A function that should be passed into the `ref` property of each child
   * that can be selected by **DragBox**. It should be called with a unique key
   * for each component. For example, `<button ref={getRef("uniquekey")} key="uniquekey" />`.
   */
  renderContents: propTypes.func,

  /**
   * Render prop to render the draggable rectangle. It is passed an object with the left, top, width, and height of
   * the rectangle to be drawn should return the component to render.
   */
  renderRect: propTypes.func,

  /**
   * The selector for the element to attach the scroll listener to. Defaults to page body. Do not change after initial call.
   */
  scrollSelector: propTypes.string,

  /**
   * Disables mouse events (such as hover) on children while dragging.
   */
  disablePointerEventsWhileDragging: propTypes.bool
});

defineProperty(DragBox$1, "defaultProps", {
  onMouseDown: lodash_noop,
  onMouseUp: lodash_noop,
  onCollisionChange: lodash_noop,
  onCollisionBegin: lodash_noop,
  onCollisionEnd: lodash_noop,
  renderContents: lodash_noop,
  scrollSelector: null,
  disablePointerEventsWhileDragging: false,
  renderRect: function renderRect(_ref2) {
    var left = _ref2.left,
        top = _ref2.top,
        width = _ref2.width,
        height = _ref2.height;
    return React__default.createElement(Rect, {
      style: {
        left: left,
        top: top,
        width: width,
        height: height
      }
    });
  }
});

DragBox$1.Select = DragBoxSelect;

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }
}

var arrayWithoutHoles = _arrayWithoutHoles;

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

var iterableToArray = _iterableToArray;

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

var nonIterableSpread = _nonIterableSpread;

function _toConsumableArray(arr) {
  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();
}

var toConsumableArray = _toConsumableArray;

var Container$9 = styled__default.div.withConfig({
  displayName: "Container",
  componentId: "zvhd45-0"
})(["& + &{padding-top:", ";}"], themeGet('spacing.small'));

var DragItemContainer = styled__default.div.withConfig({
  displayName: "DragItemContainer",
  componentId: "uqe3nl-0"
})(["opacity:", ";transition:0.2s ease all;& .DragGroupItem--handle{cursor:move;cursor:grab;}"], function (_ref) {
  var isDragging = _ref.isDragging;
  return isDragging ? '0' : '1';
});

var DropAreaContent = styled__default.div.withConfig({
  displayName: "DropAreaContent",
  componentId: "kppbcf-0"
})(["position:relative;min-height:8px;&::before{content:'';position:absolute;left:0;right:0;top:0;bottom:0;border-width:", ";border-style:solid;border-color:", ";opacity:", ";pointer-events:none;transition:opacity 0.2s ease;z-index:1;background:", ";}&::after{display:", ";content:'Drop here';text-transform:uppercase;color:", ";font-size:1em;font-weight:700;position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);z-index:2;}"], themeGet('thicknesses.wide'), themeGet('colors.gray.light'), function (props) {
  return props.canDrop ? 1 : 0;
}, function (_ref) {
  var isOver = _ref.isOver;
  return isOver ? 'var(--colors-gray-light)' : 'var(--colors-background-default)';
}, function (_ref2) {
  var canDrop = _ref2.canDrop;
  return canDrop ? 'block' : 'none';
}, themeGet('colors.gray.medium'));

var ItemsContainer = styled__default.div.withConfig({
  displayName: "ItemsContainer",
  componentId: "sc-16w0l7d-0"
})([""]);

var DragGroupSeparatorContainer = styled__default.div.withConfig({
  displayName: "DragGroupSeparatorContainer",
  componentId: "sc-1iwop8v-0"
})(["position:relative;display:flex;height:", ";cursor:pointer;user-select:none;opacity:0;&:hover{opacity:1;}&::after{content:'';width:100%;position:absolute;top:calc(50% - 1px);border-bottom-width:", ";border-bottom-style:dashed;border-bottom-color:", ";}"], themeGet('spacing.medium'), themeGet('thicknesses.normal'), themeGet('colors.gray.medium'));

var Content$1 = styled__default.div.withConfig({
  displayName: "DragGroupSeparatorContent",
  componentId: "sc-1br0h3h-0"
})(["background:", ";color:", ";text-transform:uppercase;position:relative;z-index:10;font-size:10px;", " > &{margin:auto;}"], themeGet('colors.background.default'), themeGet('colors.gray.medium'), DragGroupSeparatorContainer);

var index$1 = (function (_ref) {
  var children = _ref.children,
      rest = objectWithoutProperties(_ref, ["children"]);

  return React__default.createElement(DragGroupSeparatorContainer, rest, React__default.createElement(Content$1, null, children));
});

var Container$a = styled__default.div.withConfig({
  displayName: "DragGroupTitleContainer",
  componentId: "sc-6wgs85-0"
})(["display:flex;flex-direction:row;position:relative;margin-bottom:", ";&::before{content:\"", "\";font-family:", ";font-size:10px;transform:", ";transition:transform 0.2s ease;flex:0 0 auto;margin:auto;}&::after{content:'';border-bottom-width:", ";border-bottom-style:dashed;border-bottom-color:", ";flex:1 0 0;margin:auto;}& > ", "{display:none;position:absolute;right:0;background:", ";font-size:12px;color:", ";}&:hover > ", "{display:block;}"], themeGet('spacing.small'), icons('expandArrow'), themeGet('fonts.icon'), function (_ref) {
  var expanded = _ref.expanded;
  return expanded ? 'rotate(0deg)' : 'rotate(-90deg)';
}, themeGet('thicknesses.normal'), themeGet('colors.border.medium'), Icon, themeGet('colors.background.default'), themeGet('colors.text.default'), Icon);

var Content$2 = styled__default.span.withConfig({
  displayName: "DragGroupTitleContent",
  componentId: "gtrokn-0"
})(["display:inline-block;font-size:10px;font-weight:bold;margin-left:", ";border-width:", ";border-style:solid;border-color:", ";border-radius:3px;padding:0 ", ";padding-top:1px;background:", ";text-transform:uppercase;"], themeGet('spacing.small'), themeGet('thicknesses.normal'), themeGet('colors.border.medium'), themeGet('spacing.small'), themeGet('colors.background.default'));

var index$2 = (function (_ref) {
  var children = _ref.children,
      expanded = _ref.expanded,
      onDelete = _ref.onDelete;
  return React__default.createElement(Container$a, {
    expanded: expanded
  }, React__default.createElement(Content$2, null, children), React__default.createElement(Icon, {
    name: "delete3",
    onClick: onDelete
  }));
});



var styles$l = /*#__PURE__*/Object.freeze({
  Container: Container$9,
  DragItemContainer: DragItemContainer,
  DropAreaContent: DropAreaContent,
  ItemsContainer: ItemsContainer,
  Separator: index$1,
  Title: index$2
});

/**
 * The droppable area of a DragGroup. Connected to react-dnd.
 * Renders its children when idle, but if a dragging operation is
 * ongoing, its default Content presenter will render a
 * drop zone box.
 *
 * You may reference this component if you choose to override it
 * in DragGroup, otherwise it is not needed. See DragGroup docs.
 */

var DragGroupDropArea =
/*#__PURE__*/
function (_React$Component) {
  inherits(DragGroupDropArea, _React$Component);

  function DragGroupDropArea() {
    classCallCheck(this, DragGroupDropArea);

    return possibleConstructorReturn(this, getPrototypeOf(DragGroupDropArea).apply(this, arguments));
  }

  createClass(DragGroupDropArea, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          connectDropTarget = _this$props.connectDropTarget,
          Content = _this$props.Content,
          canDrop = _this$props.canDrop,
          isOver = _this$props.isOver,
          children = _this$props.children,
          groupId = _this$props.groupId,
          rest = objectWithoutProperties(_this$props, ["connectDropTarget", "Content", "canDrop", "isOver", "children", "groupId"]);

      return connectDropTarget(React__default.createElement("div", rest, React__default.createElement(Content, {
        canDrop: canDrop,
        isOver: isOver
      }, children)));
    }
  }]);

  return DragGroupDropArea;
}(React__default.Component);

defineProperty(DragGroupDropArea, "propTypes", {
  itemType: propTypes.string.isRequired,
  groupId: propTypes.number.isRequired,
  Content: propTypes.oneOfType([propTypes.func, propTypes.object])
});

defineProperty(DragGroupDropArea, "defaultProps", {
  Content: DropAreaContent
});

defineProperty(DragGroupDropArea, "styles", styles$l);

var dropSource = {
  drop: function drop(props) {
    return {
      type: 'group',
      groupId: props.groupId
    };
  }
};

var collect$1 = function collect(connect, monitor) {
  return {
    connectDropTarget: connect.dropTarget(),
    canDrop: monitor.canDrop(),
    isOver: monitor.isOver()
  };
};

var DropArea = reactDnd.DropTarget(function (props) {
  return props.itemType;
}, dropSource, collect$1)(DragGroupDropArea);

/**
 * Used to wrap an item used in DragGroup. See DragGroup documentation.
 * @visibleName DragGroup.Item
 */

var DragGroupItem =
/*#__PURE__*/
function (_React$Component) {
  inherits(DragGroupItem, _React$Component);

  function DragGroupItem() {
    var _getPrototypeOf2;

    var _this;

    classCallCheck(this, DragGroupItem);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(DragGroupItem)).call.apply(_getPrototypeOf2, [this].concat(args)));

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "wrapDragHandle", function (dragHandleNode) {
      return (
        /**
         * The element passed to connectDragSource must be a plain
         * React element, not a component. Thus, to do proper
         * vendor prefixing with styling, we assign a class name
         * and target it from DragItemContainer's styles; see
         * styles/DragItemContainer.js
         */
        _this.props.connectDragSource(React__default.createElement("div", {
          className: "DragGroupItem--handle",
          style: {
            display: _this.props.canDrag ? 'block' : 'none'
          }
        }, dragHandleNode))
      );
    });

    return _this;
  }

  createClass(DragGroupItem, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      // Use empty image as a drag preview so browsers don't draw it
      // and we can draw whatever we want on the custom drag layer instead.
      this.props.connectDragPreview(HTML5Backend.getEmptyImage(), {
        // IE fallback: specify that we'd rather screenshot the node
        // when it already knows it's being dragged so we can hide it with CSS.
        captureDraggingState: true
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          connectDragSource = _this$props.connectDragSource,
          connectDragPreview = _this$props.connectDragPreview,
          isDragging = _this$props.isDragging,
          children = _this$props.children,
          onMove = _this$props.onMove,
          rest = objectWithoutProperties(_this$props, ["connectDragSource", "connectDragPreview", "isDragging", "children", "onMove"]),
          wrapDragHandle = this.wrapDragHandle;

      return React__default.createElement(DragItemContainer, _extends_1({
        isDragging: isDragging
      }, rest), React__default.createElement(DragContext.Provider, {
        value: {
          isDragging: isDragging,
          wrapDragHandle: wrapDragHandle
        }
      }, children));
    }
  }]);

  return DragGroupItem;
}(React__default.Component);

defineProperty(DragGroupItem, "propTypes", {
  /**
   * Must be exactly one node. The children will be passed a
   * `wrapDragHandle` prop which MUST be used to wrap the draggable
   * portion of the child content inside the child's render function
   */
  children: propTypes.node.isRequired,

  /**
   * Called with (fromGroupId, toGroupId) when the item is moved
   * between groups.
   */
  onMove: propTypes.func.isRequired,

  /**
   * Provided by parent DragGroup
   * Indicates the current parent's group id.
   */
  groupId: propTypes.oneOfType([propTypes.func, propTypes.number])
});

defineProperty(DragGroupItem, "styles", styles$l);

var itemSource = {
  beginDrag: function beginDrag(props, monitor, component) {
    var domNode = ReactDOM__default.findDOMNode(component);
    var clientRect = domNode.getBoundingClientRect();
    return {
      children: props.children,
      dimensions: clientRect
    };
  },
  endDrag: function endDrag(props, monitor, component) {
    if (!monitor.didDrop()) {
      return;
    }

    var item = monitor.getItem();
    var dropResult = monitor.getDropResult();

    if (dropResult.type === 'group') {
      props.onMove(props.groupId, dropResult.groupId);
    }
  }
};

var collect$2 = function collect(connect, monitor) {
  return {
    connectDragSource: connect.dragSource(),
    connectDragPreview: connect.dragPreview(),
    isDragging: monitor.isDragging()
  };
};

var DragItem = reactDnd.DragSource(function (props) {
  return props.itemType;
}, itemSource, collect$2)(DragGroupItem);

/**
 * A group of items which can be dragged into other `DragGroups` depending
 * on `itemType`. The ordering of items within a group is arbitrary and non-editable.
 * Dragging is not enabled until more than one group is present.
 *
 * > **Note:** You must include [BandwidthProvider](/#!/BandwidthProvider)
 * at or near the root of your application to use drag and drop functionality.
 */

var DragGroup =
/*#__PURE__*/
function (_React$Component) {
  inherits(DragGroup, _React$Component);

  function DragGroup() {
    var _getPrototypeOf2,
        _this2 = this;

    var _this;

    classCallCheck(this, DragGroup);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(DragGroup)).call.apply(_getPrototypeOf2, [this].concat(args)));

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "calcOverrideExpanded", function () {
      var _this$props = _this.props,
          allowDrag = _this$props.allowDrag,
          canDrop = _this$props.canDrop,
          collapsible = _this$props.collapsible;

      if (!collapsible || !allowDrag || canDrop) {
        return true;
      }

      return null;
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "shimChild", function (child, index) {
      var _this$props2 = _this.props,
          itemType = _this$props2.itemType,
          allowDrag = _this$props2.allowDrag,
          groupId = _this$props2.groupId;
      return React__default.cloneElement(child, {
        itemType: itemType,
        canDrag: allowDrag,
        groupId: groupId
      });
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "renderTitle", function (expanded) {
      return _this.props.allowDrag ? React__default.createElement(_this2.props.Title, {
        expanded: expanded,
        onDelete: _this.props.onRemoved
      }, _this.props.name) : null;
    });

    return _this;
  }

  createClass(DragGroup, [{
    key: "renderInterspersedSeparators",
    value: function renderInterspersedSeparators() {
      var _this3 = this;

      var _this$props3 = this.props,
          children = _this$props3.children,
          Separator = _this$props3.Separator,
          onSplit = _this$props3.onSplit,
          separatorContent = _this$props3.separatorContent;
      var childArray = React__default.Children.toArray(children);
      return childArray.reduce(function (withSeparators, child, idx) {
        return toConsumableArray(withSeparators).concat([React__default.createElement(Separator, {
          className: "dragGroupSeparator",
          onClick: function onClick() {
            return onSplit(idx);
          },
          key: "separator".concat(child.key || idx)
        }, separatorContent), _this3.shimChild(child, idx)]);
      }, []).slice(1); // removing first separator
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props4 = this.props,
          Title = _this$props4.Title,
          Container = _this$props4.Container,
          ItemsContainer$$1 = _this$props4.ItemsContainer,
          ExpandContentContainer = _this$props4.ExpandContentContainer,
          DropArea$$1 = _this$props4.DropArea,
          itemType = _this$props4.itemType,
          groupId = _this$props4.groupId,
          canDrop = _this$props4.canDrop,
          onSplit = _this$props4.onSplit,
          onRemoved = _this$props4.onRemoved,
          onItemDropped = _this$props4.onItemDropped,
          rest = objectWithoutProperties(_this$props4, ["Title", "Container", "ItemsContainer", "ExpandContentContainer", "DropArea", "itemType", "groupId", "canDrop", "onSplit", "onRemoved", "onItemDropped"]);

      return React__default.createElement(Container, rest, React__default.createElement(ExpandToggle, {
        startExpanded: true,
        toggleContent: this.renderTitle,
        isExpanded: this.calcOverrideExpanded(),
        springConfig: {
          stiffness: 200,
          damping: 20
        }
      }, React__default.createElement(DropArea$$1, {
        itemType: itemType,
        groupId: groupId
      }, React__default.createElement(ItemsContainer$$1, null, this.renderInterspersedSeparators()))));
    }
  }]);

  return DragGroup;
}(React__default.Component);

defineProperty(DragGroup, "Item", DragItem);

defineProperty(DragGroup, "Container", DragContainer);

defineProperty(DragGroup, "propTypes", {
  /**
   * Text to render inside the clickable separators which allow
   * new groups to be created.
   */
  separatorContent: propTypes.node,

  /**
   * Override the outer container visual component
   * Defaults DragGroup.styles.Container
   */
  Container: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * Override the visual component which wraps the child items
   * Defaults DragGroup.styles.ItemsContainer
   */
  ItemsContainer: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * Override the behavioral component which renders the drop area
   * Defaults DragGroup.DropArea
   */
  DropArea: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * Overrides the behavioral component which renders a clickable separator
   * between items.
   * Defaults DragGroup.styles.Separator
   */
  Separator: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * Overrides the visual component which renders the toggle-enabled title
   * of a group.
   * Defaults DragGroup.styles.Title
   */
  Title: propTypes.oneOfType([propTypes.func, propTypes.object]),
  // The following are provided by DragGroups;
  // they cannot be required, but can be expected.

  /**
   * Provides a name for the group, rendered in the title
   */
  name: propTypes.string,

  /**
   * The type of items which can be dropped in this group.
   */
  itemType: propTypes.string,

  /**
   * A unique identifier for this group.
   */
  groupId: propTypes.any.isRequired,

  /**
   * Provided by parent DragGroups
   * The number of groups in the list
   */
  groupCount: propTypes.number,

  /**
   * Whether to allow items to be dragged out of this group or not
   */
  allowDrag: propTypes.bool,

  /**
   * Whether to allow this group to collapse.
   */
  collapsible: propTypes.bool,

  /**
   * A callback to call when a user inserts a group. Called with (groupId, itemSplitIndex).
   */
  onSplit: propTypes.func,

  /**
   * Provided by parent DragGroups
   * A callback to call when an item has been dropped on this group
   */
  onItemDropped: propTypes.func,

  /**
   * A callback to call when this group is removed
   */
  onRemoved: propTypes.func
});

defineProperty(DragGroup, "defaultProps", {
  separatorContent: 'Click here to add a group',
  name: 'Group',
  allowDrag: true,
  collapsible: true,
  Container: Container$9,
  ItemsContainer: ItemsContainer,
  DropArea: DropArea,
  Separator: index$1,
  Title: index$2,
  itemType: null,
  groupId: null,
  groupCount: null,
  onSplit: function onSplit() {
    return null;
  },
  onItemDropped: function onItemDropped() {
    return null;
  },
  onRemoved: function onRemoved() {
    return null;
  }
});

defineProperty(DragGroup, "styles", styles$l);

defineProperty(DragGroup, "DropArea", DropArea);

var dropSource$1 = {
  drop: function drop(props) {
    return {
      type: 'items',
      groupId: null
    };
  }
};

var collect$3 = function collect(connect, monitor) {
  return {
    canDrop: monitor.canDrop()
  };
};

var DragGroup$1 = reactDnd.DropTarget(function (props) {
  return props.itemType;
}, dropSource$1, collect$3)(DragGroup);

/**
 * Represents an item that can be dragged. Simply render a node inside of it that wraps the drag handle using
 * the `wrapDragHandle` prop automatically passed down by this component.
 *
 * [DragList.Container](/#!/DragContainer) can be used as an out of the box solution, but if a different component is required,
 * you can use `DragList.Item.Consumer`, which uses the React context API.
 *
 * @visibleName DragList.Item
 */

var DragListItem =
/*#__PURE__*/
function (_React$PureComponent) {
  inherits(DragListItem, _React$PureComponent);

  function DragListItem() {
    var _getPrototypeOf2;

    var _this;

    classCallCheck(this, DragListItem);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(DragListItem)).call.apply(_getPrototypeOf2, [this].concat(args)));

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "wrapDragHandle", function (dragHandleNode) {
      return (
        /**
         * The element passed to connectDragSource must be a plain
         * React element, not a component.
         */
        _this.props.connectDragSource(React__default.createElement("div", {
          className: "DragListItem--handle"
        }, dragHandleNode))
      );
    });

    return _this;
  }

  createClass(DragListItem, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      // Use empty image as a drag preview so browsers don't draw it
      // and we can draw whatever we want on the custom drag layer instead.
      this.props.connectDragPreview(HTML5Backend.getEmptyImage(), {
        // IE fallback: specify that we'd rather screenshot the node
        // when it already knows it's being dragged so we can hide it with CSS.
        captureDraggingState: true
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          connectDropTarget = _this$props.connectDropTarget,
          isDragging = _this$props.isDragging,
          children = _this$props.children,
          onMove = _this$props.onMove,
          connectDragPreview = _this$props.connectDragPreview,
          connectDragSource = _this$props.connectDragSource,
          rest = objectWithoutProperties(_this$props, ["connectDropTarget", "isDragging", "children", "onMove", "connectDragPreview", "connectDragSource"]),
          wrapDragHandle = this.wrapDragHandle;

      return connectDropTarget(React__default.createElement("div", rest, React__default.createElement(DragContext.Provider, {
        value: {
          isDragging: isDragging,
          wrapDragHandle: wrapDragHandle
        }
      }, children)));
    }
  }]);

  return DragListItem;
}(React__default.PureComponent);

defineProperty(DragListItem, "Consumer", DragContext.Consumer);

defineProperty(DragListItem, "propTypes", {
  children: propTypes.node.isRequired,

  /**
   * DragList.Items that interact with each other should share the same type string value.
   */
  itemType: propTypes.string.isRequired,

  /**
   * Index of the item. Used for moving items around
   */
  index: propTypes.number.isRequired,

  /**
   * Function provided by react-dnd library that previews the drag item
   * @ignore
   */
  connectDragPreview: propTypes.func.isRequired,

  /**
   * Called with (fromIndex, toIndex) when the item is moved to a new position
   */
  onMove: propTypes.func.isRequired
});

var dragSource = {
  beginDrag: function beginDrag(props, monitor, component) {
    var domNode = ReactDOM__default.findDOMNode(component);
    var clientRect = domNode.getBoundingClientRect();
    return {
      index: props.index,
      children: props.children,
      dimensions: clientRect
    };
  }
};
var dropTarget = {
  hover: function hover(props, monitor, component) {
    var dragIndex = monitor.getItem().index;
    var hoverIndex = props.index; // Don't replace items with themselves

    if (dragIndex === hoverIndex) {
      return;
    } // Determine rectangle on screen


    var hoverBoundingRect = ReactDOM__default.findDOMNode(component).getBoundingClientRect(); // Get vertical middle

    var hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2; // Determine mouse position

    var clientOffset = monitor.getClientOffset(); // Get pixels to the top

    var hoverClientY = clientOffset.y - hoverBoundingRect.top; // Time to actually perform the action

    props.onMove(dragIndex, hoverIndex); // Note: we're mutating the monitor item here!
    // Generally it's better to avoid mutations,
    // but it's good here for the sake of performance
    // to avoid expensive index searches.

    monitor.getItem().index = hoverIndex;
  }
};

var dragCollect = function dragCollect(connect, monitor) {
  return {
    connectDragSource: connect.dragSource(),
    connectDragPreview: connect.dragPreview(),
    isDragging: monitor.isDragging()
  };
};

var dropCollect = function dropCollect(connect) {
  return {
    connectDropTarget: connect.dropTarget()
  };
};

var DragListItem$1 = reactDnd.DragSource(function (props) {
  return props.itemType;
}, dragSource, dragCollect)(reactDnd.DropTarget(function (props) {
  return props.itemType;
}, dropTarget, dropCollect)(DragListItem));

var StyledDiv = styled__default.div.withConfig({
  displayName: "DragList__StyledDiv",
  componentId: "sc-6bdk5l-0"
})(["& > * + *{margin-top:", ";}"], themeGet('spacing.medium'));
/**
 * A list of items that can be dragged and reordered.
 * Use a list of [DragList.Item](/#!/DragListItem) as children.
 * DragList.Container is provided
 * as a convenient way to display items in the drag list.
 */

var DragList =
/*#__PURE__*/
function (_React$PureComponent) {
  inherits(DragList, _React$PureComponent);

  function DragList() {
    classCallCheck(this, DragList);

    return possibleConstructorReturn(this, getPrototypeOf(DragList).apply(this, arguments));
  }

  createClass(DragList, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          rest = objectWithoutProperties(_this$props, ["children"]);

      return React__default.createElement(StyledDiv, rest, children);
    }
  }]);

  return DragList;
}(React__default.PureComponent);

defineProperty(DragList, "Item", DragListItem$1);

defineProperty(DragList, "Container", DragContainer);

defineProperty(DragList, "propTypes", {
  children: propTypes.node.isRequired
});

var InputStyles = styled__default.input.withConfig({
  displayName: "InputStyles",
  componentId: "di7cst-0"
})(["letter-spacing:0.02em;line-height:1.5;font-size:14px;font-family:", ";transition:all 0.2s ease;padding:calc(", " - 1px) ", ";border-width:", ";border-style:solid;text-align:left;color:", ";background:", ";opacity:1;border-color:", ";box-shadow:", ";outline:none;width:100%;&:focus{box-shadow:inset 0 -5px 0 ", ";border-color:", ";}&:disabled{background:", ";border-color:", ";opacity:1;color:", ";}&::placeholder{opacity:0.5;}", " ", ";"], themeGet('fonts.brand'), themeGet('spacing.medium'), themeGet('spacing.medium'), themeGet('thicknesses.wide'), themeGet('colors.text.default'), themeGet('colors.background.default'), function (props) {
  return props.appearFocused ? themeGet('colors.border.medium')(props) : themeGet('colors.border.light')(props);
}, function (props) {
  return props.appearFocused ? "inset 0 -5px 0 ".concat(themeGet('colors.primary.light')(props)) : 'none';
}, themeGet('colors.primary.light'), themeGet('colors.border.medium'), themeGet('colors.background.disabled'), themeGet('colors.border.disabled'), themeGet('colors.text.disabled'), function (props) {
  return props.visited ? styled.css(["&:invalid{box-shadow:inset 0 -5px 0 ", ";border-color:", ";}"], themeGet('colors.negative.light')(props), themeGet('colors.negative.border')(props)) : '';
}, function (props) {
  return props.invalid || props.error ? "\n    box-shadow: inset 0 -5px ".concat(themeGet('colors.negative.light')(props), ";\n    border-color: ").concat(themeGet('colors.negative.border')(props), ";\n    ") : '';
});
InputStyles.Small = styled__default(InputStyles).withConfig({
  displayName: "InputStyles__Small",
  componentId: "di7cst-1"
})(["font-size:12px;padding:calc(var(--spacing-extra-small) - 1px) var(--spacing-extra-small);"]);

var DropArea$1 = defaultProps({
  as: 'div'
})(styled__default(InputStyles).withConfig({
  displayName: "DropArea",
  componentId: "bm35gn-0"
})(["width:100%;display:flex;flex-direction:row;cursor:pointer;"]));

var Preview = styled__default.div.withConfig({
  displayName: "Preview",
  componentId: "qaew5n-0"
})(["margin:auto auto auto 16px;"]);



var styles$m = /*#__PURE__*/Object.freeze({
  DropArea: DropArea$1,
  Preview: Preview
});

var FileLoader =
/*#__PURE__*/
function (_React$Component) {
  inherits(FileLoader, _React$Component);

  function FileLoader() {
    var _getPrototypeOf2;

    var _this;

    classCallCheck(this, FileLoader);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(FileLoader)).call.apply(_getPrototypeOf2, [this].concat(args)));

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "preventLinkClick", function (ev) {
      ev.preventDefault();
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "renderFiles", function () {
      var _this$props = _this.props,
          value = _this$props.value,
          DropArea = _this$props.DropArea,
          Preview$$1 = _this$props.Preview;

      if (value && value[0]) {
        return React__default.createElement(DropArea, null, React__default.createElement(Icon, {
          name: "fileFilled"
        }), React__default.createElement(Preview$$1, {
          active: true
        }, value[0].name));
      } else {
        return React__default.createElement(DropArea, null, React__default.createElement(Icon, {
          name: "file"
        }), React__default.createElement(Preview$$1, null, "DROP A FILE HERE, OR\xA0", React__default.createElement(Link, {
          onClick: _this.preventLinkClick
        }, "CLICK TO BROWSE")));
      }
    });

    return _this;
  }

  createClass(FileLoader, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          onChange = _this$props2.onChange,
          value = _this$props2.value,
          required = _this$props2.required,
          disabled = _this$props2.disabled,
          className = _this$props2.className,
          id = _this$props2.id,
          DropArea = _this$props2.DropArea,
          Preview$$1 = _this$props2.Preview,
          rest = objectWithoutProperties(_this$props2, ["onChange", "value", "required", "disabled", "className", "id", "DropArea", "Preview"]);

      return React__default.createElement(Dropzone, _extends_1({
        multiple: false,
        onDrop: function onDrop(files) {
          return onChange(files);
        },
        style: {
          width: '100%'
        },
        activeStyle: {
          color: '#00bcec'
        },
        rejectStyle: {},
        value: value,
        required: required,
        disabled: disabled,
        className: className,
        id: id
      }, rest), this.renderFiles());
    }
  }]);

  return FileLoader;
}(React__default.Component);

defineProperty(FileLoader, "propTypes", {
  /**
   * Handler for the onChange event on the input.
   */
  onChange: propTypes.func,

  /**
   * Marks that this input is required for form submission.
   */
  required: propTypes.bool,

  /**
   * Marks that the user cannot change this input.
   */
  disabled: propTypes.bool,

  /**
   * Adds a class name to the input element.
   */
  className: propTypes.string,

  /**
   * Adds an id to the input element.
   */
  id: propTypes.string,

  /**
   * A component to render the drop area
   */
  DropArea: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A component to render the preview container
   */
  Preview: propTypes.oneOfType([propTypes.func, propTypes.object])
});

defineProperty(FileLoader, "defaultProps", {
  required: false,
  disabled: false,
  className: null,
  id: null,
  DropArea: DropArea$1,
  Preview: Preview
});

defineProperty(FileLoader, "styles", styles$m);

var Gutter = styled__default.div.withConfig({
  displayName: 'Gutter'
}).withConfig({
  displayName: "Gutter",
  componentId: "sc-1qyhny2-0"
})(["background:", ";"], themeGet('colors.gray.light'));
Gutter.propTypes = {
  /**
   * A class name to add to the gutter element.
   */
  className: propTypes.string,

  /**
   * An id to add to the gutter element.
   */
  id: propTypes.string
};
Gutter.defaultProps = {
  className: null,
  id: null
};

var H2 = styled__default.h2.withConfig({
  displayName: 'H2'
}).withConfig({
  displayName: "H2",
  componentId: "sc-136javp-0"
})(["color:", ";font-weight:700;font-family:", ";font-size:2em;margin:", ";padding:0;"], themeGet('colors.text.default'), themeGet('fonts.brand'), userSpacing.text);
H2.propTypes = {
  /**
   * Specify a CSS value or an object { top, right, bottom, left } or { vertical, horizontal } to
   * control the spacing around the heading. Defaults to a large space below the element.
   */
  spacing: propTypes.oneOfType([propTypes.string, propTypes.object]),

  /**
   * Adds a class name to the element.
   */
  className: propTypes.string,

  /**
   * Adds an id to the element.
   */
  id: propTypes.string
};
H2.defaultProps = {
  spacing: {
    bottom: 'lg'
  },
  className: null,
  id: null
};

var H4 = styled__default.h4.withConfig({
  displayName: 'H4'
}).withConfig({
  displayName: "H4",
  componentId: "sc-1qxnz6m-0"
})(["color:", ";font-weight:900;font-family:", ";font-size:1.25em;letter-spacing:0.1em;text-transform:uppercase;margin:", ";padding:0;"], themeGet('colors.primary.default'), themeGet('fonts.brand'), userSpacing.text);
H4.propTypes = {
  /**
   * Specify a CSS value or an object { top, right, bottom, left } or { vertical, horizontal } to
   * control the spacing around the heading. Defaults to a large space below the element.
   */
  spacing: propTypes.oneOfType([propTypes.string, propTypes.object]),

  /**
   * Adds a class name to the element.
   */
  className: propTypes.string,

  /**
   * Adds an id to the element.
   */
  id: propTypes.string
};
H4.defaultProps = {
  spacing: {
    bottom: 'lg'
  },
  className: null,
  id: null
};

var H5 = styled__default.h5.withConfig({
  displayName: 'H5'
}).withConfig({
  displayName: "H5",
  componentId: "sc-1fpntrk-0"
})(["color:", ";font-weight:800;font-family:", ";font-size:1.15em;margin:", ";padding:0;"], themeGet('colors.text.default'), themeGet('fonts.brand'), userSpacing.text);
H5.propTypes = {
  /**
   * Specify a CSS value or an object { top, right, bottom, left } or { vertical, horizontal } to
   * control the spacing around the heading. Defaults to a large space below the element.
   */
  spacing: propTypes.oneOfType([propTypes.string, propTypes.object]),

  /**
   * Adds a class name to the element.
   */
  className: propTypes.string,

  /**
   * Adds an id to the element.
   */
  id: propTypes.string
};
H5.defaultProps = {
  spacing: {
    bottom: 'lg'
  },
  className: null,
  id: null
};

var H1 = styled__default.h1.withConfig({
  displayName: 'H1'
}).withConfig({
  displayName: "H1",
  componentId: "g6bzc0-0"
})(["color:", ";font-weight:100;font-family:", ";font-size:2.5em;margin:", ";overflow:hidden;padding:0;"], themeGet('colors.primary.default'), themeGet('fonts.brand'), userSpacing.text);
H1.propTypes = {
  /**
   * Specify a CSS value or an object { top, right, bottom, left } or { vertical, horizontal } to
   * control the spacing around the heading. Defaults to a large space below the element.
   */
  spacing: propTypes.oneOfType([propTypes.string, propTypes.object]),

  /**
   * Adds a class name to the element.
   */
  className: propTypes.string,

  /**
   * Adds an id to the element.
   */
  id: propTypes.string
};
H1.defaultProps = {
  spacing: {
    bottom: 'lg'
  },
  className: null,
  id: null
};
H1.H2 = H2;
H1.H3 = H3;
H1.H4 = H4;
H1.H5 = H5;

var HeaderBar = styled__default.div.withConfig({
  displayName: 'HeaderBar'
}).withConfig({
  displayName: "HeaderBar",
  componentId: "sc-1lhokau-0"
})(["height:50px;display:flex;align-items:center;border-bottom:", " solid ", ";padding-right:", ";padding-left:", ";"], themeGet('thicknesses.normal'), themeGet('colors.gray.border'), themeGet('spacing.medium'), themeGet('spacing.medium'));

var HelpText = styled__default.div.withConfig({
  displayName: 'HelpText'
}).withConfig({
  displayName: "HelpText",
  componentId: "sc-140knio-0"
})(["color:", ";font-style:italic;font-weight:300;font-family:", ";margin:", ";"], function (props) {
  return props.error ? themeGet('colors.negative.default') : themeGet('colors.gray.medium');
}, themeGet('fonts.brand'), userTextSpacing);
HelpText.propTypes = {
  /**
   * Adds a class name to the element.
   */
  className: propTypes.string,

  /**
   * Adds an id to the element.
   */
  id: propTypes.string,

  /**
   * Whether this help text is in an error state
   */
  error: propTypes.bool,

  /**
   * Specify a CSS value or an object { top, right, bottom, left } or { vertical, horizontal } to
   * control the spacing around the heading. Defaults to a large space below the element.
   */
  spacing: propTypes.oneOfType([propTypes.string, propTypes.object])
};
HelpText.defaultProps = {
  className: null,
  id: null
};

var InputRevealPasswordContainer = styled__default.div.withConfig({
  displayName: "InlineContentWrapper__InputRevealPasswordContainer",
  componentId: "sc-1xf8c5z-0"
})(["position:relative;width:100%;& > *:last-child{position:absolute;right:", ";top:30%;z-index:10;}input[type='password'],input[type='text']{padding-right:", ";padding-left:", ";}"], themeGet('spacing.medium'), themeGet('spacing.extraLarge'), themeGet('spacing.medium'));
InputRevealPasswordContainer.Small = styled__default(InputRevealPasswordContainer).withConfig({
  displayName: "InlineContentWrapper__Small",
  componentId: "sc-1xf8c5z-1"
})(["input[type='password'],input[type='text']{padding:", " ", " ", " ", " !important;}"], themeGet('spacing.small'), themeGet('spacing.extraLarge'), themeGet('spacing.small'), themeGet('spacing.small'));



var styles$n = /*#__PURE__*/Object.freeze({
  InlineContentWrapper: InputRevealPasswordContainer,
  InputStyles: InputStyles
});

var Input$1 =
/*#__PURE__*/
function (_React$PureComponent) {
  inherits(Input, _React$PureComponent);

  createClass(Input, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.setState({
        _type: this.props.type
      });
    }
  }]);

  function Input(props) {
    var _this;

    classCallCheck(this, Input);

    _this = possibleConstructorReturn(this, getPrototypeOf(Input).call(this, props));

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "onBlur", function (event) {
      _this.setState({
        visited: true
      });

      if (_this.props.onBlur) {
        _this.props.onBlur(event);
      }
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "getAutoComplete", function () {
      var _this$props = _this.props,
          autocomplete = _this$props.autocomplete,
          autoComplete = _this$props.autoComplete;
      if (autocomplete === true || autocomplete === 'on' || autoComplete === true || autoComplete === 'on') return 'on'; // Prevent browsers from completing this field like a password.

      if (_this.state._type === 'password') return 'new-password';
      return 'off';
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "renderPasswordField", function () {
      var toggleState = function toggleState(type) {
        return type === 'password' ? 'text' : 'password';
      };

      var handleClick = function handleClick(evt) {
        evt.preventDefault();

        _this.setState({
          _type: toggleState(_this.state._type)
        });
      };

      var inlineNode = React__default.createElement("div", null, React__default.createElement(Link, {
        href: "",
        onClick: handleClick
      }, _this.state._type === 'password' ? 'Show' : 'Hide'));
      return _this.renderInlineContent(inlineNode);
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "renderInlineContent", function (node) {
      var InlineContentWrapper = _this.props.InlineContentWrapper;
      return React__default.createElement(InlineContentWrapper, null, _this.renderInputField(), React__default.createElement("div", null, node));
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "renderInputField", function () {
      var _this$props2 = _this.props,
          disabled = _this$props2.disabled,
          id = _this$props2.id,
          className = _this$props2.className,
          invalid = _this$props2.invalid,
          onFocus = _this$props2.onFocus,
          onChange = _this$props2.onChange,
          onKeyDown = _this$props2.onKeyDown,
          value = _this$props2.value,
          required = _this$props2.required,
          error = _this$props2.error,
          placeholder = _this$props2.placeholder,
          inputRef = _this$props2.inputRef,
          Styles = _this$props2.Styles,
          inlineContent = _this$props2.inlineContent,
          readOnly = _this$props2.readOnly,
          name = _this$props2.name,
          maxLength = _this$props2.maxLength,
          min = _this$props2.min,
          max = _this$props2.max,
          rest = objectWithoutProperties(_this$props2, ["disabled", "id", "className", "invalid", "onFocus", "onChange", "onKeyDown", "value", "required", "error", "placeholder", "inputRef", "Styles", "inlineContent", "readOnly", "name", "maxLength", "min", "max"]);

      var _this$state = _this.state,
          visited = _this$state.visited,
          type = _this$state._type;
      return React__default.createElement(Styles, _extends_1({
        onKeyDown: onKeyDown,
        onFocus: onFocus,
        visited: visited,
        id: id,
        name: name,
        className: className,
        invalid: invalid,
        onChange: onChange,
        value: value,
        required: required,
        error: error,
        disabled: disabled,
        readOnly: readOnly,
        placeholder: placeholder,
        ref: inputRef,
        inlineContent: inlineContent,
        maxLength: maxLength,
        min: min,
        max: max
      }, rest, {
        type: type,
        onBlur: _this.onBlur,
        autoComplete: _this.getAutoComplete()
      }));
    });

    _this.state = {
      visited: false
    };
    return _this;
  }

  createClass(Input, [{
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          type = _this$props3.type,
          disableShowPassword = _this$props3.disableShowPassword,
          inlineContent = _this$props3.inlineContent;

      if (type === 'password' && !disableShowPassword) {
        return this.renderPasswordField();
      }

      if (inlineContent) {
        return this.renderInlineContent(inlineContent);
      }

      return this.renderInputField();
    }
  }]);

  return Input;
}(React__default.PureComponent);

defineProperty(Input$1, "propTypes", {
  /**
   * The value of the input.
   */
  value: propTypes.oneOfType([propTypes.string, propTypes.number]),

  /**
   * Handler for the onchange event.
   */
  onChange: propTypes.func,

  /**
   * Handler for the onblur event.
   */
  onBlur: propTypes.func,

  /**
   * Handler for the onfocus event.
   */
  onFocus: propTypes.func,

  /**
   * Handler for the onkeydown event.
   */
  onKeyDown: propTypes.func,

  /**
   * Controls whether the user can change this element.
   */
  disabled: propTypes.bool,

  /**
   * Controls whether the element is marked as required for form submission.
   */
  required: propTypes.bool,

  /**
   * Controls whether the user can modify the element - typically displays differently from disabled.
   */
  readOnly: propTypes.bool,

  /**
   * Limits the maximum length of the input.
   */
  maxLength: propTypes.number,

  /**
   * Limits the minimum value of the input - note that this value is primarily for its semantic meaning.
   */
  min: propTypes.oneOfType([propTypes.number, propTypes.string]),

  /**
   * Limits the maximum value of the input - note that this value is primarily for its semantic meaning.
   */
  max: propTypes.oneOfType([propTypes.number, propTypes.string]),

  /**
   * Adds an id to the element.
   */
  id: propTypes.string,

  /**
   * Adds an name to the element.
   */
  name: propTypes.string,

  /**
   * Adds a class name to the element.
   */
  className: propTypes.string,

  /**
   * Sets the type of data expected for this input.
   */
  type: propTypes.oneOf(['search', 'email', 'url', 'tel', 'number', 'range', 'date', 'month', 'week', 'time', 'datetime', 'datetime-local', 'color', 'password', 'text']),

  /**
   * Styles this input as being invalid
   */
  invalid: propTypes.bool,

  /**
   * Styles this input as having an error related to it
   */
  error: propTypes.bool,

  /**
   * Placeholder text to display when the input is blank
   */
  placeholder: propTypes.string,

  /**
   * Disables the ability to show a password
   */
  disableShowPassword: propTypes.bool,

  /**
   * Suggests to most browsers whether they should autocomplete the field
   */
  autoComplete: propTypes.oneOfType([propTypes.string, propTypes.bool]),

  /**
   * Provides a reference to the input element
   */
  inputRef: propTypes.func,

  /**
   * A component that renders the internal input element
   */
  Styles: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A component that wraps the whole element and helps control spacing
   * when reveal password is enabled
   */
  InlineContentWrapper: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A react node that is displayed inside input element
   */
  inlineContent: propTypes.node,

  /**
   * Lets you make this input appear to be focused (does not actually
   * change the focus state of the element)
   */
  appearFocused: propTypes.bool
});

defineProperty(Input$1, "defaultProps", {
  disabled: false,
  required: false,
  readOnly: false,
  id: null,
  name: null,
  type: 'text',
  onChange: function onChange() {
    return null;
  },
  onBlur: function onBlur() {
    return null;
  },
  onFocus: function onFocus() {
    return null;
  },
  onKeyDown: function onKeyDown() {
    return null;
  },
  className: null,
  invalid: false,
  error: false,
  placeholder: '',
  disableShowPassword: false,
  Styles: InputStyles,
  InlineContentWrapper: InputRevealPasswordContainer,
  inlineContent: null,
  maxLength: null,
  min: null,
  max: null,
  autoComplete: true,
  spellCheck: 'false',
  appearFocused: false
});

defineProperty(Input$1, "styles", styles$n);

Input$1.Small = defaultProps({
  Styles: InputStyles.Small
})(Input$1);

var Label = styled__default.label.withConfig({
  displayName: 'Label'
}).withConfig({
  displayName: "Label",
  componentId: "sc-7i9csd-0"
})(["font-size:1em;letter-spacing:0.02em;font-weight:700;font-family:", ";color:", ";background:transparent;line-height:1.5;display:block;margin:", ";", ";", ";"], themeGet('fonts.brand'), themeGet('colors.text.default'), userTextSpacing, function (_ref) {
  var disabled = _ref.disabled;
  return disabled && styled.css(["color:", ";"], themeGet('colors.text.disabled'));
}, function (_ref2) {
  var required = _ref2.required;
  return required ? styled.css(["&::after{content:'*';color:", ";padding-left:0.3em;}"], themeGet('colors.negative.default')) : '';
});
Label.propTypes = {
  /**
   * Styles the label to indicate that the associated field is disabled.
   */
  disabled: propTypes.bool,

  /**
   * Adds a class name to the element.
   */
  className: propTypes.string,

  /**
   * Adds an id to the element.
   */
  id: propTypes.string,

  /**
   * Adds a red star at the end of the label.
   */
  required: propTypes.bool,

  /**
   * Specify a CSS value or an object { top, right, bottom, left } or { vertical, horizontal } to
   * control the spacing around the heading. Defaults to a large space below the element.
   */
  spacing: propTypes.oneOfType([propTypes.string, propTypes.object])
};
Label.defaultProps = {
  disabled: false,
  className: null,
  id: null,
  required: false
};

var ListItem = styled__default.li.withConfig({
  displayName: 'ListItem'
}).withConfig({
  displayName: "ListItem",
  componentId: "fxzxkp-0"
})(["margin:0 0 0.5em 2em;padding:0;& p{margin:0 0 0.5em;}"]);
ListItem.propTypes = {
  /**
   * Adds a class name to the element.
   */
  className: propTypes.string,

  /**
   * Adds an id to the element.
   */
  id: propTypes.string
};
ListItem.defaultProps = {
  className: null,
  id: null
};

var OrderedList = styled__default.ol.withConfig({
  displayName: 'OrderedList'
}).withConfig({
  displayName: "OrderedList",
  componentId: "sc-1axel9o-0"
})(["margin:0 0 1em;padding:0;list-style:decimal outside;&:last-child{margin-bottom:0;}& > ol{list-style:lower-latin outside;margin:0 0 0 1em;}& ul li:first-child,& ol li:first-child{margin-top:0.5em;}"]);
OrderedList.propTypes = {
  /**
   * Adds a class name to the element.
   */
  className: propTypes.string,

  /**
   * Adds an id to the element.
   */
  id: propTypes.string
};
OrderedList.defaultProps = {
  className: null,
  id: null
};
OrderedList.Item = ListItem;

var UnorderedList = styled__default.ul.withConfig({
  displayName: 'UnorderedList'
}).withConfig({
  displayName: "UnorderedList",
  componentId: "sc-17fibw7-0"
})(["margin:0 0 1em;padding:0;list-style:disc outside;&:last-child{margin-bottom:0;}& > ul{list-style:circle outside;margin:0 0 0 1em;}& ul li:first-child,& ol li:first-child{margin-top:0.5em;}"]);
UnorderedList.propTypes = {
  /**
   * Adds a class name to the element.
   */
  className: propTypes.string,

  /**
   * Adds an id to the element.
   */
  id: propTypes.string
};
UnorderedList.defaultProps = {
  className: null,
  id: null
};
UnorderedList.Item = ListItem;
UnorderedList.Ordered = OrderedList;

var LogoSvg = function LogoSvg(props) {
  return React__default.createElement("svg", props, React__default.createElement("title", null, "bandwidth-logo"), React__default.createElement("path", {
    xmlns: "http://www.w3.org/2000/svg",
    className: "logo-mark",
    d: "M43.68 16.18c-2.23-.47-2.5.69-1.54 2.82 5.07 11.18.56 22.1-4.28 24.81a5.93 5.93 0 0 1-.13-1.1c-.57-5.31-2.59-9.92-4-9.92-1.08 0-.4 4.54-.7 8.56-1.79-1.06-2.89-1.8-4.8-1.47-2.75.48-6.38 6.27-6.52 5.44-1.09-6.71 1.52-17 5.14-18.13.56-.22 1.54.63 3.74 1.46 1.72.64 1.5-1.06.71-1.69a8.29 8.29 0 0 0-8.83-.62C17.09 29 14.62 41.05 17.55 46A7.72 7.72 0 0 0 23 49.75c3.65.42 4.76-.34 7.71-3.94a3.42 3.42 0 0 0 1.39.67c-2.4 7.45-11.38 13.73-13.32 12.65-9.4-6.4-6.78-26.83-.15-44.8 1.08-2.92 2.86-8.09 3.24-10 1-4.85-5.14-5.78-9.33-2.23-3 2.57-6 8.59-8.35 15.57-7.6 22.18-4.37 40.93 9.24 45 15.66 4.67 23.11-5.07 24.27-14.86a21 21 0 0 0 2.88.15c4.85-.1 11.73-2.6 13.78-13.18 1.56-7.96-3.58-17.25-10.68-18.6z",
    fillRule: "evenodd"
  }));
};

LogoSvg.defaultProps = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 54.47 63.91",
  preserveAspectRatio: "xMidYMin meet"
};
var Logo = styled__default(LogoSvg).withConfig({
  displayName: "Logo",
  componentId: "sc-1xypb33-0"
})(["width:", ";fill:", ";height:", ";"], function (_ref) {
  var width = _ref.width;
  return width;
}, function (_ref2) {
  var color = _ref2.color;
  return color ? color : themeGet('colors.text.inverted');
}, function (_ref3) {
  var height = _ref3.height;
  return height ? height : themeGet('spacing.large');
});
Logo.propTypes = {
  /**
   * Adds a class name to the logo image.
   */
  className: propTypes.string,

  /**
   * Adds an id to the logo image.
   */
  id: propTypes.string,

  /**
   * Sets the color of the logo.
   */
  color: propTypes.string,

  /**
   * Manually control the width of the logo. If only width is set, height
   * will be based on the aspect ratio.
   */
  width: propTypes.oneOfType([propTypes.string, propTypes.number]),

  /**
   * Manually control the width of the logo. If only height is set, width
   * will be based on the aspect ratio.
   */
  height: propTypes.oneOfType([propTypes.string, propTypes.number])
};
Logo.defaultProps = {
  className: null,
  id: null,
  color: null,
  height: null
};
Logo.Small = styled__default(Logo).withConfig({
  displayName: "Logo__Small",
  componentId: "sc-1xypb33-1"
})(["height:", ";"], themeGet('spacing.medium'));
Logo.Large = styled__default(Logo).withConfig({
  displayName: "Logo__Large",
  componentId: "sc-1xypb33-2"
})(["height:", ";"], themeGet('spacing.extraLarge'));
Logo.Primary = styled__default(Logo).withConfig({
  displayName: "Logo__Primary",
  componentId: "sc-1xypb33-3"
})(["fill:", ";"], themeGet('colors.primary.default'));
Logo.Primary.Small = styled__default(Logo).withConfig({
  displayName: "Logo__Small",
  componentId: "sc-1xypb33-4"
})(["fill:", ";height:", ";"], themeGet('colors.primary.default'), themeGet('spacing.medium'));
Logo.Primary.Large = styled__default(Logo).withConfig({
  displayName: "Logo__Large",
  componentId: "sc-1xypb33-5"
})(["fill:", ";height:", ";"], themeGet('colors.primary.default'), themeGet('spacing.extraLarge'));

var processMethod = function processMethod(method) {
  var normalized = method.toLowerCase();

  if (normalized === 'delete') {
    return 'del';
  }

  return normalized;
};

var methodColors = {
  post: themeGet('colors.primary.default'),
  get: themeGet('colors.positive.default'),
  put: themeGet('colors.accents.0.default'),
  del: themeGet('colors.negative.default')
};
var MethodTag = styled__default.pre.withConfig({
  displayName: "MethodTag",
  componentId: "sc-1ug8d9f-0"
})(["color:", ";font-size:1em;line-height:1em;padding:0.5em 1em;border-radius:5px;text-transform:uppercase;margin:0;width:auto;display:inline-block;background:", ";"], themeGet('colors.text.inverted'), function (props) {
  var method = processMethod(props.children);
  return methodColors[method](props);
});
MethodTag.propTypes = {
  /**
   * Adds a class name to the element.
   */
  className: propTypes.string,

  /**
   * Adds an id to the element.
   */
  id: propTypes.string
};
MethodTag.defaultProps = {
  className: null,
  id: null
};

var ActionContent = styled__default.div.withConfig({
  displayName: "ActionContent",
  componentId: "sc-1tktbu6-0"
})(["position:relative;padding:", " 0;margin:0 ", ";&::before{position:absolute;content:'';left:0;right:0;top:0;border-top-width:", ";border-top-style:solid;border-top-color:", ";}"], themeGet('spacing.medium'), themeGet('spacing.large'), themeGet('thicknesses.normal'), themeGet('colors.border.light'));

var Blocker = styled__default.div.withConfig({
  displayName: "Blocker",
  componentId: "sc-1ndd8tv-0"
})(["background:", ";position:fixed;top:0;left:0;right:0;bottom:0;display:flex;flex-direction:column;z-index:100000;"], themeGet('colors.shadow.default'));

var normalize = function normalize(size) {
  if (!size) {
    return 'large';
  }

  switch (size) {
    case 'xs':
    case 'extraSmall':
      return themeGet('spacing.extraSmall');

    case 'sm':
    case 'small':
      return themeGet('spacing.small');

    case 'lg':
    case 'large':
      return themeGet('spacing.large');

    case 'xl':
    case 'extraLarge':
      return themeGet('spacing.extraLarge');

    case 'md':
    case 'medium':
      return themeGet('spacing.medium');

    default:
      return size;
  }
};

var Horizontal = styled__default.div.withConfig({
  displayName: "Horizontal",
  componentId: "sc-11pbaz1-0"
})(["display:flex;& > *{margin:0;}& > * + *{margin-left:", ";}"], function (_ref) {
  var spacing = _ref.spacing;
  return normalize(spacing);
});
Horizontal.defaultProps = {
  spacing: 'lg'
};
Horizontal.propTypes = {
  /**
   * The amount of space to put between items. Use xs, sm, md, lg, or xl.
   */
  spacing: propTypes.string
}; //@component

var ButtonContainer = styled__default(Horizontal).withConfig({
  displayName: "ButtonContainer",
  componentId: "sc-6d5ki-0"
})(["justify-content:", ";"], function (props) {
  switch (props.align) {
    case 'center':
      return 'center';

    case 'right':
      return 'flex-end';

    case 'left':
    default:
      return 'flex-start';
  }
});

var CloseIcon = styled__default(Link).withConfig({
  displayName: "CloseIcon",
  componentId: "sc-1cwtp9w-0"
})(["position:absolute;top:0;right:0;margin:0.95em 1em 0.95em 1.5em;font-size:0.9em;"]);
var CloseIcon$1 = mapProps(function (props) {
  return objectSpread({}, props, {
    icon: 'delete2'
  });
})(CloseIcon);

var Content$3 = styled__default.div.withConfig({
  displayName: "Content",
  componentId: "wys6pp-0"
})(["overflow-y:auto;padding:", ";"], themeGet('spacing.large'));

var Title = styled__default(SectionTitle).withConfig({
  displayName: "Title",
  componentId: "dnl3a7-0"
})(["padding:0.95em 1em 0.95em 1.5em;"]);

// to show everything.

var Window = styled__default.div.withConfig({
  displayName: "Window",
  componentId: "eqf0pp-0"
})(["background:", ";width:auto;max-width:70%;min-width:20%;flex:0 1 auto;min-height:1em;max-height:70vh;margin:150px auto;display:flex;flex-direction:column;border-radius:5px;box-shadow:", ";position:relative;"], themeGet('colors.background.default'), themeGet('shadows.long'));



var styles$o = /*#__PURE__*/Object.freeze({
  ActionContent: ActionContent,
  Blocker: Blocker,
  ButtonContainer: ButtonContainer,
  CloseIcon: CloseIcon$1,
  Content: Content$3,
  Title: Title,
  Window: Window
});

/**
 * Unlike traditional modal dialogs, Modal doesn't include functionality for closing or opening.
 * It's recommended that you render Modal as a state in your application or
 * as a route in your React application with React Router.
 *
 * Provides `title` prop for adding a title, and `onBlockerClicked` if you want to hook the click
 * event on the shadow 'blocker' element which covers the page.
 *
 * You can also use the `actionContent` prop to pass in stuff to render which will be fixed to the
 * bottom of the modal. The rest of the content will scroll as it gets too large, but this content
 * will continue to be visible at the bottom. Use this for things like close buttons or confirm buttons,
 * which should always be visible.
 */

var Modal =
/*#__PURE__*/
function (_React$Component) {
  inherits(Modal, _React$Component);

  function Modal() {
    var _getPrototypeOf2;

    var _this;

    classCallCheck(this, Modal);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Modal)).call.apply(_getPrototypeOf2, [this].concat(args)));

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleModalClicked", function (event) {
      // prevents click event bubbling to blocker and triggering blockerclicked callback
      event.stopPropagation();
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "renderTitle", function () {
      var _this$props = _this.props,
          title = _this$props.title,
          Title$$1 = _this$props.Title;
      if (!title) return null;
      return React__default.createElement(Title$$1, null, title);
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "renderCloseIcon", function () {
      var _this$props2 = _this.props,
          CloseIcon = _this$props2.CloseIcon,
          onClose = _this$props2.onClose;
      if (!onClose) return null;
      return React__default.createElement(CloseIcon, {
        onClick: onClose
      });
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "renderActions", function () {
      var _this$props3 = _this.props,
          actionContent = _this$props3.actionContent,
          ActionContent$$1 = _this$props3.ActionContent,
          ButtonContainer$$1 = _this$props3.ButtonContainer,
          alignButtons = _this$props3.alignButtons,
          spaceBetweenButtons = _this$props3.spaceBetweenButtons;
      return actionContent && React__default.createElement(ActionContent$$1, null, React__default.createElement(ButtonContainer$$1, {
        align: alignButtons,
        spacing: spaceBetweenButtons
      }, actionContent));
    });

    return _this;
  }

  createClass(Modal, [{
    key: "render",
    value: function render() {
      var _this$props4 = this.props,
          id = _this$props4.id,
          className = _this$props4.className,
          onClose = _this$props4.onClose,
          onBlockerClicked = _this$props4.onBlockerClicked,
          children = _this$props4.children,
          Blocker$$1 = _this$props4.Blocker,
          Content = _this$props4.Content,
          Window$$1 = _this$props4.Window,
          Title$$1 = _this$props4.Title,
          ButtonContainer$$1 = _this$props4.ButtonContainer,
          ActionContent$$1 = _this$props4.ActionContent,
          rest = objectWithoutProperties(_this$props4, ["id", "className", "onClose", "onBlockerClicked", "children", "Blocker", "Content", "Window", "Title", "ButtonContainer", "ActionContent"]);

      return React__default.createElement(Blocker$$1, {
        onClick: onClose || onBlockerClicked
      }, React__default.createElement(Window$$1, _extends_1({
        onClick: this.handleModalClicked,
        id: id,
        className: className
      }, rest), this.renderTitle(), this.renderCloseIcon(), React__default.createElement(Content, null, children), this.renderActions()));
    }
  }]);

  return Modal;
}(React__default.Component);

defineProperty(Modal, "propTypes", {
  /**
   * Content to render in the modal.
   */
  children: propTypes.node.isRequired,

  /**
   * An optional title for the top of the modal.
   */
  title: propTypes.string,

  /**
   * Handles click events on the backdrop behind the modal or on the X in the title bar.
   */
  onClose: propTypes.func,

  /**
   * @deprecated
   * Handles click events on the backdrop, deprecated in favor of onClose
   */
  onBlockerClicked: propTypes.func,

  /**
   * Adds a class name to the modal window element.
   */
  className: propTypes.string,

  /**
   * Adds an id to the modal window element.
   */
  id: propTypes.string,

  /**
   * Content to render in a fixed position at the bottom of the modal - meant for action buttons, like close.
   */
  actionContent: propTypes.node,

  /**
   * A component to render the action content area
   */
  ActionContent: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A component to render the full-screen blocker behind the modal
   */
  Blocker: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A component to render the content inside the modal window
   */
  Content: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A component to render the title at the top of the modal
   */
  Title: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A component to render the window container of the modal
   */
  Window: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A component to render the close icon in the right-top corner of the modal
   */
  CloseIcon: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A component to render the alignment container around action buttons
   */
  ButtonContainer: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * Align action buttons
   */
  alignButtons: propTypes.oneOf(['right', 'left', 'center']),

  /**
   * Space between buttons
   */
  spaceBetweenButtons: propTypes.oneOf(['xs', 'extraSmall', 'sm', 'small', 'md', 'medium', 'lg', 'large', 'xl', 'extraLarge'])
});

defineProperty(Modal, "defaultProps", {
  title: null,
  onBlockerClicked: function onBlockerClicked() {
    return null;
  },
  className: null,
  id: null,
  actionContent: null,
  ActionContent: ActionContent,
  Blocker: Blocker,
  Content: Content$3,
  Title: Title,
  Window: Window,
  CloseIcon: CloseIcon$1,
  ButtonContainer: ButtonContainer,
  alignButtons: 'right',
  spaceBetweenButtons: 'sm'
});

defineProperty(Modal, "styles", styles$o);

var MoneyStyles = styled__default.span.withConfig({
  displayName: "MoneyStyles",
  componentId: "sc-10ihlkc-0"
})(["color:", ";"], function (props) {
  if (props.value > 0) {
    return themeGet('colors.positive.default')(props);
  } else if (props.value < 0) {
    return themeGet('colors.negative.default')(props);
  }

  return 'inherit';
});



var styles$p = /*#__PURE__*/Object.freeze({
  MoneyStyles: MoneyStyles
});

/**
 * The Money component renders a monetary value with a color and sign to indicate positive or negative.
 * It formats decimal values and adds a $ to the beginning, so just pass in the raw number/string value
 * for `value`. Use the `showSign` prop to turn off the plus/minus sign.
 */

var Money =
/*#__PURE__*/
function (_React$Component) {
  inherits(Money, _React$Component);

  function Money() {
    classCallCheck(this, Money);

    return possibleConstructorReturn(this, getPrototypeOf(Money).apply(this, arguments));
  }

  createClass(Money, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          value = _this$props.value,
          showSign = _this$props.showSign,
          id = _this$props.id,
          className = _this$props.className,
          Styles = _this$props.Styles,
          rest = objectWithoutProperties(_this$props, ["value", "showSign", "id", "className", "Styles"]);

      return React__default.createElement(Styles, _extends_1({
        value: value,
        id: id,
        className: className
      }, rest), showSign ? this.sign : null, "$", formatMoney(value).replace('-', ''));
    }
  }, {
    key: "sign",
    get: function get() {
      var value = this.props.value;
      return value >= 0 ? '+' : '-';
    }
  }]);

  return Money;
}(React__default.Component);

defineProperty(Money, "propTypes", {
  /**
   * The monetary value to show.
   */
  value: propTypes.oneOfType([propTypes.string, propTypes.number]).isRequired,

  /**
   * Whether or not to show a +/- sign before the amount (defaults true)
   */
  showSign: propTypes.bool,

  /**
   * Adds a class name to the element.
   */
  className: propTypes.string,

  /**
   * Adds an id to the element.
   */
  id: propTypes.string,

  /**
   * A component to render the text itself. Will be passed a `value` Number prop.
   */
  Styles: propTypes.oneOfType([propTypes.func, propTypes.object])
});

defineProperty(Money, "defaultProps", {
  showSign: true,
  className: null,
  id: null,
  value: 0,
  Styles: MoneyStyles
});

defineProperty(Money, "styles", styles$p);

var NavigationBar = styled__default.header.withConfig({
  displayName: 'NavigationBar'
}).withConfig({
  displayName: "Bar__NavigationBar",
  componentId: "sc-8uti1d-0"
})(["background:", ";color:", ";border-bottom:", " solid ", ";padding:0 ", ";display:flex;flex-shrink:0;justify-content:space-between;flex:0 0 auto;& > *{margin:auto 0;}"], themeGet('colors.primary.default'), themeGet('colors.text.inverted'), themeGet('thicknesses.normal'), themeGet('colors.shadow.default'), themeGet('spacing.large'));
NavigationBar.Sub = styled__default(NavigationBar).withConfig({
  displayName: "Bar__Sub",
  componentId: "sc-8uti1d-1"
})(["background:", ";color:", ";"], themeGet('colors.gray.light'), themeGet('colors.text.default'));
NavigationBar.Dark = styled__default(NavigationBar).withConfig({
  displayName: "Bar__Dark",
  componentId: "sc-8uti1d-2"
})(["background:", ";\xDF"], themeGet('colors.primary.dark'));
NavigationBar.Sub.Dark = styled__default(NavigationBar).withConfig({
  displayName: "Bar__Dark",
  componentId: "sc-8uti1d-3"
})(["background:", ";"], themeGet('colors.primary.dark'));
NavigationBar.Light = styled__default(NavigationBar).withConfig({
  displayName: "Bar__Light",
  componentId: "sc-8uti1d-4"
})(["background:", ";color:", ";"], themeGet('colors.background.default'), themeGet('colors.text.default'));

var NavigationHeading = styled__default.h1.withConfig({
  displayName: "Heading",
  componentId: "pp2pi9-0"
})(["font-family:", ";font-size:22px;font-weight:100;height:30px;line-height:30px;display:inline-block;white-space:nowrap;"], themeGet('fonts.brand'));

var NavigationItemList = styled__default.div.withConfig({
  displayName: 'NavigationItemList'
}).withConfig({
  displayName: "ItemList__NavigationItemList",
  componentId: "sc-1urkjxp-0"
})(["display:flex;flex-direction:row;justify-content:flex-end;background:transparent;color:inherit;padding-top:20px;* + &{padding-top:10px;}& > * + *{margin-left:", ";}"], themeGet('spacing.large'));
NavigationItemList.Small = styled__default(NavigationItemList).withConfig({
  displayName: "ItemList__Small",
  componentId: "sc-1urkjxp-1"
})(["display:flex;"]);

var hoverOpacityEffects = styled.css(["&:focus,&:active{opacity:0.7;}&:hover::before{opacity:0.25;}&:hover,&:focus,&:active{&:before{height:5px;}}"]);
var NavigationItem = styled__default.div.withConfig({
  displayName: 'NavigationItem'
}).withConfig({
  displayName: "Item__NavigationItem",
  componentId: "sc-1wje7dy-0"
})(["border:0;padding-bottom:calc(", " + 20px);margin-top:", ";line-height:1.5;opacity:1;transition:all 0.2s ease;position:relative;cursor:pointer;color:inherit;font-size:1em;font-weight:200;pointer-events:", ";&::before{content:'';opacity:", ";background:", ";width:104%;height:", ";display:block;position:absolute;bottom:0;top:auto;left:50%;transform:translateX(-50%);transition:height 0.2s ease,opacity 0.2s ease;}", " &,", " &{&:before{background:", ";}}", ":not(:last-child) &,", ":not(:last-child) &{padding-bottom:calc(", " + 10px);}", " &{font-size:0.8em;}", " *.active > &{&::before{opacity:1;height:5px;}&:hover::before{opacity:1;}}"], calcBottomOffset(1.5), calcTopOffset(1.5), function (_ref) {
  var disabled = _ref.disabled;
  return disabled ? 'none' : 'inherit';
}, function (_ref2) {
  var active = _ref2.active;
  return active ? 1 : 0;
}, themeGet('colors.primary.dark'), function (_ref3) {
  var active = _ref3.active;
  return active ? '5px' : 0;
}, NavigationBar.Dark, NavigationBar.Sub.Dark, themeGet('colors.primary.default'), NavigationItemList, NavigationItemList.Small, calcBottomOffset(1.5), NavigationItemList.Small, function (_ref4) {
  var active = _ref4.active,
      disabled = _ref4.disabled;
  return !active && !disabled ? hoverOpacityEffects : '';
});
NavigationItem.propTypes = {
  /**
   * Adds a class name to the element.
   */
  className: propTypes.string,

  /**
   * Adds an id to the element.
   */
  id: propTypes.string,

  /**
   * Determines if a navigation item is active or not
   */
  active: propTypes.bool,

  /**
   * Determines if a navigation item is disabled or not
   */
  disabled: propTypes.bool
};
NavigationItem.defaultProps = {
  className: null,
  id: null,
  active: false,
  disabled: false
};

var ItemListStack = styled__default.div.withConfig({
  displayName: 'NavigationItemListStack'
}).withConfig({
  displayName: "ItemListStack",
  componentId: "sc-1j7wc4b-0"
})(["display:flex;flex-direction:column;color:inherit;"]);

var LogoPairWrapper = styled__default.div.withConfig({
  displayName: "LogoPairWrapper",
  componentId: "sc-8akx9q-0"
})(["display:flex;flex-direction:row;color:inherit;& > ", "{border-left:", " solid;border-left-color:", ";margin:auto;margin-left:0.5em;padding-left:0.5em;}", " > &,", " > &{& > ", "{border-left-color:", ";}}", " > &,", " > &,", " > &{margin:auto ", " auto 0;}"], NavigationHeading, themeGet('thicknesses.normal'), themeGet('colors.text.inverted'), NavigationBar.Light, NavigationBar.Sub, NavigationHeading, themeGet('colors.text.default'), NavigationBar, NavigationBar.Dark, NavigationBar.Sub, themeGet('spacing.small'));



var styles$q = /*#__PURE__*/Object.freeze({
  Bar: NavigationBar,
  Heading: NavigationHeading,
  Item: NavigationItem,
  ItemList: NavigationItemList,
  ItemListStack: ItemListStack,
  LogoPairWrapper: LogoPairWrapper
});

var LogoHeader =
/*#__PURE__*/
function (_React$Component) {
  inherits(LogoHeader, _React$Component);

  function LogoHeader() {
    classCallCheck(this, LogoHeader);

    return possibleConstructorReturn(this, getPrototypeOf(LogoHeader).apply(this, arguments));
  }

  createClass(LogoHeader, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          id = _this$props.id,
          className = _this$props.className,
          LogoPairWrapper$$1 = _this$props.LogoPairWrapper,
          Logo$$1 = _this$props.Logo,
          Heading = _this$props.Heading,
          rest = objectWithoutProperties(_this$props, ["children", "id", "className", "LogoPairWrapper", "Logo", "Heading"]);

      return React__default.createElement(LogoPairWrapper$$1, _extends_1({
        id: id,
        className: className
      }, rest), React__default.createElement(Logo$$1, null), React__default.createElement(Heading, null, children));
    }
  }]);

  return LogoHeader;
}(React__default.Component);

defineProperty(LogoHeader, "propTypes", {
  /**
   * The title to render inside the header.
   */
  children: propTypes.string,

  /**
   * Adds a class name to the whole containing header element.
   */
  className: propTypes.string,

  /**
   * Adds an id to the whole containing header element.
   */
  id: propTypes.string,

  /**
   * A component to wrap the logo and heading text
   */
  LogoPairWrapper: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A component to render the logo
   */
  Logo: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A component to render the heading text
   */
  Heading: propTypes.oneOfType([propTypes.func, propTypes.object])
});

defineProperty(LogoHeader, "defaultProps", {
  children: 'Bandwidth',
  className: null,
  id: null,
  LogoPairWrapper: LogoPairWrapper,
  Logo: Logo,
  Heading: NavigationHeading
});

defineProperty(LogoHeader, "styles", styles$q);

var NavigationBar$1 = NavigationBar;
NavigationBar$1.Title = LogoHeader;
NavigationBar$1.ItemListStack = ItemListStack;
NavigationBar$1.ItemList = NavigationItemList;
NavigationBar$1.Item = NavigationItem;
NavigationBar$1.styles = styles$q;

var NewBadge = styled__default.span.withConfig({
  displayName: "NewBadge",
  componentId: "q4er0u-0"
})(["display:inline-block;&::after{content:'New:';display:inline-block;color:", ";font-weight:bold;font-size:0.85em;margin:0 1em 0 0;text-transform:uppercase;}"], themeGet('colors.primary.default'));
NewBadge.propTypes = {
  /**
   * Adds a class name to the element.
   */
  className: propTypes.string,

  /**
   * Adds an id to the element.
   */
  id: propTypes.string
};
NewBadge.defaultProps = {
  className: null,
  id: null
};

var Corner = styled__default.div.withConfig({
  displayName: "Corner",
  componentId: "sc-12mz480-0"
})(["background:inherit;width:1em;height:calc(100% - 1em + 2px);border-color:", ";border-width:", ";border-style:solid;border-left:0;position:absolute;top:-1px;right:-1em;&:before{content:'';height:0;width:0;border-width:0.5em;border-color:", " transparent transparent ", ";border-style:solid;position:absolute;bottom:calc(-1em - 1px);left:0;box-shadow:0 -1px 0 ", ";}&:after{content:'';height:0;width:0;border-width:calc(0.5em - 1px);border-color:", " transparent transparent ", ";border-style:solid;position:absolute;bottom:calc(-1em + 1px);left:1px;}"], themeGet('colors.border.medium'), themeGet('thicknesses.normal'), themeGet('colors.border.medium'), themeGet('colors.border.medium'), themeGet('colors.border.medium'), themeGet('colors.background.default'), themeGet('colors.background.default'));

var NoteContainer = styled__default.div.withConfig({
  displayName: "Container__NoteContainer",
  componentId: "o67cm1-0"
})(["background:", ";border:", " solid ", ";border-right:0;margin-right:1em;padding:0.7em;padding-left:1em;min-width:10em;position:relative;"], themeGet('colors.background.default'), themeGet('thicknesses.normal'), themeGet('colors.border.medium'));
NoteContainer.Alternate = styled__default(NoteContainer).withConfig({
  displayName: "Container__Alternate",
  componentId: "o67cm1-1"
})(["background:", ";color:", ";border-color:", ";& > ", "{border-color:", ";&::before{border-color:", " transparent transparent ", ";box-shadow:0 -1px 0 ", ";}&::after{border-color:", " transparent transparent ", ";}}"], themeGet('colors.primary.light'), themeGet('colors.primary.dark'), themeGet('colors.primary.default'), Corner, themeGet('colors.primary.default'), themeGet('colors.primary.default'), themeGet('colors.primary.default'), themeGet('colors.primary.default'), themeGet('colors.primary.light'), themeGet('colors.primary.light'));



var styles$r = /*#__PURE__*/Object.freeze({
  Container: NoteContainer,
  Corner: Corner
});

var Note = function Note(_ref) {
  var children = _ref.children,
      Container = _ref.Container,
      Corner$$1 = _ref.Corner,
      rest = objectWithoutProperties(_ref, ["children", "Container", "Corner"]);

  return React__default.createElement(Container, rest, children, React__default.createElement(Corner$$1, null));
};

Note.styles = styles$r;
Note.propTypes = {
  /**
   * Contents of the note
   */
  children: propTypes.node.isRequired,

  /**
   * Override the component that renders the outer container
   */
  Container: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * Override the component that renders the corner
   */
  Corner: propTypes.oneOfType([propTypes.func, propTypes.object])
};
Note.defaultProps = {
  Container: NoteContainer,
  Corner: Corner
};
Note.Alternate = defaultProps({
  Container: NoteContainer.Alternate
})(Note);

var P = styled__default.p.withConfig({
  displayName: "P",
  componentId: "sc-1nu0a4c-0"
})(["margin:", ";font-size:1em;"], userSpacing.text);
P.propTypes = {
  /**
   * Specify a CSS value or an object { top, right, bottom, left } or { vertical, horizontal } to
   * control the spacing around the heading. Defaults to a large space below the element.
   */
  spacing: propTypes.oneOfType([propTypes.string, propTypes.object]),

  /**
   * Adds a class name to the element.
   */
  className: propTypes.string,

  /**
   * Adds an id to the element.
   */
  id: propTypes.string
};
P.defaultProps = {
  spacing: {
    bottom: 'lg'
  },
  className: null,
  id: null
};

var Container$b = styled__default.ul.withConfig({
  displayName: "Container",
  componentId: "l0bkwg-0"
})(["display:inline-block;margin:0;padding:0;list-style:none;user-select:none;"]);

var SIZE$2 = '30px';
var Item = styled__default.li.withConfig({
  displayName: "Item",
  componentId: "ey7ixv-0"
})(["float:left;margin:0;padding:0;width:", ";height:", ";line-height:", ";text-align:center;cursor:pointer;border-width:", ";border-style:solid;border-color:", ";border-right:none;user-select:none;background:", ";color:", ";", " &:active{background:", ";}&:first-of-type{border-radius:3px 0px 0px 3px;}&:last-of-type{border-radius:0px 3px 3px 0px;border-right:", " solid ", ";}"], SIZE$2, SIZE$2, SIZE$2, themeGet('thicknesses.normal'), themeGet('colors.border.medium'), themeGet('colors.background.default'), themeGet('colors.text.default'), function (props) {
  return props.selected ? "\n      background: ".concat(themeGet('colors.primary.default')(props), ";\n      border-color: ").concat(themeGet('colors.primary.default')(props), ";\n      color: ").concat(themeGet('colors.text.inverted')(props), ";\n\n      & + li {\n        border-left-color: ").concat(themeGet('colors.primary.default')(props), ";\n      }\n    ") : "\n      &:hover {\n        background: ".concat(themeGet('colors.primary.light')(props), ";\n      }\n    ");
}, themeGet('colors.primary.default'), themeGet('thicknesses.normal'), themeGet('colors.border.medium'));

var ItemPlaceholder = styled__default.li.withConfig({
  displayName: "ItemPlaceholder",
  componentId: "sc-147oq7q-0"
})(["float:left;margin:0;padding:0;width:", ";height:", ";"], SIZE$2, SIZE$2);



var styles$s = /*#__PURE__*/Object.freeze({
  Container: Container$b,
  Item: Item,
  ItemPlaceholder: ItemPlaceholder
});

/**
 * A basic Pagination component that allows a user to move between pages. You need to provide the current page and other metadata.
 */

var Pagination =
/*#__PURE__*/
function (_React$Component) {
  inherits(Pagination, _React$Component);

  function Pagination() {
    var _getPrototypeOf2,
        _this2 = this;

    var _this;

    classCallCheck(this, Pagination);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Pagination)).call.apply(_getPrototypeOf2, [this].concat(args)));

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "createItemClickHandler", function (index) {
      return function () {
        return _this.props.onPageSelected(index);
      };
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handlePreviousClick", function () {
      var _this$props = _this.props,
          onPageSelected = _this$props.onPageSelected,
          currentPage = _this$props.currentPage;

      if (currentPage === 0) {
        return;
      }

      onPageSelected(currentPage - 1);
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleNextClick", function () {
      var _this$props2 = _this.props,
          onPageSelected = _this$props2.onPageSelected,
          currentPage = _this$props2.currentPage,
          pageCount = _this$props2.pageCount;

      if (currentPage === pageCount - 1) {
        return;
      }

      onPageSelected(currentPage + 1);
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "renderPrevious", function () {
      return _this.props.currentPage > 0 ? React__default.createElement(_this2.props.Item, {
        className: "paginationBack",
        onClick: _this.handlePreviousClick
      }, React__default.createElement(Icon, {
        name: "back"
      })) : React__default.createElement(_this2.props.ItemPlaceholder, null);
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "renderNext", function () {
      return _this.props.currentPage < _this.props.pageCount - 1 ? React__default.createElement(_this2.props.Item, {
        className: "paginationNext",
        onClick: _this.handleNextClick
      }, React__default.createElement(Icon, {
        name: "forward"
      })) : React__default.createElement(_this2.props.ItemPlaceholder, null);
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "renderItems", function () {
      var _this$props3 = _this.props,
          pageCount = _this$props3.pageCount,
          currentPage = _this$props3.currentPage,
          Item$$1 = _this$props3.Item;
      var start = Math.max(0, Math.min(currentPage + 5, pageCount) - 10);
      var end = Math.min(start + 10, pageCount);
      return new Array(pageCount).fill(null) // creates an array of incrementing numbers
      .map(function (_, index) {
        return index;
      }).slice(start, end).map(function (pageNumber) {
        return React__default.createElement(Item$$1, {
          key: pageNumber,
          onClick: _this.createItemClickHandler(pageNumber),
          selected: pageNumber === currentPage
        }, pageNumber + 1);
      });
    });

    return _this;
  }

  createClass(Pagination, [{
    key: "render",
    value: function render() {
      var _this$props4 = this.props,
          Container = _this$props4.Container,
          onPageSelected = _this$props4.onPageSelected,
          rest = objectWithoutProperties(_this$props4, ["Container", "onPageSelected"]);

      return React__default.createElement(Container, rest, this.renderPrevious(), this.renderItems(), this.renderNext());
    }
  }]);

  return Pagination;
}(React__default.Component);

defineProperty(Pagination, "propTypes", {
  /**
   * The number of total pages available.
   */
  pageCount: propTypes.number,

  /**
   * The currently selected page index.
   */
  currentPage: propTypes.number,

  /**
   * A callback for page selection. The callback is passed the new selected page index.
   */
  onPageSelected: propTypes.func.isRequired,

  /**
   * Adds a class name to the pagination container element.
   */
  className: propTypes.string,

  /**
   * Adds an id to the pagination container element.
   */
  id: propTypes.string,

  /**
   * A component to render a container for the pagination
   */
  Container: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A component to render a single pagination item
   */
  Item: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A component to render a placeholder space for a pagination item
   */
  ItemPlaceholder: propTypes.oneOfType([propTypes.func, propTypes.object])
});

defineProperty(Pagination, "defaultProps", {
  pageCount: 1,
  currentPage: 0,
  className: null,
  id: null,
  Container: Container$b,
  Item: Item,
  ItemPlaceholder: ItemPlaceholder
});

defineProperty(Pagination, "styles", styles$s);

var Container$c = styled__default.div.withConfig({
  displayName: "Container",
  componentId: "q4e9hf-0"
})(["display:block;position:relative;& + &{margin-top:", ";}"], themeGet('spacing.extraSmall'));

var Input$2 = styled__default.input.withConfig({
  displayName: "Input",
  componentId: "k53ani-0"
})(["opacity:0;position:absolute;z-index:-1000000;transition:all 0.2s ease;&:checked + label::before{content:\"", "\";}& + label::after{border-color:", ";}&:disabled + label::after{border-color:", ";}&:disabled:checked + label::after{background-color:", ";}&:disabled:not(:checked) + label::after{background-color:", ";}&:checked:not(:disabled) + label::after{background-color:", ";}&:not(:checked):not(:disabled) + label::after{background-color:", ";}"], icons('checkmark'), themeGet('colors.border.dark'), themeGet('colors.border.disabled'), themeGet('colors.background.disabledSelected'), themeGet('colors.background.disabled'), themeGet('colors.background.dark'), themeGet('colors.background.default'));

var SIZE$3 = '30px';
var BORDER_WIDTH = '2px';

var calcLabelColor = function calcLabelColor(_ref) {
  var disabled = _ref.disabled;
  if (disabled) return themeGet('colors.text.disabled');
  return themeGet('colors.text.default');
};

var Label$1 = styled__default.label.withConfig({
  displayName: "Label",
  componentId: "sc-1qs56wd-0"
})(["display:block;cursor:pointer;position:relative;user-select:none;padding-left:calc(", " + 10px);padding-top:4px;padding-bottom:5px;line-height:1.5;min-height:", ";color:", ";", ":enabled + &:hover::after,", ":enabled:focus + &::after{box-shadow:", ";}&::before{color:", " !important;font-family:", ";text-align:center;width:", ";height:", ";display:block;position:absolute;top:50%;left:calc(", " / 2);transform:translate(-50%,-50%);z-index:1;font-size:1.5em;line-height:1.5;transition:all 0.2s ease;}&::after{content:'';border-style:solid;border-radius:", ";border-width:", ";width:calc(", " - 2 * ", ");height:calc(", " - 2 * ", ");display:block;position:absolute;top:50%;left:calc(", " / 2);transform:translate(-50%,-50%);transition:all 0.2s ease;}"], SIZE$3, SIZE$3, calcLabelColor, Input$2, Input$2, themeGet('shadows.focusOutline'), themeGet('colors.text.inverted'), themeGet('fonts.icon'), SIZE$3, SIZE$3, SIZE$3, SIZE$3, BORDER_WIDTH, SIZE$3, BORDER_WIDTH, SIZE$3, BORDER_WIDTH, SIZE$3);



var styles$t = /*#__PURE__*/Object.freeze({
  Container: Container$c,
  Input: Input$2,
  Label: Label$1
});

/**
 * A basic `<input type="radio">` component. Group buttons together by setting the `name` prop for them to the same value.
 */

var Radio =
/*#__PURE__*/
function (_React$PureComponent) {
  inherits(Radio, _React$PureComponent);

  function Radio() {
    var _getPrototypeOf2;

    var _this;

    classCallCheck(this, Radio);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Radio)).call.apply(_getPrototypeOf2, [this].concat(args)));

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "defaultId", generateId('radio'));

    return _this;
  }

  createClass(Radio, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          id = _this$props.id,
          disabled = _this$props.disabled,
          checked = _this$props.checked,
          required = _this$props.required,
          description = _this$props.description,
          Container = _this$props.Container,
          Input = _this$props.Input,
          Label = _this$props.Label,
          rest = objectWithoutProperties(_this$props, ["id", "disabled", "checked", "required", "description", "Container", "Input", "Label"]);

      var finalId = id || this.defaultId;
      return React__default.createElement(Container, null, React__default.createElement(Input, _extends_1({
        id: finalId,
        type: "radio",
        disabled: !!disabled,
        checked: !!checked,
        required: !!required
      }, rest)), React__default.createElement(Label, {
        htmlFor: finalId,
        checked: !!checked,
        disabled: !!disabled,
        required: !!required
      }, description));
    }
  }]);

  return Radio;
}(React__default.PureComponent);

defineProperty(Radio, "propTypes", {
  /**
   * Adds a class name to the input element.
   */
  className: propTypes.string,

  /**
   * Adds an id to the input element.
   */
  id: propTypes.string,

  /**
   * The value of the radio; a string that describes what the value should be if checked=true
   */
  value: propTypes.string.isRequired,

  /**
   * Whether the radio is checked
   */
  checked: propTypes.bool,

  /**
   * Name ties groups of radio buttons together
   */
  name: propTypes.string.isRequired,

  /**
   * Whether the radio is required for form submission.
   */
  required: propTypes.bool,

  /**
   * Whether the user is prevented from interacting with the radio.
   */
  disabled: propTypes.bool,

  /**
   * A description to display next to the radio.
   */
  description: propTypes.node,

  /**
   * Callback for the onChange event of the input.
   */
  onChange: propTypes.func,

  /**
   * A component for rendering a container around the input and label
   */
  Container: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A component for rendering the input (usually hidden)
   */
  Input: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A component for rendering the label. By default this also renders the radio button itself.
   */
  Label: propTypes.oneOfType([propTypes.func, propTypes.object])
});

defineProperty(Radio, "defaultProps", {
  className: null,
  id: null,
  checked: false,
  required: false,
  disabled: false,
  description: null,
  onChange: function onChange() {
    return null;
  },
  Container: Container$c,
  Input: Input$2,
  Label: Label$1
});

defineProperty(Radio, "styles", styles$t);

Radio.Input = Input$2;
Radio.Label = Label$1;
Radio.Container = Container$c;

var Arrow = styled__default(Icon).withConfig({
  displayName: "Arrow",
  componentId: "sc-1mhbb9-0"
})(["transform:", ";transition:0.2s ease all;cursor:pointer;"], function (props) {
  return props.expanded ? 'rotate(180deg)' : 'rotate(0deg)';
});
var Arrow$1 = (function (props) {
  return React__default.createElement(Arrow, _extends_1({}, props, {
    name: "expandArrow"
  }));
});

var fadeIn$1 = styled.keyframes(["from{opacity:0;}to{opacity:1;}"]);
var ClearButton = styled__default(Icon).withConfig({
  displayName: "ClearButton",
  componentId: "sc-1e2yi44-0"
})(["transform:", ";transition:0.2s ease all;cursor:pointer;animation:", " 200ms;&:hover{color:", ";}"], function (props) {
  return props.expanded ? 'rotate(180deg)' : 'rotate(0deg)';
}, fadeIn$1, themeGet('colors.primary.default'));
var DefaultClearButton = (function (props) {
  return React__default.createElement(ClearButton, _extends_1({}, props, {
    onClick: function onClick(ev) {
      ev.stopPropagation();
      props.onClick(ev);
    },
    name: "delete2"
  }));
});

var Controls = styled__default.div.withConfig({
  displayName: "Controls",
  componentId: "sc-3o70n2-0"
})(["display:flex;flex-direction:row;& > *:not(:last-child){margin-right:", ";}"], themeGet('spacing.small'));

var DefaultOption = styled__default.div.withConfig({
  displayName: "Option",
  componentId: "vc2phj-0"
})(["padding:", " ", ";cursor:pointer;background:", ";& + &{border-top:", " solid ", ";}"], themeGet('spacing.extraSmall'), themeGet('spacing.medium'), function (props) {
  return props.highlighted ? themeGet('colors.primary.light')(props) : themeGet('colors.backgrounds.default')(props);
}, themeGet('thicknesses.normal'), themeGet('colors.border.light'));

var DefaultOptionsList = styled__default.div.withConfig({
  displayName: "OptionsList",
  componentId: "mwdmdi-0"
})(["background-color:", ";border:", " solid ", ";box-shadow:", ";box-sizing:border-box;max-height:200px;z-index:1000000;-webkit-overflow-scrolling:touch;overflow-y:auto;overflow-x:hidden;will-change:transform;"], themeGet('colors.background.default'), themeGet('thicknesses.wide'), themeGet('colors.border.medium'), themeGet('shadows.short'));

var expandDown$2 = styled.keyframes(["from{transform:scaleY(0);opacity:0;}to{transform:scaleY(1);opacity:1;}"]);
var expandUp$2 = styled.keyframes(["from{transform:scaleY(0);opacity:0;}to{transform:scaleY(1);opacity:1;}"]);
var DefaultOptionsListContainer = styled__default.div.withConfig({
  displayName: "OptionsListContainer",
  componentId: "sc-61orqq-0"
})(["&[data-placement='bottom'] > *{border-top-width:0;transform-origin:50% 0%;animation:", " 200ms;}&[data-placement='top'] > *{border-bottom-width:0;transform-origin:50% 100%;animation:", " 200ms;}"], expandDown$2, expandUp$2);

var FakeInput = styled__default(function (props) {
  return React__default.createElement(Input$1, _extends_1({
    as: "div"
  }, props));
}).withConfig({
  displayName: "LoadingState__FakeInput",
  componentId: "sc-2zatqh-0"
})(["height:53px;"]);
var Overlay$2 = styled__default(Loader).withConfig({
  displayName: "LoadingState__Overlay",
  componentId: "sc-2zatqh-1"
})(["position:absolute;left:50% !important;top:50% !important;transform:translate(-50%,-50%);"]);
var FadedArrow = styled__default(Arrow$1).withConfig({
  displayName: "LoadingState__FadedArrow",
  componentId: "sc-2zatqh-2"
})(["opacity:0.5;"]);
var DefaultLoadingState = (function (props) {
  return React__default.createElement(FakeInput, _extends_1({}, props, {
    inlineContent: React__default.createElement(Controls, null, React__default.createElement(FadedArrow, null))
  }), React__default.createElement(Overlay$2, null));
});

var Searchable = React.forwardRef(function (_ref, ref) {
  var isOpen = _ref.isOpen,
      clearSelection = _ref.clearSelection,
      getInputProps = _ref.getInputProps,
      inputValue = _ref.inputValue,
      getToggleButtonProps = _ref.getToggleButtonProps,
      placeholder = _ref.placeholder,
      setState = _ref.setState,
      openMenu = _ref.openMenu,
      disabled = _ref.disabled,
      required = _ref.required,
      loading = _ref.loading,
      invalid = _ref.invalid,
      Input = _ref.Input,
      Controls$$1 = _ref.Controls,
      Arrow = _ref.Arrow,
      ClearButton = _ref.ClearButton,
      LoadingState = _ref.LoadingState,
      rest = objectWithoutProperties(_ref, ["isOpen", "clearSelection", "getInputProps", "inputValue", "getToggleButtonProps", "placeholder", "setState", "openMenu", "disabled", "required", "loading", "invalid", "Input", "Controls", "Arrow", "ClearButton", "LoadingState"]);

  if (loading) {
    return React__default.createElement(LoadingState, {
      required: required,
      invalid: invalid
    });
  }

  return React__default.createElement(Input, _extends_1({}, getInputProps({
    inputRef: ref,
    appearFocused: isOpen,
    placeholder: placeholder,
    disabled: disabled || loading,
    required: required,
    invalid: invalid,
    onFocus: openMenu,
    value: inputValue
  }), rest, {
    inlineContent: React__default.createElement(Controls$$1, null, !!inputValue && !disabled && !required && React__default.createElement(ClearButton, {
      onClick: clearSelection
    }), React__default.createElement(Arrow, getToggleButtonProps({
      expanded: isOpen,
      onClick: function onClick() {
        return setState({
          inputValue: ''
        });
      }
    })))
  }));
});
Searchable.defaultProps = {
  Input: Input$1,
  Controls: Controls,
  Arrow: Arrow$1,
  ClearButton: DefaultClearButton,
  LoadingState: DefaultLoadingState
};
Searchable.styles = {
  Controls: Controls,
  Arrow: Arrow$1,
  ClearButton: DefaultClearButton,
  LoadingState: DefaultLoadingState
};

var fadeIn$2 = styled.keyframes(["from{opacity:0;}to{opacity:1;}"]);
var expand = styled.keyframes(["from{transform:translateY(-50%) scaleY(0);opacity:0;}to{transform:translateY(0) scaleY(1);opacity:1;}"]);
var SelectWrapper = styled__default.div.withConfig({
  displayName: "SelectWrapper",
  componentId: "sc-1yi0unl-0"
})(["width:100%;color:", ";.Select{position:relative;font-size:1em;}.Select,.Select div,.Select input,.Select span{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;}.Select.is-disabled > .Select-control{background-color:", ";}.Select.is-disabled > .Select-control:hover{box-shadow:none;}.Select.is-disabled .Select-arrow-zone{cursor:default;pointer-events:none;opacity:0.5;}.Select-placeholder ~ .Select-input,.Select-value ~ .Select-input{position:absolute;left:0;top:0;bottom:0;}.Select-control{background-color:", ";border-color:", ";border-radius:0;border-width:", ";border-style:solid;color:inherit;cursor:default;border-spacing:0;border-collapse:separate;outline:none;overflow:hidden;position:relative;width:100%;min-height:53px;display:flex;& > *{flex:0 1 auto;}& > .Select-multi-value-wrapper{flex:1 1 auto;}}", " .Select-control .Select-input:focus{outline:none;}.is-searchable.is-open > .Select-control{cursor:text;}.is-open > .Select-control .Select-arrow{transform:rotate(180deg);}.is-searchable.is-focused:not(.is-open) > .Select-control{cursor:text;}.is-focused > .Select-control{border-color:", ";}.is-focused:not(.is-open) > .Select-control{box-shadow:inset 0 -5px 0 ", ";}.Select-placeholder,.Select--single > .Select-control .Select-value{color:", ";font-size:inherit;line-height:1.5;padding:calc(", " - 1px) ", ";max-width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;}.has-value.Select--single > .Select-control .Select-value .Select-value-label,.has-value.is-pseudo-focused.Select--single > .Select-control .Select-value .Select-value-label{color:inherit;cursor:pointer;text-decoration:none;}.has-value.Select--single > .Select-control .Select-value a.Select-value-label:hover,.has-value.is-pseudo-focused.Select--single > .Select-control .Select-value a.Select-value-label:hover{color:", ";outline:none;}.has-value.Select--single > .Select-control .Select-value a.Select-value-label:focus,.has-value.is-pseudo-focused.Select--single > .Select-control .Select-value a.Select-value-label:focus{color:", ";outline:none;}& .is-open .Select-control .Select-value .Select-value-label{color:inherit !important;}.Select-input{font-size:inherit;line-height:1.5;padding:calc(", " - 1px) ", ";vertical-align:middle;}.Select-input > input{padding:0;width:100%;background:none transparent;border:0 none;box-shadow:none;cursor:default;display:block;margin:0;outline:none;line-height:1;font-size:inherit;min-height:1em;font:", ";-webkit-appearance:none;}.is-focused .Select-input > input{cursor:text;}.has-value.is-pseudo-focused .Select-input{opacity:0;}.Select-control:not(.is-searchable) > .Select-input{outline:none;}.Select-loading-zone{position:absolute;right:35px;top:50%;transform:translateY(-50%);}.Select-loading{width:0;height:0;}.is-loading .Select-placeholder{width:100%;display:flex;& > *{margin:auto;}}.Select-clear-zone{animation:", " 200ms;color:inherit;opacity:0.5;cursor:pointer;text-align:center;padding:9px 10px;}.Select-clear-zone:hover{opacity:1;}.Select-clear{font-size:20px;display:block;height:26px;}.Select--multi .Select-clear-zone{width:17px;}.Select-arrow-zone{cursor:pointer;display:inline-block;}.Select-arrow{display:block;padding:calc(", " - 1px) ", ";transition:transform 200ms;&::before{font-family:", ";content:'\\f117';}}.is-open .Select-arrow,.Select-arrow-zone:hover > .Select-arrow{border-top-color:", ";}.Select--multi .Select-multi-value-wrapper{display:flex;flex-direction:row;}.Select .Select-aria-only{display:inline-block;height:1px;width:1px;margin:-1px;clip:rect(0,0,0,0);overflow:hidden;float:left;}.Select-menu-outer{background-color:", ";border:", " solid ", ";border-top-width:0;box-shadow:", ";box-sizing:border-box;max-height:200px;position:absolute;top:100%;width:100%;z-index:1000000;-webkit-overflow-scrolling:touch;overflow:hidden;animation:", " 200ms;}.Select-menu{max-height:198px;overflow-y:auto;}.Select-option{box-sizing:border-box;border-bottom:", " solid ", ";background-color:", ";color:", ";cursor:pointer;display:block;padding:calc(", " - 1px) ", ";}.Select-option.is-geted{color:", ";}.Select-option.is-focused{background-color:", ";color:", ";}.Select-option.is-disabled{color:", ";cursor:default;}.Select-noresults{box-sizing:border-box;color:", ";cursor:default;display:block;padding:calc(", " - 1px) ", ";}.Select--multi .Select-input{vertical-align:middle;margin-left:10px;padding:0;}.Select--multi.has-value .Select-input{margin-left:5px;}.Select--multi .Select-value{background-color:", ";border-radius:5px;color:", ";display:flex;flex-direction:row;justify-content:flex-start;font-size:0.9em;line-height:1.4;margin-left:5px;margin-top:5px;vertical-align:top;padding:", ";border-width:", ";border-style:solid;border-color:", ";}.Select--multi .Select-value-icon,.Select--multi .Select-value-label{flex:0 0 auto;margin:auto 4px;}.Select--multi .Select-value-label{border-bottom-right-radius:2px;border-top-right-radius:2px;cursor:default;}.Select--multi a.Select-value-label{color:", ";cursor:pointer;text-decoration:none;}.Select--multi a.Select-value-label:hover{text-decoration:underline;}.Select--multi .Select-value-icon{cursor:pointer;border-bottom-left-radius:2px;border-top-left-radius:2px;border-right-width:", ";border-right-style:solid;border-right-color:", ";padding-right:5px;}.Select--multi .Select-value-icon:hover,.Select--multi .Select-value-icon:focus,.Select--multi .Select-value-icon:active{color:", ";background:", ";}.Select--multi.is-disabled .Select-value{background-color:", ";border-color:", ";border-style:solid;border-width:", ";color:", ";}.Select--multi.is-disabled .Select-value-icon{cursor:not-allowed;border-right-color:", ";border-right-style:solid;border-right-width:", ";}.Select--multi.is-disabled .Select-value-icon:hover,.Select--multi.is-disabled .Select-value-icon:focus,.Select--multi.is-disabled .Select-value-icon:active{background-color:", ";color:", ";}"], themeGet('colors.text.default'), themeGet('colors.background.disabled'), themeGet('colors.background.default'), function (props) {
  return props.invalid ? themeGet('colors.negative.border') : themeGet('colors.border.light');
}, themeGet('thicknesses.wide'), function (props) {
  return props.invalid ? styled.css([".Select:not(.is-open) > .Select-control{box-shadow:inset 0 -5px 0 ", ";}"], themeGet('colors.negative.light')) : '';
}, themeGet('colors.border.medium'), themeGet('colors.primary.light'), function (_ref) {
  var value = _ref.value;
  return value ? 'inherit' : themeGet('colors.text.disabled');
}, themeGet('spacing.medium'), themeGet('spacing.medium'), themeGet('colors.primary.default'), themeGet('colors.primary.default'), themeGet('spacing.medium'), themeGet('spacing.medium'), themeGet('fonts.brand'), fadeIn$2, themeGet('spacing.medium'), themeGet('spacing.medium'), themeGet('fonts.icon'), themeGet('colors.gray.default'), themeGet('colors.background.default'), themeGet('thicknesses.wide'), themeGet('colors.border.medium'), themeGet('shadows.short'), expand, themeGet('thicknesses.normal'), themeGet('colors.gray.border'), themeGet('colors.background.default'), themeGet('colors.text.default'), themeGet('spacing.extraSmall'), themeGet('spacing.medium'), themeGet('colors.primary.default'), themeGet('colors.primary.light'), themeGet('colors.text.default'), themeGet('colors.gray.medium'), themeGet('colors.text.default'), themeGet('spacing.extraSmall'), themeGet('spacing.medium'), themeGet('colors.primary.light'), themeGet('colors.primary.default'), themeGet('spacing.extraSmall'), themeGet('thicknesses.wide'), themeGet('colors.primary.default'), themeGet('colors.primary.default'), themeGet('thicknesses.wide'), themeGet('colors.primary.default'), themeGet('colors.text.inverted'), themeGet('colors.primary.default'), themeGet('colors.background.disabled'), themeGet('colors.gray.default'), themeGet('thicknesses.wide'), themeGet('colors.text.disabled'), themeGet('colors.gray.default'), themeGet('thicknesses.wide'), themeGet('colors.background.disabled'), themeGet('colors.text.disabled'));

var DefaultWrapper = styled__default.div.withConfig({
  displayName: "CurrentValue__DefaultWrapper",
  componentId: "sc-1ucn4hn-0"
})(["position:relative;cursor:pointer;height:53px;& > *:not(:first-child){position:absolute;right:", ";top:30%;z-index:10;}& > *:first-child{padding-right:", ";height:100%;}"], themeGet('spacing.medium'), themeGet('spacing.extraLarge'));
var Unsearchable = React.forwardRef(function (_ref, ref) {
  var isOpen = _ref.isOpen,
      clearSelection = _ref.clearSelection,
      getToggleButtonProps = _ref.getToggleButtonProps,
      inputValue = _ref.inputValue,
      placeholder = _ref.placeholder,
      disabled = _ref.disabled,
      loading = _ref.loading,
      required = _ref.required,
      invalid = _ref.invalid,
      Wrapper = _ref.Wrapper,
      Input = _ref.Input,
      Controls$$1 = _ref.Controls,
      ClearButton = _ref.ClearButton,
      Arrow = _ref.Arrow,
      LoadingState = _ref.LoadingState,
      rest = objectWithoutProperties(_ref, ["isOpen", "clearSelection", "getToggleButtonProps", "inputValue", "placeholder", "disabled", "loading", "required", "invalid", "Wrapper", "Input", "Controls", "ClearButton", "Arrow", "LoadingState"]);

  if (loading) {
    return React__default.createElement(LoadingState, {
      required: required,
      invalid: invalid
    });
  }

  return React__default.createElement(Wrapper, disabled || loading ? {} : getToggleButtonProps({
    ref: ref
  }), React__default.createElement(Input, _extends_1({
    "aria-role": "select",
    appearFocused: isOpen,
    disabled: disabled,
    required: required,
    invalid: invalid,
    value: inputValue || placeholder
  }, rest)), React__default.createElement(Controls$$1, null, !!inputValue && !disabled && !required && React__default.createElement(ClearButton, {
    onClick: clearSelection
  }), React__default.createElement(Arrow, {
    expanded: isOpen
  })));
});
Unsearchable.defaultProps = {
  Wrapper: DefaultWrapper,
  Input: Input$1,
  Controls: Controls,
  Arrow: Arrow$1,
  ClearButton: DefaultClearButton,
  LoadingState: DefaultLoadingState
};
Unsearchable.styles = {
  Wrapper: DefaultWrapper,
  Input: Input$1,
  Controls: Controls,
  Arrow: Arrow$1,
  ClearButton: DefaultClearButton,
  LoadingState: DefaultLoadingState
};

/**
 * A component to render the options of a Select. It will receive a variety of
 * props which you may use to construct your rendering behavior. This component MUST
 * forward its ref to a valid HTML element!
 */

var Options = React.forwardRef(function (_ref, ref) {
  var placement = _ref.placement,
      getMenuProps = _ref.getMenuProps,
      getItemProps = _ref.getItemProps,
      renderOption = _ref.renderOption,
      highlightedIndex = _ref.highlightedIndex,
      style = _ref.style,
      options = _ref.options,
      OptionsListContainer = _ref.OptionsListContainer,
      OptionsList = _ref.OptionsList,
      Option = _ref.Option;

  if (!options.length) {
    return React__default.createElement(OptionsListContainer, _extends_1({
      "data-placement": placement
    }, getMenuProps({
      ref: ref,
      style: style
    })), React__default.createElement(OptionsList, null, React__default.createElement(Option, null, React__default.createElement(HelpText, null, "No items"))));
  }

  return React__default.createElement(OptionsListContainer, _extends_1({
    "data-placement": placement
  }, getMenuProps({
    ref: ref,
    style: style
  })), React__default.createElement(OptionsList, null, options.map(function (option, index) {
    return React__default.createElement(Option, getItemProps({
      key: renderOption(option),
      index: index,
      item: option,
      highlighted: highlightedIndex === index
    }), renderOption(option));
  })));
});
Options.defaultProps = {
  OptionsListContainer: DefaultOptionsListContainer,
  OptionsList: DefaultOptionsList,
  Option: DefaultOption
};
Options.styles = {
  OptionsListContainer: DefaultOptionsListContainer,
  OptionsList: DefaultOptionsList,
  Option: DefaultOption
};



var styles$u = /*#__PURE__*/Object.freeze({
  Arrow: Arrow$1,
  ClearButton: DefaultClearButton,
  Controls: Controls,
  Option: DefaultOption,
  OptionsList: DefaultOptionsList,
  OptionsListContainer: DefaultOptionsListContainer,
  SearchableCurrentValue: Searchable,
  SelectWrapper: SelectWrapper,
  CurrentValue: Unsearchable,
  Options: Options,
  LoadingState: DefaultLoadingState
});

function isElement(el) {
  return el != null && typeof el === 'object' && el.nodeType === 1;
}

function canOverflow(overflow, skipOverflowHiddenElements) {
  if (skipOverflowHiddenElements && overflow === 'hidden') {
    return false;
  }

  return overflow !== 'visible' && overflow !== 'clip';
}

function isScrollable(el, skipOverflowHiddenElements) {
  if (el.clientHeight < el.scrollHeight || el.clientWidth < el.scrollWidth) {
    var style = getComputedStyle(el, null);
    return canOverflow(style.overflowY, skipOverflowHiddenElements) || canOverflow(style.overflowX, skipOverflowHiddenElements);
  }

  return false;
}

function alignNearest(scrollingEdgeStart, scrollingEdgeEnd, scrollingSize, scrollingBorderStart, scrollingBorderEnd, elementEdgeStart, elementEdgeEnd, elementSize) {
  if (elementEdgeStart < scrollingEdgeStart && elementEdgeEnd > scrollingEdgeEnd || elementEdgeStart > scrollingEdgeStart && elementEdgeEnd < scrollingEdgeEnd) {
    return 0;
  }

  if (elementEdgeStart <= scrollingEdgeStart && elementSize <= scrollingSize || elementEdgeEnd >= scrollingEdgeEnd && elementSize >= scrollingSize) {
    return elementEdgeStart - scrollingEdgeStart - scrollingBorderStart;
  }

  if (elementEdgeEnd > scrollingEdgeEnd && elementSize < scrollingSize || elementEdgeStart < scrollingEdgeStart && elementSize > scrollingSize) {
    return elementEdgeEnd - scrollingEdgeEnd + scrollingBorderEnd;
  }

  return 0;
}

var computeScrollIntoView = (function (target, options) {
  var scrollMode = options.scrollMode,
      block = options.block,
      inline = options.inline,
      boundary = options.boundary,
      skipOverflowHiddenElements = options.skipOverflowHiddenElements;
  var checkBoundary = typeof boundary === 'function' ? boundary : function (node) {
    return node !== boundary;
  };

  if (!isElement(target)) {
    throw new TypeError('Invalid target');
  }

  var scrollingElement = document.scrollingElement || document.documentElement;
  var frames = [];
  var cursor = target;

  while (isElement(cursor) && checkBoundary(cursor)) {
    cursor = cursor.parentNode;

    if (cursor === scrollingElement) {
      frames.push(cursor);
      break;
    }

    if (cursor === document.body && isScrollable(cursor) && !isScrollable(document.documentElement)) {
      continue;
    }

    if (isScrollable(cursor, skipOverflowHiddenElements)) {
      frames.push(cursor);
    }
  }

  var viewportWidth = window.visualViewport ? visualViewport.width : innerWidth;
  var viewportHeight = window.visualViewport ? visualViewport.height : innerHeight;
  var viewportX = window.scrollX || pageXOffset;
  var viewportY = window.scrollY || pageYOffset;

  var _target$getBoundingCl = target.getBoundingClientRect(),
      targetHeight = _target$getBoundingCl.height,
      targetWidth = _target$getBoundingCl.width,
      targetTop = _target$getBoundingCl.top,
      targetRight = _target$getBoundingCl.right,
      targetBottom = _target$getBoundingCl.bottom,
      targetLeft = _target$getBoundingCl.left;

  var targetBlock = block === 'start' || block === 'nearest' ? targetTop : block === 'end' ? targetBottom : targetTop + targetHeight / 2;
  var targetInline = inline === 'center' ? targetLeft + targetWidth / 2 : inline === 'end' ? targetRight : targetLeft;
  var computations = [];

  for (var index = 0; index < frames.length; index++) {
    var frame = frames[index];

    var _frame$getBoundingCli = frame.getBoundingClientRect(),
        _height = _frame$getBoundingCli.height,
        _width = _frame$getBoundingCli.width,
        _top = _frame$getBoundingCli.top,
        right = _frame$getBoundingCli.right,
        bottom = _frame$getBoundingCli.bottom,
        _left = _frame$getBoundingCli.left;

    if (scrollMode === 'if-needed' && targetTop >= 0 && targetLeft >= 0 && targetBottom <= viewportHeight && targetRight <= viewportWidth && targetTop >= _top && targetBottom <= bottom && targetLeft >= _left && targetRight <= right) {
      return computations;
    }

    var frameStyle = getComputedStyle(frame);
    var borderLeft = parseInt(frameStyle.borderLeftWidth, 10);
    var borderTop = parseInt(frameStyle.borderTopWidth, 10);
    var borderRight = parseInt(frameStyle.borderRightWidth, 10);
    var borderBottom = parseInt(frameStyle.borderBottomWidth, 10);
    var blockScroll = 0;
    var inlineScroll = 0;
    var scrollbarWidth = 'offsetWidth' in frame ? frame.offsetWidth - frame.clientWidth - borderLeft - borderRight : 0;
    var scrollbarHeight = 'offsetHeight' in frame ? frame.offsetHeight - frame.clientHeight - borderTop - borderBottom : 0;

    if (scrollingElement === frame) {
      if (block === 'start') {
        blockScroll = targetBlock;
      } else if (block === 'end') {
        blockScroll = targetBlock - viewportHeight;
      } else if (block === 'nearest') {
        blockScroll = alignNearest(viewportY, viewportY + viewportHeight, viewportHeight, borderTop, borderBottom, viewportY + targetBlock, viewportY + targetBlock + targetHeight, targetHeight);
      } else {
        blockScroll = targetBlock - viewportHeight / 2;
      }

      if (inline === 'start') {
        inlineScroll = targetInline;
      } else if (inline === 'center') {
        inlineScroll = targetInline - viewportWidth / 2;
      } else if (inline === 'end') {
        inlineScroll = targetInline - viewportWidth;
      } else {
        inlineScroll = alignNearest(viewportX, viewportX + viewportWidth, viewportWidth, borderLeft, borderRight, viewportX + targetInline, viewportX + targetInline + targetWidth, targetWidth);
      }

      blockScroll = Math.max(0, blockScroll + viewportY);
      inlineScroll = Math.max(0, inlineScroll + viewportX);
    } else {
      if (block === 'start') {
        blockScroll = targetBlock - _top - borderTop;
      } else if (block === 'end') {
        blockScroll = targetBlock - bottom + borderBottom + scrollbarHeight;
      } else if (block === 'nearest') {
        blockScroll = alignNearest(_top, bottom, _height, borderTop, borderBottom + scrollbarHeight, targetBlock, targetBlock + targetHeight, targetHeight);
      } else {
        blockScroll = targetBlock - (_top + _height / 2) + scrollbarHeight / 2;
      }

      if (inline === 'start') {
        inlineScroll = targetInline - _left - borderLeft;
      } else if (inline === 'center') {
        inlineScroll = targetInline - (_left + _width / 2) + scrollbarWidth / 2;
      } else if (inline === 'end') {
        inlineScroll = targetInline - right + borderRight + scrollbarWidth;
      } else {
        inlineScroll = alignNearest(_left, right, _width, borderLeft, borderRight + scrollbarWidth, targetInline, targetInline + targetWidth, targetWidth);
      }

      var scrollLeft = frame.scrollLeft,
          scrollTop = frame.scrollTop;
      blockScroll = Math.max(0, Math.min(scrollTop + blockScroll, frame.scrollHeight - _height + scrollbarHeight));
      inlineScroll = Math.max(0, Math.min(scrollLeft + inlineScroll, frame.scrollWidth - _width + scrollbarWidth));
      targetBlock += scrollTop - blockScroll;
      targetInline += scrollLeft - inlineScroll;
    }

    computations.push({
      el: frame,
      top: blockScroll,
      left: inlineScroll
    });
  }

  return computations;
});

function _objectWithoutPropertiesLoose$1(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _extends$1() {
  _extends$1 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends$1.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

function _assertThisInitialized$1(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

// istanbul ignore next
var statusDiv = typeof document === 'undefined' ? null : document.getElementById('a11y-status-message');
var statuses = [];
/**
 * @param {String} status the status message
 */

function setStatus(status) {
  var isSameAsLast = statuses[statuses.length - 1] === status;

  if (isSameAsLast) {
    statuses = statuses.concat([status]);
  } else {
    statuses = [status];
  }

  var div = getStatusDiv(); // Remove previous children

  while (div.lastChild) {
    div.removeChild(div.firstChild);
  }

  statuses.filter(Boolean).forEach(function (statusItem, index) {
    div.appendChild(getStatusChildDiv(statusItem, index));
  });
}
/**
 * @param {String} status the status message
 * @param {Number} index the index
 * @return {HTMLElement} the child node
 */


function getStatusChildDiv(status, index) {
  var display = index === statuses.length - 1 ? 'block' : 'none';
  var childDiv = document.createElement('div');
  childDiv.style.display = display;
  childDiv.textContent = status;
  return childDiv;
}
/**
 * Get the status node or create it if it does not already exist
 * @return {HTMLElement} the status node
 */


function getStatusDiv() {
  if (statusDiv) {
    return statusDiv;
  }

  statusDiv = document.createElement('div');
  statusDiv.setAttribute('id', 'a11y-status-message');
  statusDiv.setAttribute('role', 'status');
  statusDiv.setAttribute('aria-live', 'assertive');
  statusDiv.setAttribute('aria-relevant', 'additions text');
  Object.assign(statusDiv.style, {
    border: '0',
    clip: 'rect(0 0 0 0)',
    height: '1px',
    margin: '-1px',
    overflow: 'hidden',
    padding: '0',
    position: 'absolute',
    width: '1px'
  });
  document.body.appendChild(statusDiv);
  return statusDiv;
}

var unknown = '__autocomplete_unknown__';
var mouseUp = '__autocomplete_mouseup__';
var itemMouseEnter = '__autocomplete_item_mouseenter__';
var keyDownArrowUp = '__autocomplete_keydown_arrow_up__';
var keyDownArrowDown = '__autocomplete_keydown_arrow_down__';
var keyDownEscape = '__autocomplete_keydown_escape__';
var keyDownEnter = '__autocomplete_keydown_enter__';
var clickItem = '__autocomplete_click_item__';
var blurInput = '__autocomplete_blur_input__';
var changeInput = '__autocomplete_change_input__';
var keyDownSpaceButton = '__autocomplete_keydown_space_button__';
var clickButton = '__autocomplete_click_button__';
var blurButton = '__autocomplete_blur_button__';
var controlledPropUpdatedSelectedItem = '__autocomplete_controlled_prop_updated_selected_item__';
var touchStart = '__autocomplete_touchstart__';

var stateChangeTypes = /*#__PURE__*/Object.freeze({
  unknown: unknown,
  mouseUp: mouseUp,
  itemMouseEnter: itemMouseEnter,
  keyDownArrowUp: keyDownArrowUp,
  keyDownArrowDown: keyDownArrowDown,
  keyDownEscape: keyDownEscape,
  keyDownEnter: keyDownEnter,
  clickItem: clickItem,
  blurInput: blurInput,
  changeInput: changeInput,
  keyDownSpaceButton: keyDownSpaceButton,
  clickButton: clickButton,
  blurButton: blurButton,
  controlledPropUpdatedSelectedItem: controlledPropUpdatedSelectedItem,
  touchStart: touchStart
});

var idCounter = 0;
/**
 * Accepts a parameter and returns it if it's a function
 * or a noop function if it's not. This allows us to
 * accept a callback, but not worry about it if it's not
 * passed.
 * @param {Function} cb the callback
 * @return {Function} a function
 */

function cbToCb(cb) {
  return typeof cb === 'function' ? cb : noop$1;
}

function noop$1() {}
/**
 * Scroll node into view if necessary
 * @param {HTMLElement} node the element that should scroll into view
 * @param {HTMLElement} rootNode the root element of the component
 */


function scrollIntoView(node, rootNode) {
  if (node === null) {
    return;
  }

  var actions = computeScrollIntoView(node, {
    boundary: rootNode,
    block: 'nearest',
    scrollMode: 'if-needed'
  });
  actions.forEach(function (_ref) {
    var el = _ref.el,
        top = _ref.top,
        left = _ref.left;
    el.scrollTop = top;
    el.scrollLeft = left;
  });
}
/**
 * @param {HTMLElement} parent the parent node
 * @param {HTMLElement} child the child node
 * @return {Boolean} whether the parent is the child or the child is in the parent
 */


function isOrContainsNode(parent, child) {
  return parent === child || parent.contains && parent.contains(child);
}
/**
 * Simple debounce implementation. Will call the given
 * function once after the time given has passed since
 * it was last called.
 * @param {Function} fn the function to call after the time
 * @param {Number} time the time to wait
 * @return {Function} the debounced function
 */


function debounce$1(fn, time) {
  var timeoutId;

  function cancel() {
    if (timeoutId) {
      clearTimeout(timeoutId);
    }
  }

  function wrapper() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    cancel();
    timeoutId = setTimeout(function () {
      timeoutId = null;
      fn.apply(void 0, args);
    }, time);
  }

  wrapper.cancel = cancel;
  return wrapper;
}
/**
 * This is intended to be used to compose event handlers.
 * They are executed in order until one of them sets
 * `event.preventDownshiftDefault = true`.
 * @param {...Function} fns the event handler functions
 * @return {Function} the event handler to add to an element
 */


function callAllEventHandlers() {
  for (var _len2 = arguments.length, fns = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    fns[_key2] = arguments[_key2];
  }

  return function (event) {
    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      args[_key3 - 1] = arguments[_key3];
    }

    return fns.some(function (fn) {
      if (fn) {
        fn.apply(void 0, [event].concat(args));
      }

      return event.preventDownshiftDefault || event.hasOwnProperty('nativeEvent') && event.nativeEvent.preventDownshiftDefault;
    });
  };
}
/**
 * This return a function that will call all the given functions with
 * the arguments with which it's called. It does a null-check before
 * attempting to call the functions and can take any number of functions.
 * @param {...Function} fns the functions to call
 * @return {Function} the function that calls all the functions
 */


function callAll() {
  for (var _len4 = arguments.length, fns = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
    fns[_key4] = arguments[_key4];
  }

  return function () {
    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
      args[_key5] = arguments[_key5];
    }

    fns.forEach(function (fn) {
      if (fn) {
        fn.apply(void 0, args);
      }
    });
  };
}
/**
 * This generates a unique ID for an instance of Downshift
 * @return {String} the unique ID
 */


function generateId$1() {
  return String(idCounter++);
}
/**
 * @param {Object} param the downshift state and other relevant properties
 * @return {String} the a11y status message
 */


function getA11yStatusMessage(_ref2) {
  var isOpen = _ref2.isOpen,
      highlightedItem = _ref2.highlightedItem,
      selectedItem = _ref2.selectedItem,
      resultCount = _ref2.resultCount,
      previousResultCount = _ref2.previousResultCount,
      itemToString = _ref2.itemToString;

  if (!isOpen) {
    if (selectedItem) {
      return itemToString(selectedItem);
    } else {
      return '';
    }
  }

  if (!resultCount) {
    return 'No results.';
  } else if (!highlightedItem || resultCount !== previousResultCount) {
    return resultCount + " " + (resultCount === 1 ? 'result is' : 'results are') + " available, use up and down arrow keys to navigate.";
  }

  return itemToString(highlightedItem);
}
/**
 * Takes an argument and if it's an array, returns the first item in the array
 * otherwise returns the argument
 * @param {*} arg the maybe-array
 * @param {*} defaultValue the value if arg is falsey not defined
 * @return {*} the arg or it's first item
 */


function unwrapArray(arg, defaultValue) {
  arg = Array.isArray(arg) ?
  /* istanbul ignore next (preact) */
  arg[0] : arg;

  if (!arg && defaultValue) {
    return defaultValue;
  } else {
    return arg;
  }
}
/**
 * @param {Object} element (P)react element
 * @return {Boolean} whether it's a DOM element
 */


function isDOMElement(element) {
  // then we assume this is react
  return typeof element.type === 'string';
}
/**
 * @param {Object} element (P)react element
 * @return {Object} the props
 */


function getElementProps(element) {
  return element.props;
}
/**
 * Throws a helpful error message for required properties. Useful
 * to be used as a default in destructuring or object params.
 * @param {String} fnName the function name
 * @param {String} propName the prop name
 */


function requiredProp(fnName, propName) {
  // eslint-disable-next-line no-console
  console.error("The property \"" + propName + "\" is required in \"" + fnName + "\"");
}

var stateKeys = ['highlightedIndex', 'inputValue', 'isOpen', 'selectedItem', 'type'];
/**
 * @param {Object} state the state object
 * @return {Object} state that is relevant to downshift
 */

function pickState(state) {
  if (state === void 0) {
    state = {};
  }

  var result = {};
  stateKeys.forEach(function (k) {
    if (state.hasOwnProperty(k)) {
      result[k] = state[k];
    }
  });
  return result;
}
/**
 * Normalizes the 'key' property of a KeyboardEvent in IE/Edge
 * @param {Object} event a keyboardEvent object
 * @return {String} keyboard key
 */


function normalizeArrowKey(event) {
  var key = event.key,
      keyCode = event.keyCode;
  /* istanbul ignore next (ie) */

  if (keyCode >= 37 && keyCode <= 40 && key.indexOf('Arrow') !== 0) {
    return "Arrow" + key;
  }

  return key;
}
/**
 * Simple check if the value passed is object literal
 * @param {*} obj any things
 * @return {Boolean} whether it's object literal
 */


function isPlainObject$1(obj) {
  return Object.prototype.toString.call(obj) === '[object Object]';
}

var Downshift =
/*#__PURE__*/
function (_Component) {
  _inheritsLoose(Downshift, _Component);

  function Downshift(_props) {
    var _this = _Component.call(this, _props) || this;

    _this.id = _this.props.id || "downshift-" + generateId$1();
    _this.menuId = _this.props.menuId || _this.id + "-menu";
    _this.labelId = _this.props.labelId || _this.id + "-label";
    _this.inputId = _this.props.inputId || _this.id + "-input";

    _this.getItemId = _this.props.getItemId || function (index) {
      return _this.id + "-item-" + index;
    };

    _this.input = null;
    _this.items = [];
    _this.itemCount = null;
    _this.previousResultCount = 0;
    _this.timeoutIds = [];

    _this.internalSetTimeout = function (fn, time) {
      var id = setTimeout(function () {
        _this.timeoutIds = _this.timeoutIds.filter(function (i) {
          return i !== id;
        });
        fn();
      }, time);

      _this.timeoutIds.push(id);
    };

    _this.setItemCount = function (count) {
      _this.itemCount = count;
    };

    _this.unsetItemCount = function () {
      _this.itemCount = null;
    };

    _this.setHighlightedIndex = function (highlightedIndex, otherStateToSet) {
      if (highlightedIndex === void 0) {
        highlightedIndex = _this.props.defaultHighlightedIndex;
      }

      if (otherStateToSet === void 0) {
        otherStateToSet = {};
      }

      otherStateToSet = pickState(otherStateToSet);

      _this.internalSetState(_extends$1({
        highlightedIndex: highlightedIndex
      }, otherStateToSet));
    };

    _this.clearSelection = function (cb) {
      _this.internalSetState({
        selectedItem: null,
        inputValue: '',
        highlightedIndex: _this.props.defaultHighlightedIndex,
        isOpen: _this.props.defaultIsOpen
      }, cb);
    };

    _this.selectItem = function (item, otherStateToSet, cb) {
      otherStateToSet = pickState(otherStateToSet);

      _this.internalSetState(_extends$1({
        isOpen: _this.props.defaultIsOpen,
        highlightedIndex: _this.props.defaultHighlightedIndex,
        selectedItem: item,
        inputValue: _this.props.itemToString(item)
      }, otherStateToSet), cb);
    };

    _this.selectItemAtIndex = function (itemIndex, otherStateToSet, cb) {
      var item = _this.items[itemIndex];

      if (item == null) {
        return;
      }

      _this.selectItem(item, otherStateToSet, cb);
    };

    _this.selectHighlightedItem = function (otherStateToSet, cb) {
      return _this.selectItemAtIndex(_this.getState().highlightedIndex, otherStateToSet, cb);
    };

    _this.internalSetState = function (stateToSet, cb) {
      var isItemSelected, onChangeArg;
      var onStateChangeArg = {};
      var isStateToSetFunction = typeof stateToSet === 'function'; // we want to call `onInputValueChange` before the `setState` call
      // so someone controlling the `inputValue` state gets notified of
      // the input change as soon as possible. This avoids issues with
      // preserving the cursor position.
      // See https://github.com/paypal/downshift/issues/217 for more info.

      if (!isStateToSetFunction && stateToSet.hasOwnProperty('inputValue')) {
        _this.props.onInputValueChange(stateToSet.inputValue, _extends$1({}, _this.getStateAndHelpers(), stateToSet));
      }

      return _this.setState(function (state) {
        state = _this.getState(state);
        var newStateToSet = isStateToSetFunction ? stateToSet(state) : stateToSet; // Your own function that could modify the state that will be set.

        newStateToSet = _this.props.stateReducer(state, newStateToSet); // checks if an item is selected, regardless of if it's different from
        // what was selected before
        // used to determine if onSelect and onChange callbacks should be called

        isItemSelected = newStateToSet.hasOwnProperty('selectedItem'); // this keeps track of the object we want to call with setState

        var nextState = {}; // this is just used to tell whether the state changed

        var nextFullState = {}; // we need to call on change if the outside world is controlling any of our state
        // and we're trying to update that state. OR if the selection has changed and we're
        // trying to update the selection

        if (isItemSelected && newStateToSet.selectedItem !== state.selectedItem) {
          onChangeArg = newStateToSet.selectedItem;
        }

        newStateToSet.type = newStateToSet.type || unknown;
        Object.keys(newStateToSet).forEach(function (key) {
          // onStateChangeArg should only have the state that is
          // actually changing
          if (state[key] !== newStateToSet[key]) {
            onStateChangeArg[key] = newStateToSet[key];
          } // the type is useful for the onStateChangeArg
          // but we don't actually want to set it in internal state.
          // this is an undocumented feature for now... Not all internalSetState
          // calls support it and I'm not certain we want them to yet.
          // But it enables users controlling the isOpen state to know when
          // the isOpen state changes due to mouseup events which is quite handy.


          if (key === 'type') {
            return;
          }

          nextFullState[key] = newStateToSet[key]; // if it's coming from props, then we don't care to set it internally

          if (!_this.isControlledProp(key)) {
            nextState[key] = newStateToSet[key];
          }
        }); // if stateToSet is a function, then we weren't able to call onInputValueChange
        // earlier, so we'll call it now that we know what the inputValue state will be.

        if (isStateToSetFunction && newStateToSet.hasOwnProperty('inputValue')) {
          _this.props.onInputValueChange(newStateToSet.inputValue, _extends$1({}, _this.getStateAndHelpers(), newStateToSet));
        }

        return nextState;
      }, function () {
        // call the provided callback if it's a function
        cbToCb(cb)(); // only call the onStateChange and onChange callbacks if
        // we have relevant information to pass them.

        var hasMoreStateThanType = Object.keys(onStateChangeArg).length > 1;

        if (hasMoreStateThanType) {
          _this.props.onStateChange(onStateChangeArg, _this.getStateAndHelpers());
        }

        if (isItemSelected) {
          _this.props.onSelect(stateToSet.selectedItem, _this.getStateAndHelpers());
        }

        if (onChangeArg !== undefined) {
          _this.props.onChange(onChangeArg, _this.getStateAndHelpers());
        } // this is currently undocumented and therefore subject to change
        // We'll try to not break it, but just be warned.


        _this.props.onUserAction(onStateChangeArg, _this.getStateAndHelpers());
      });
    };

    _this.rootRef = function (node) {
      return _this._rootNode = node;
    };

    _this.getRootProps = function (_temp, _temp2) {
      var _extends2;

      var _ref = _temp === void 0 ? {} : _temp,
          _ref$refKey = _ref.refKey,
          refKey = _ref$refKey === void 0 ? 'ref' : _ref$refKey,
          rest = _objectWithoutPropertiesLoose$1(_ref, ["refKey"]);

      var _ref2 = _temp2 === void 0 ? {} : _temp2,
          _ref2$suppressRefErro = _ref2.suppressRefError,
          suppressRefError = _ref2$suppressRefErro === void 0 ? false : _ref2$suppressRefErro;

      // this is used in the render to know whether the user has called getRootProps.
      // It uses that to know whether to apply the props automatically
      _this.getRootProps.called = true;
      _this.getRootProps.refKey = refKey;
      _this.getRootProps.suppressRefError = suppressRefError;

      var _this$getState = _this.getState(),
          isOpen = _this$getState.isOpen;

      return _extends$1((_extends2 = {}, _extends2[refKey] = _this.rootRef, _extends2.role = 'combobox', _extends2['aria-expanded'] = isOpen, _extends2['aria-haspopup'] = 'listbox', _extends2['aria-owns'] = isOpen ? _this.menuId : null, _extends2['aria-labelledby'] = _this.labelId, _extends2), rest);
    };

    _this.keyDownHandlers = {
      ArrowDown: function ArrowDown(event) {
        event.preventDefault();
        var amount = event.shiftKey ? 5 : 1;
        this.moveHighlightedIndex(amount, {
          type: keyDownArrowDown
        });
      },
      ArrowUp: function ArrowUp(event) {
        event.preventDefault();
        var amount = event.shiftKey ? -5 : -1;
        this.moveHighlightedIndex(amount, {
          type: keyDownArrowUp
        });
      },
      Enter: function Enter(event) {
        var _this$getState2 = this.getState(),
            isOpen = _this$getState2.isOpen,
            highlightedIndex = _this$getState2.highlightedIndex;

        if (isOpen && highlightedIndex != null) {
          event.preventDefault();
          var item = this.items[highlightedIndex];
          var itemNode = this.getItemNodeFromIndex(highlightedIndex);

          if (item == null || itemNode && itemNode.hasAttribute('disabled')) {
            return;
          }

          this.selectHighlightedItem({
            type: keyDownEnter
          });
        }
      },
      Escape: function Escape(event) {
        event.preventDefault();
        this.reset({
          type: keyDownEscape
        });
      }
    };
    _this.buttonKeyDownHandlers = _extends$1({}, _this.keyDownHandlers, {
      ' ': function _(event) {
        event.preventDefault();
        this.toggleMenu({
          type: keyDownSpaceButton
        });
      }
    });

    _this.getToggleButtonProps = function (_temp3) {
      var _ref3 = _temp3 === void 0 ? {} : _temp3,
          onClick = _ref3.onClick,
          onPress = _ref3.onPress,
          onKeyDown = _ref3.onKeyDown,
          onKeyUp = _ref3.onKeyUp,
          onBlur = _ref3.onBlur,
          rest = _objectWithoutPropertiesLoose$1(_ref3, ["onClick", "onPress", "onKeyDown", "onKeyUp", "onBlur"]);

      var _this$getState3 = _this.getState(),
          isOpen = _this$getState3.isOpen;

      var enabledEventHandlers = {
        onClick: callAllEventHandlers(onClick, _this.button_handleClick),
        onKeyDown: callAllEventHandlers(onKeyDown, _this.button_handleKeyDown),
        onKeyUp: callAllEventHandlers(onKeyUp, _this.button_handleKeyUp),
        onBlur: callAllEventHandlers(onBlur, _this.button_handleBlur)
      };
      var eventHandlers = rest.disabled ? {} : enabledEventHandlers;
      return _extends$1({
        type: 'button',
        role: 'button',
        'aria-label': isOpen ? 'close menu' : 'open menu',
        'aria-haspopup': true,
        'data-toggle': true
      }, eventHandlers, rest);
    };

    _this.button_handleKeyUp = function (event) {
      // Prevent click event from emitting in Firefox
      event.preventDefault();
    };

    _this.button_handleKeyDown = function (event) {
      var key = normalizeArrowKey(event);

      if (_this.buttonKeyDownHandlers[key]) {
        _this.buttonKeyDownHandlers[key].call(_assertThisInitialized$1(_assertThisInitialized$1(_this)), event);
      }
    };

    _this.button_handleClick = function (event) {
      event.preventDefault(); // handle odd case for Safari and Firefox which
      // don't give the button the focus properly.

      /* istanbul ignore if (can't reasonably test this) */

      if (_this.props.environment.document.activeElement === _this.props.environment.document.body) {
        event.target.focus();
      } // to simplify testing components that use downshift, we'll not wrap this in a setTimeout
      // if the NODE_ENV is test. With the proper build system, this should be dead code eliminated
      // when building for production and should therefore have no impact on production code.


      {
        // Ensure that toggle of menu occurs after the potential blur event in iOS
        _this.internalSetTimeout(function () {
          return _this.toggleMenu({
            type: clickButton
          });
        });
      }
    };

    _this.button_handleBlur = function (event) {
      var blurTarget = event.target; // Save blur target for comparison with activeElement later
      // Need setTimeout, so that when the user presses Tab, the activeElement is the next focused element, not body element

      _this.internalSetTimeout(function () {
        if (!_this.isMouseDown && (_this.props.environment.document.activeElement == null || _this.props.environment.document.activeElement.id !== _this.inputId) && _this.props.environment.document.activeElement !== blurTarget // Do nothing if we refocus the same element again (to solve issue in Safari on iOS)
        ) {
            _this.reset({
              type: blurButton
            });
          }
      });
    };

    _this.getLabelProps = function (props) {
      return _extends$1({
        htmlFor: _this.inputId,
        id: _this.labelId
      }, props);
    };

    _this.getInputProps = function (_temp4) {
      var _ref4 = _temp4 === void 0 ? {} : _temp4,
          onKeyDown = _ref4.onKeyDown,
          onBlur = _ref4.onBlur,
          onChange = _ref4.onChange,
          onInput = _ref4.onInput,
          onChangeText = _ref4.onChangeText,
          rest = _objectWithoutPropertiesLoose$1(_ref4, ["onKeyDown", "onBlur", "onChange", "onInput", "onChangeText"]);

      var onChangeKey;
      var eventHandlers = {};
      /* istanbul ignore next (preact) */

      onChangeKey = 'onChange';

      var _this$getState4 = _this.getState(),
          inputValue = _this$getState4.inputValue,
          isOpen = _this$getState4.isOpen,
          highlightedIndex = _this$getState4.highlightedIndex;

      if (!rest.disabled) {
        var _eventHandlers;

        eventHandlers = (_eventHandlers = {}, _eventHandlers[onChangeKey] = callAllEventHandlers(onChange, onInput, _this.input_handleChange), _eventHandlers.onKeyDown = callAllEventHandlers(onKeyDown, _this.input_handleKeyDown), _eventHandlers.onBlur = callAllEventHandlers(onBlur, _this.input_handleBlur), _eventHandlers);
      }
      /* istanbul ignore if (react-native) */


      return _extends$1({
        'aria-autocomplete': 'list',
        'aria-activedescendant': isOpen && typeof highlightedIndex === 'number' && highlightedIndex >= 0 ? _this.getItemId(highlightedIndex) : null,
        'aria-controls': isOpen ? _this.menuId : null,
        'aria-labelledby': _this.labelId,
        // https://developer.mozilla.org/en-US/docs/Web/Security/Securing_your_site/Turning_off_form_autocompletion
        // revert back since autocomplete="nope" is ignored on latest Chrome and Opera
        autoComplete: 'off',
        value: inputValue,
        id: _this.inputId
      }, eventHandlers, rest);
    };

    _this.input_handleKeyDown = function (event) {
      var key = normalizeArrowKey(event);

      if (key && _this.keyDownHandlers[key]) {
        _this.keyDownHandlers[key].call(_assertThisInitialized$1(_assertThisInitialized$1(_this)), event);
      }
    };

    _this.input_handleChange = function (event) {
      _this.internalSetState({
        type: changeInput,
        isOpen: true,
        inputValue: event.target.value
      });
    };

    _this.input_handleTextChange
    /* istanbul ignore next (react-native) */
    = function (text) {
      _this.internalSetState({
        type: changeInput,
        isOpen: true,
        inputValue: text
      });
    };

    _this.input_handleBlur = function () {
      // Need setTimeout, so that when the user presses Tab, the activeElement is the next focused element, not the body element
      _this.internalSetTimeout(function () {
        var downshiftButtonIsActive = _this.props.environment.document && _this.props.environment.document.activeElement.dataset.toggle && _this._rootNode && _this._rootNode.contains(_this.props.environment.document.activeElement);

        if (!_this.isMouseDown && !downshiftButtonIsActive) {
          _this.reset({
            type: blurInput
          });
        }
      });
    };

    _this.menuRef = function (node) {
      _this._menuNode = node;
    };

    _this.getMenuProps = function (_temp5, _temp6) {
      var _extends3;

      var _ref5 = _temp5 === void 0 ? {} : _temp5,
          _ref5$refKey = _ref5.refKey,
          refKey = _ref5$refKey === void 0 ? 'ref' : _ref5$refKey,
          ref = _ref5.ref,
          props = _objectWithoutPropertiesLoose$1(_ref5, ["refKey", "ref"]);

      var _ref6 = _temp6 === void 0 ? {} : _temp6,
          _ref6$suppressRefErro = _ref6.suppressRefError,
          suppressRefError = _ref6$suppressRefErro === void 0 ? false : _ref6$suppressRefErro;

      _this.getMenuProps.called = true;
      _this.getMenuProps.refKey = refKey;
      _this.getMenuProps.suppressRefError = suppressRefError;
      return _extends$1((_extends3 = {}, _extends3[refKey] = callAll(ref, _this.menuRef), _extends3.role = 'listbox', _extends3['aria-labelledby'] = props && props['aria-label'] ? null : _this.labelId, _extends3.id = _this.menuId, _extends3), props);
    };

    _this.getItemProps = function (_temp7) {
      var _enabledEventHandlers;

      var _ref7 = _temp7 === void 0 ? {} : _temp7,
          onMouseMove = _ref7.onMouseMove,
          onMouseDown = _ref7.onMouseDown,
          onClick = _ref7.onClick,
          onPress = _ref7.onPress,
          index = _ref7.index,
          _ref7$item = _ref7.item,
          item = _ref7$item === void 0 ? requiredProp('getItemProps', 'item') : _ref7$item,
          rest = _objectWithoutPropertiesLoose$1(_ref7, ["onMouseMove", "onMouseDown", "onClick", "onPress", "index", "item"]);

      if (index === undefined) {
        _this.items.push(item);

        index = _this.items.indexOf(item);
      } else {
        _this.items[index] = item;
      }

      var onSelectKey = 'onClick';
      var customClickHandler = onClick;
      var enabledEventHandlers = (_enabledEventHandlers = {
        // onMouseMove is used over onMouseEnter here. onMouseMove
        // is only triggered on actual mouse movement while onMouseEnter
        // can fire on DOM changes, interrupting keyboard navigation
        onMouseMove: callAllEventHandlers(onMouseMove, function () {
          if (index === _this.getState().highlightedIndex) {
            return;
          }

          _this.setHighlightedIndex(index, {
            type: itemMouseEnter
          }); // We never want to manually scroll when changing state based
          // on `onMouseMove` because we will be moving the element out
          // from under the user which is currently scrolling/moving the
          // cursor


          _this.avoidScrolling = true;

          _this.internalSetTimeout(function () {
            return _this.avoidScrolling = false;
          }, 250);
        }),
        onMouseDown: callAllEventHandlers(onMouseDown, function (event) {
          // This prevents the activeElement from being changed
          // to the item so it can remain with the current activeElement
          // which is a more common use case.
          event.preventDefault();
        })
      }, _enabledEventHandlers[onSelectKey] = callAllEventHandlers(customClickHandler, function () {
        _this.selectItemAtIndex(index, {
          type: clickItem
        });
      }), _enabledEventHandlers); // Passing down the onMouseDown handler to prevent redirect
      // of the activeElement if clicking on disabled items

      var eventHandlers = rest.disabled ? {
        onMouseDown: enabledEventHandlers.onMouseDown
      } : enabledEventHandlers;
      return _extends$1({
        id: _this.getItemId(index),
        role: 'option',
        'aria-selected': _this.getState().selectedItem === item
      }, eventHandlers, rest);
    };

    _this.clearItems = function () {
      _this.items = [];
    };

    _this.reset = function (otherStateToSet, cb) {
      if (otherStateToSet === void 0) {
        otherStateToSet = {};
      }

      otherStateToSet = pickState(otherStateToSet);

      _this.internalSetState(function (_ref8) {
        var selectedItem = _ref8.selectedItem;
        return _extends$1({
          isOpen: _this.props.defaultIsOpen,
          highlightedIndex: _this.props.defaultHighlightedIndex,
          inputValue: _this.props.itemToString(selectedItem)
        }, otherStateToSet);
      }, cb);
    };

    _this.toggleMenu = function (otherStateToSet, cb) {
      if (otherStateToSet === void 0) {
        otherStateToSet = {};
      }

      otherStateToSet = pickState(otherStateToSet);

      _this.internalSetState(function (_ref9) {
        var isOpen = _ref9.isOpen;
        return _extends$1({
          isOpen: !isOpen
        }, otherStateToSet);
      }, function () {
        var _this$getState5 = _this.getState(),
            isOpen = _this$getState5.isOpen;

        if (isOpen) {
          // highlight default index
          _this.setHighlightedIndex(undefined, otherStateToSet);
        }

        cbToCb(cb)();
      });
    };

    _this.openMenu = function (cb) {
      _this.internalSetState({
        isOpen: true
      }, cb);
    };

    _this.closeMenu = function (cb) {
      _this.internalSetState({
        isOpen: false
      }, cb);
    };

    _this.updateStatus = debounce$1(function () {
      var state = _this.getState();

      var item = _this.items[state.highlightedIndex];

      var resultCount = _this.getItemCount();

      var status = _this.props.getA11yStatusMessage(_extends$1({
        itemToString: _this.props.itemToString,
        previousResultCount: _this.previousResultCount,
        resultCount: resultCount,
        highlightedItem: item
      }, state));

      _this.previousResultCount = resultCount;
      setStatus(status);
    }, 200);

    // fancy destructuring + defaults + aliases
    // this basically says each value of state should either be set to
    // the initial value or the default value if the initial value is not provided
    var _this$props = _this.props,
        defaultHighlightedIndex = _this$props.defaultHighlightedIndex,
        _this$props$initialHi = _this$props.initialHighlightedIndex,
        _highlightedIndex = _this$props$initialHi === void 0 ? defaultHighlightedIndex : _this$props$initialHi,
        defaultIsOpen = _this$props.defaultIsOpen,
        _this$props$initialIs = _this$props.initialIsOpen,
        _isOpen = _this$props$initialIs === void 0 ? defaultIsOpen : _this$props$initialIs,
        _this$props$initialIn = _this$props.initialInputValue,
        _inputValue = _this$props$initialIn === void 0 ? '' : _this$props$initialIn,
        _this$props$initialSe = _this$props.initialSelectedItem,
        _selectedItem = _this$props$initialSe === void 0 ? null : _this$props$initialSe;

    var _state = _this.getState({
      highlightedIndex: _highlightedIndex,
      isOpen: _isOpen,
      inputValue: _inputValue,
      selectedItem: _selectedItem
    });

    if (_state.selectedItem != null && _this.props.initialInputValue === undefined) {
      _state.inputValue = _this.props.itemToString(_state.selectedItem);
    }

    _this.state = _state;
    return _this;
  }

  var _proto = Downshift.prototype;

  /**
   * Clear all running timeouts
   */
  _proto.internalClearTimeouts = function internalClearTimeouts() {
    this.timeoutIds.forEach(function (id) {
      clearTimeout(id);
    });
    this.timeoutIds = [];
  };
  /**
   * Gets the state based on internal state or props
   * If a state value is passed via props, then that
   * is the value given, otherwise it's retrieved from
   * stateToMerge
   *
   * This will perform a shallow merge of the given state object
   * with the state coming from props
   * (for the controlled component scenario)
   * This is used in state updater functions so they're referencing
   * the right state regardless of where it comes from.
   *
   * @param {Object} stateToMerge defaults to this.state
   * @return {Object} the state
   */


  _proto.getState = function getState(stateToMerge) {
    var _this2 = this;

    if (stateToMerge === void 0) {
      stateToMerge = this.state;
    }

    return Object.keys(stateToMerge).reduce(function (state, key) {
      state[key] = _this2.isControlledProp(key) ? _this2.props[key] : stateToMerge[key];
      return state;
    }, {});
  };
  /**
   * This determines whether a prop is a "controlled prop" meaning it is
   * state which is controlled by the outside of this component rather
   * than within this component.
   * @param {String} key the key to check
   * @return {Boolean} whether it is a controlled controlled prop
   */


  _proto.isControlledProp = function isControlledProp(key) {
    return this.props[key] !== undefined;
  };

  _proto.getItemCount = function getItemCount() {
    // things read better this way. They're in priority order:
    // 1. `this.itemCount`
    // 2. `this.props.itemCount`
    // 3. `this.items.length`
    var itemCount = this.items.length;

    if (this.itemCount != null) {
      itemCount = this.itemCount;
    } else if (this.props.itemCount !== undefined) {
      itemCount = this.props.itemCount;
    }

    return itemCount;
  };

  _proto.getItemNodeFromIndex = function getItemNodeFromIndex(index) {
    return this.props.environment.document.getElementById(this.getItemId(index));
  };

  _proto.scrollHighlightedItemIntoView = function scrollHighlightedItemIntoView() {
    /* istanbul ignore else (react-native) */
    {
      var node = this.getItemNodeFromIndex(this.getState().highlightedIndex);
      this.props.scrollIntoView(node, this._rootNode);
    }
  };

  _proto.moveHighlightedIndex = function moveHighlightedIndex(amount, otherStateToSet) {
    var _this3 = this;

    if (this.getState().isOpen) {
      this.changeHighlightedIndex(amount, otherStateToSet);
    } else {
      this.openMenu(function () {
        var type = otherStateToSet.type;

        var itemCount = _this3.getItemCount();

        var newHighlightedIndex; // if there are items in the menu and event type is present.

        if (itemCount && type) {
          // on Arrow Down we highlight first option.
          if (type === keyDownArrowDown) {
            newHighlightedIndex = 0;
          } // on Arrow Up we highlight last option


          if (type === keyDownArrowUp) {
            newHighlightedIndex = itemCount - 1;
          }
        }

        _this3.setHighlightedIndex(newHighlightedIndex, _extends$1({}, otherStateToSet));
      });
    }
  };

  _proto.changeHighlightedIndex = function changeHighlightedIndex(moveAmount, otherStateToSet) {
    var itemsLastIndex = this.getItemCount() - 1;

    if (itemsLastIndex < 0) {
      return;
    }

    var _this$getState6 = this.getState(),
        highlightedIndex = _this$getState6.highlightedIndex;

    var baseIndex = highlightedIndex;

    if (baseIndex === null) {
      baseIndex = moveAmount > 0 ? -1 : itemsLastIndex + 1;
    }

    var newIndex = baseIndex + moveAmount;

    if (newIndex < 0) {
      newIndex = itemsLastIndex;
    } else if (newIndex > itemsLastIndex) {
      newIndex = 0;
    }

    this.setHighlightedIndex(newIndex, otherStateToSet);
  };

  _proto.getStateAndHelpers = function getStateAndHelpers() {
    var _this$getState7 = this.getState(),
        highlightedIndex = _this$getState7.highlightedIndex,
        inputValue = _this$getState7.inputValue,
        selectedItem = _this$getState7.selectedItem,
        isOpen = _this$getState7.isOpen;

    var itemToString = this.props.itemToString;
    var id = this.id;
    var getRootProps = this.getRootProps,
        getToggleButtonProps = this.getToggleButtonProps,
        getLabelProps = this.getLabelProps,
        getMenuProps = this.getMenuProps,
        getInputProps = this.getInputProps,
        getItemProps = this.getItemProps,
        openMenu = this.openMenu,
        closeMenu = this.closeMenu,
        toggleMenu = this.toggleMenu,
        selectItem = this.selectItem,
        selectItemAtIndex = this.selectItemAtIndex,
        selectHighlightedItem = this.selectHighlightedItem,
        setHighlightedIndex = this.setHighlightedIndex,
        clearSelection = this.clearSelection,
        clearItems = this.clearItems,
        reset = this.reset,
        setItemCount = this.setItemCount,
        unsetItemCount = this.unsetItemCount,
        setState = this.internalSetState;
    return {
      // prop getters
      getRootProps: getRootProps,
      getToggleButtonProps: getToggleButtonProps,
      getLabelProps: getLabelProps,
      getMenuProps: getMenuProps,
      getInputProps: getInputProps,
      getItemProps: getItemProps,
      // actions
      reset: reset,
      openMenu: openMenu,
      closeMenu: closeMenu,
      toggleMenu: toggleMenu,
      selectItem: selectItem,
      selectItemAtIndex: selectItemAtIndex,
      selectHighlightedItem: selectHighlightedItem,
      setHighlightedIndex: setHighlightedIndex,
      clearSelection: clearSelection,
      clearItems: clearItems,
      setItemCount: setItemCount,
      unsetItemCount: unsetItemCount,
      setState: setState,
      // props
      itemToString: itemToString,
      // derived
      id: id,
      // state
      highlightedIndex: highlightedIndex,
      inputValue: inputValue,
      isOpen: isOpen,
      selectedItem: selectedItem
    };
  }; //////////////////////////// ROOT


  _proto.componentDidMount = function componentDidMount() {
    var _this4 = this;

    /* istanbul ignore if (react-native) */
    if (this.getMenuProps.called && !this.getMenuProps.suppressRefError) {
      validateGetMenuPropsCalledCorrectly(this._menuNode, this.getMenuProps);
    }
    /* istanbul ignore if (react-native) */


    {
      var targetWithinDownshift = function (target, checkActiveElement) {
        if (checkActiveElement === void 0) {
          checkActiveElement = true;
        }

        var document = _this4.props.environment.document;
        return [_this4._rootNode, _this4._menuNode].some(function (contextNode) {
          return contextNode && (isOrContainsNode(contextNode, target) || checkActiveElement && isOrContainsNode(contextNode, document.activeElement));
        });
      }; // this.isMouseDown helps us track whether the mouse is currently held down.
      // This is useful when the user clicks on an item in the list, but holds the mouse
      // down long enough for the list to disappear (because the blur event fires on the input)
      // this.isMouseDown is used in the blur handler on the input to determine whether the blur event should
      // trigger hiding the menu.


      var onMouseDown = function () {
        _this4.isMouseDown = true;
      };

      var onMouseUp = function (event) {
        _this4.isMouseDown = false; // if the target element or the activeElement is within a downshift node
        // then we don't want to reset downshift

        var contextWithinDownshift = targetWithinDownshift(event.target);

        if (!contextWithinDownshift && _this4.getState().isOpen) {
          _this4.reset({
            type: mouseUp
          }, function () {
            return _this4.props.onOuterClick(_this4.getStateAndHelpers());
          });
        }
      }; // Touching an element in iOS gives focus and hover states, but touching out of
      // the element will remove hover, and persist the focus state, resulting in the
      // blur event not being triggered.


      var onTouchStart = function (event) {
        var contextWithinDownshift = targetWithinDownshift(event.target, false);

        if (!contextWithinDownshift && _this4.getState().isOpen) {
          _this4.reset({
            type: touchStart
          }, function () {
            return _this4.props.onOuterClick(_this4.getStateAndHelpers());
          });
        }
      };

      this.props.environment.addEventListener('mousedown', onMouseDown);
      this.props.environment.addEventListener('mouseup', onMouseUp);
      this.props.environment.addEventListener('touchstart', onTouchStart);

      this.cleanup = function () {
        _this4.internalClearTimeouts();

        _this4.updateStatus.cancel();

        _this4.props.environment.removeEventListener('mousedown', onMouseDown);

        _this4.props.environment.removeEventListener('mouseup', onMouseUp);

        _this4.props.environment.removeEventListener('touchstart', onTouchStart);
      };
    }
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
    {
      validateControlledUnchanged(prevProps, this.props);
      /* istanbul ignore if (react-native) */

      if (this.getMenuProps.called && !this.getMenuProps.suppressRefError) {
        validateGetMenuPropsCalledCorrectly(this._menuNode, this.getMenuProps);
      }
    }

    if (this.isControlledProp('selectedItem') && this.props.selectedItemChanged(prevProps.selectedItem, this.props.selectedItem)) {
      this.internalSetState({
        type: controlledPropUpdatedSelectedItem,
        inputValue: this.props.itemToString(this.props.selectedItem)
      });
    }

    var current = this.props.highlightedIndex === undefined ? this.state : this.props;
    var prev = prevProps.highlightedIndex === undefined ? prevState : prevProps;

    if (current.highlightedIndex !== prev.highlightedIndex && !this.avoidScrolling) {
      this.scrollHighlightedItemIntoView();
    }
    /* istanbul ignore else (react-native) */


    this.updateStatus();
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.cleanup(); // avoids memory leak
  };

  _proto.render = function render() {
    var children = unwrapArray(this.props.children, noop$1); // because the items are rerendered every time we call the children
    // we clear this out each render and it will be populated again as
    // getItemProps is called.

    this.clearItems(); // we reset this so we know whether the user calls getRootProps during
    // this render. If they do then we don't need to do anything,
    // if they don't then we need to clone the element they return and
    // apply the props for them.

    this.getRootProps.called = false;
    this.getRootProps.refKey = undefined;
    this.getRootProps.suppressRefError = undefined; // we do something similar for getMenuProps

    this.getMenuProps.called = false;
    this.getMenuProps.refKey = undefined;
    this.getMenuProps.suppressRefError = undefined; // we do something similar for getLabelProps

    this.getLabelProps.called = false; // and something similar for getInputProps

    this.getInputProps.called = false;
    var element = unwrapArray(children(this.getStateAndHelpers()));

    if (!element) {
      return null;
    }

    if (this.getRootProps.called || this.props.suppressRefError) {
      if (!this.getRootProps.suppressRefError && !this.props.suppressRefError) {
        validateGetRootPropsCalledCorrectly(element, this.getRootProps);
      }

      return element;
    } else if (isDOMElement(element)) {
      // they didn't apply the root props, but we can clone
      // this and apply the props ourselves
      return React__default.cloneElement(element, this.getRootProps(getElementProps(element)));
    }
    /* istanbul ignore else */


    {
      // they didn't apply the root props, but they need to
      // otherwise we can't query around the autocomplete
      throw new Error('downshift: If you return a non-DOM element, you must use apply the getRootProps function');
    }
    /* istanbul ignore next */


    return undefined;
  };

  return Downshift;
}(React.Component);

Downshift.defaultProps = {
  defaultHighlightedIndex: null,
  defaultIsOpen: false,
  getA11yStatusMessage: getA11yStatusMessage,
  itemToString: function itemToString(i) {
    if (i == null) {
      return '';
    }

    if (isPlainObject$1(i) && !i.hasOwnProperty('toString')) {
      // eslint-disable-next-line no-console
      console.warn('downshift: An object was passed to the default implementation of `itemToString`. You should probably provide your own `itemToString` implementation. Please refer to the `itemToString` API documentation.', 'The object that was passed:', i);
    }

    return String(i);
  },
  onStateChange: noop$1,
  onInputValueChange: noop$1,
  onUserAction: noop$1,
  onChange: noop$1,
  onSelect: noop$1,
  onOuterClick: noop$1,
  selectedItemChanged: function selectedItemChanged(prevItem, item) {
    return prevItem !== item;
  },
  environment: typeof window === 'undefined'
  /* istanbul ignore next (ssr) */
  ? {} : window,
  stateReducer: function stateReducer(state, stateToSet) {
    return stateToSet;
  },
  suppressRefError: false,
  scrollIntoView: scrollIntoView
};
Downshift.stateChangeTypes = stateChangeTypes;
Downshift.propTypes = {
  children: propTypes.func,
  defaultHighlightedIndex: propTypes.number,
  defaultIsOpen: propTypes.bool,
  initialHighlightedIndex: propTypes.number,
  initialSelectedItem: propTypes.any,
  initialInputValue: propTypes.string,
  initialIsOpen: propTypes.bool,
  getA11yStatusMessage: propTypes.func,
  itemToString: propTypes.func,
  onChange: propTypes.func,
  onSelect: propTypes.func,
  onStateChange: propTypes.func,
  onInputValueChange: propTypes.func,
  onUserAction: propTypes.func,
  onOuterClick: propTypes.func,
  selectedItemChanged: propTypes.func,
  stateReducer: propTypes.func,
  itemCount: propTypes.number,
  id: propTypes.string,
  environment: propTypes.shape({
    addEventListener: propTypes.func,
    removeEventListener: propTypes.func,
    document: propTypes.shape({
      getElementById: propTypes.func,
      activeElement: propTypes.any,
      body: propTypes.any
    })
  }),
  suppressRefError: propTypes.bool,
  scrollIntoView: propTypes.func,
  // things we keep in state for uncontrolled components
  // but can accept as props for controlled components

  /* eslint-disable react/no-unused-prop-types */
  selectedItem: propTypes.any,
  isOpen: propTypes.bool,
  inputValue: propTypes.string,
  highlightedIndex: propTypes.number,
  labelId: propTypes.string,
  inputId: propTypes.string,
  menuId: propTypes.string,
  getItemId: propTypes.func
  /* eslint-enable react/no-unused-prop-types */

};

function validateGetMenuPropsCalledCorrectly(node, _ref10) {
  var refKey = _ref10.refKey;

  if (!node) {
    // eslint-disable-next-line no-console
    console.error("downshift: The ref prop \"" + refKey + "\" from getMenuProps was not applied correctly on your menu element.");
  }
}

function validateGetRootPropsCalledCorrectly(element, _ref11) {
  var refKey = _ref11.refKey;
  var refKeySpecified = refKey !== 'ref';
  var isComposite = !isDOMElement(element);

  if (isComposite && !refKeySpecified && !reactIs.isForwardRef(element)) {
    // eslint-disable-next-line no-console
    console.error('downshift: You returned a non-DOM element. You must specify a refKey in getRootProps');
  } else if (!isComposite && refKeySpecified) {
    // eslint-disable-next-line no-console
    console.error("downshift: You returned a DOM element. You should not specify a refKey in getRootProps. You specified \"" + refKey + "\"");
  }

  if (!reactIs.isForwardRef(element) && !getElementProps(element)[refKey]) {
    // eslint-disable-next-line no-console
    console.error("downshift: You must apply the ref prop \"" + refKey + "\" from getRootProps onto your root element.");
  }
}

function validateControlledUnchanged(prevProps, nextProps) {
  var warningDescription = "This prop should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled Downshift element for the lifetime of the component. More info: https://github.com/paypal/downshift#control-props";
  ['selectedItem', 'isOpen', 'inputValue', 'highlightedIndex'].forEach(function (propKey) {
    if (prevProps[propKey] !== undefined && nextProps[propKey] === undefined) {
      // eslint-disable-next-line no-console
      console.error("downshift: A component has changed the controlled prop \"" + propKey + "\" to be uncontrolled. " + warningDescription);
    } else if (prevProps[propKey] === undefined && nextProps[propKey] !== undefined) {
      // eslint-disable-next-line no-console
      console.error("downshift: A component has changed the uncontrolled prop \"" + propKey + "\" to be controlled. " + warningDescription);
    }
  });
}

var popperMatchWidthModifier = {
  fn: function fn(data) {
    data.styles.width = data.offsets.popper.width = Math.round(data.offsets.reference.width);
    return data;
  },
  enabled: true,
  order: 840
};

var defaultRenderOption = function defaultRenderOption(option) {
  if (!option) {
    return '';
  }

  if (lodash_isstring(option)) {
    return option;
  }

  if (lodash_isplainobject(option)) {
    return option.label || option.name || option.id || JSON.stringify(option);
  }

  return JSON.stringify(option);
};

var Select =
/*#__PURE__*/
function (_React$PureComponent) {
  inherits(Select, _React$PureComponent);

  function Select() {
    var _getPrototypeOf2;

    var _this;

    classCallCheck(this, Select);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Select)).call.apply(_getPrototypeOf2, [this].concat(args)));

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "componentDidUpdate", function (prevProps) {
      // Force popper to update if the options were filtered, since it can change its positioning.
      if (prevProps.options !== _this.props.options && _this.scheduleUpdate) {
        _this.scheduleUpdate();
      }
    });

    return _this;
  }

  createClass(Select, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          required = _this$props.required,
          placeholder = _this$props.placeholder,
          noneText = _this$props.noneText,
          allowNone = _this$props.allowNone,
          isLoading = _this$props.isLoading,
          loading = _this$props.loading,
          invalid = _this$props.invalid,
          value = _this$props.value,
          renderOption = _this$props.renderOption,
          optionToString = _this$props.optionToString,
          options = _this$props.options,
          getOptionValue = _this$props.getOptionValue,
          searchable = _this$props.searchable,
          disabled = _this$props.disabled,
          onChange = _this$props.onChange,
          Searchable$$1 = _this$props.Searchable,
          CurrentValue = _this$props.CurrentValue,
          Options$$1 = _this$props.Options,
          id = _this$props.id,
          className = _this$props.className,
          popperProps = _this$props.popperProps,
          name = _this$props.name,
          rest = objectWithoutProperties(_this$props, ["required", "placeholder", "noneText", "allowNone", "isLoading", "loading", "invalid", "value", "renderOption", "optionToString", "options", "getOptionValue", "searchable", "disabled", "onChange", "Searchable", "CurrentValue", "Options", "id", "className", "popperProps", "name"]);

      var combinedLoading = loading || isLoading;
      var combinedPlaceholder = noneText !== undefined ? noneText : placeholder;
      return React__default.createElement(Downshift, _extends_1({
        onChange: onChange,
        itemCount: options.length,
        itemToString: renderOption,
        selectedItem: value
      }, rest), function (_ref) {
        var inputValue = _ref.inputValue,
            downshiftProps = objectWithoutProperties(_ref, ["inputValue"]);

        return React__default.createElement("div", null, React__default.createElement(reactPopper.Manager, null, React__default.createElement(reactPopper.Reference, null, function (_ref2) {
          var ref = _ref2.ref;
          return React__default.createElement(CurrentValue, _extends_1({}, downshiftProps, {
            inputValue: downshiftProps.isOpen ? inputValue : inputValue || downshiftProps.itemToString(downshiftProps.selectedItem),
            ref: ref,
            placeholder: combinedPlaceholder,
            disabled: disabled,
            loading: combinedLoading,
            invalid: invalid,
            required: required,
            id: id,
            className: className,
            name: name
          }));
        }), downshiftProps.isOpen && React__default.createElement(reactPopper.Popper, _extends_1({
          placement: "bottom",
          boundariesPadding: 0,
          modifiers: {
            matchWidth: popperMatchWidthModifier,
            flip: {
              behavior: 'flip',
              padding: 20
            },
            preventOverflow: {
              escapeWithReference: true,
              padding: 0
            }
          }
        }, popperProps), function (popperStuff) {
          _this2.scheduleUpdate = popperStuff.scheduleUpdate;
          return React__default.createElement(Foreground, null, React__default.createElement(Options$$1, _extends_1({}, popperStuff, downshiftProps, {
            renderOption: renderOption,
            options: options
          })));
        })));
      });
    }
  }]);

  return Select;
}(React__default.PureComponent);

defineProperty(Select, "propTypes", {
  /**
   * The name to apply to the input field
   */
  name: propTypes.string,

  /**
   * Text or node to show if none is selected
   */
  placeholder: propTypes.oneOfType([propTypes.string, propTypes.node]),

  /**
   * Adds a class name to the element.
   */
  className: propTypes.string,

  /**
   * Adds an id to the element.
   */
  id: propTypes.string,

  /**
   * Indicates whether the user can interact with this field.
   */
  disabled: propTypes.bool,

  /**
   * Indicates whether this field is required for form submission. Non-required fields allow none.
   */
  required: propTypes.bool,

  /**
   * Styles this field as being invalid
   */
  invalid: propTypes.bool,

  /**
   * A list of selection options. Can be complex objects.
   */
  options: propTypes.array.isRequired,

  /**
   * A function which takes an option and renders text for the select. Has
   * a sane default.
   */
  renderOption: propTypes.func,

  /**
   * The currently selected value.
   */
  value: propTypes.any,

  /**
   * Handler for change events on the select. It will be called with the exact
   * option you passed in via options
   */
  onChange: propTypes.func,

  /**
   * Alias for isLoading
   */
  loading: propTypes.bool,

  /**
   * Any additional props you want to pass to the underlying Popper instance
   */
  popperProps: propTypes.object,

  /**
   * Renders the visible input and controls which show
   * the currently selected value and allow interaction.
   * Use to override behavior. Reference the library's default implementation
   * code for details about how to implement your custom version.
   */
  CurrentValue: propTypes.oneOfType([propTypes.object, propTypes.func]),

  /**
   * Renders the options list. Reference the library's default implementation
   * code for details about how to implement your own custom version
   */
  Options: propTypes.oneOfType([propTypes.object, propTypes.func])
});

defineProperty(Select, "defaultProps", {
  className: null,
  id: null,
  disabled: false,
  required: false,
  allowNone: false,
  invalid: false,
  placeholder: 'Select one',
  renderOption: defaultRenderOption,
  defaultHighlightedIndex: 0,
  CurrentValue: Unsearchable,
  Options: Options
});

defineProperty(Select, "styles", styles$u);

var defaultFilterOptions = function defaultFilterOptions(options, inputValue, props) {
  return options.filter(function (option) {
    return (props.renderOption(option) || '').toLowerCase().includes((inputValue || '').toLowerCase());
  });
};

var SearchableSelect =
/*#__PURE__*/
function (_React$Component) {
  inherits(SearchableSelect, _React$Component);

  function SearchableSelect() {
    var _getPrototypeOf2;

    var _this;

    classCallCheck(this, SearchableSelect);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(SearchableSelect)).call.apply(_getPrototypeOf2, [this].concat(args)));

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "state", {
      filteredOptions: _this.props.options,
      inputValue: ''
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleSelectStateChange", function (changes, downshiftState) {
      var _this$props = _this.props,
          filterOptions = _this$props.filterOptions,
          options = _this$props.options,
          onStateChange = _this$props.onStateChange;

      if (changes.hasOwnProperty('isOpen') && changes.isOpen) {
        _this.setState({
          inputValue: changes.selectedItem || '',
          filteredOptions: options
        });
      }

      if (changes.hasOwnProperty('inputValue')) {
        _this.setState({
          inputValue: changes.inputValue,
          filteredOptions: filterOptions(options, changes.inputValue, _this.props)
        });
      }

      onStateChange && onStateChange(changes, downshiftState);
    });

    return _this;
  }

  createClass(SearchableSelect, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          options = _this$props2.options,
          onStateChange = _this$props2.onStateChange,
          CurrentValue = _this$props2.CurrentValue,
          rest = objectWithoutProperties(_this$props2, ["options", "onStateChange", "CurrentValue"]);

      return React__default.createElement(Select, _extends_1({}, rest, {
        CurrentValue: CurrentValue,
        onStateChange: this.handleSelectStateChange,
        options: this.state.filteredOptions,
        inputValue: this.state.inputValue
      }));
    }
  }]);

  return SearchableSelect;
}(React__default.Component);

defineProperty(SearchableSelect, "propTypes", objectSpread({}, Select.propTypes, {
  /**
   * A filtering function which takes the options list, the
   * current input value, and all props.
   * Should return a reduced list of options.
   */
  filterOptions: propTypes.func
}));

defineProperty(SearchableSelect, "defaultProps", objectSpread({}, Select.defaultProps, {
  filterOptions: defaultFilterOptions,
  CurrentValue: Searchable
}));

defineProperty(SearchableSelect, "styles", objectSpread({}, styles$u, {
  CurrentValue: Searchable
}));

Select.Searchable = SearchableSelect;

var StepContainer = styled__default.div.withConfig({
  displayName: "Container",
  componentId: "njxtl9-0"
})(["display:flex;flex-direction:row;margin:", " 0;"], themeGet('spacing.extraSmall'));

var Content$4 = styled__default.div.withConfig({
  displayName: "Content",
  componentId: "lcsanm-0"
})(["", " > &{flex:1 0 0;margin-top:auto;margin-bottom:auto;margin-left:", ";}"], StepContainer, themeGet('spacing.small'));

var List = styled__default.div.withConfig({
  displayName: "List",
  componentId: "sc-1mbi89n-0"
})(["display:flex;flex-direction:column;"]);

var CIRCLE_SIZE = 32;
var _Number = styled__default.div.withConfig({
  displayName: "Number",
  componentId: "k4p1xj-0"
})(["width:", "px;height:", "px;&:before{display:inline-block;font-size:", "px;content:\"", "\";font-family:", ";width:", "px;height:", "px;line-height:", "px;background-color:", ";border-radius:2em;border-width:", ";border-style:solid;border-color:", ";text-align:center;color:", ";}", " > &{flex:0 0 auto;}"], CIRCLE_SIZE, CIRCLE_SIZE, function (props) {
  return props.complete ? CIRCLE_SIZE * 2 / 3 : CIRCLE_SIZE * 2 / 5;
}, function (props) {
  return props.complete ? icons('checkmark') : props.number;
}, function (props) {
  return props.complete ? 'var(--fonts-icon)' : 'var(--fonts-default)';
}, CIRCLE_SIZE, CIRCLE_SIZE, CIRCLE_SIZE, function (props) {
  return props.complete ? 'var(--colors-positive-default)' : 'var(--colors-background-default)';
}, themeGet('thicknesses.normal'), function (props) {
  return props.complete ? 'var(--colors-positive-default)' : 'var(--colors-border-light)';
}, function (props) {
  return props.complete ? 'var(--colors-text-inverted)' : 'var(--colors-text-default)';
}, StepContainer);



var styles$v = /*#__PURE__*/Object.freeze({
  Container: StepContainer,
  Content: Content$4,
  List: List,
  Number: _Number
});

/**
 * `Step.Group` automatically assigns numbers to its Step children.
 *
 * @visibleName Step.Group
 */

var StepGroup =
/*#__PURE__*/
function (_React$Component) {
  inherits(StepGroup, _React$Component);

  function StepGroup() {
    var _getPrototypeOf2;

    var _this;

    classCallCheck(this, StepGroup);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(StepGroup)).call.apply(_getPrototypeOf2, [this].concat(args)));

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "renderSteps", function () {
      return React__default.Children.map(_this.props.children, function (step, index) {
        return React__default.cloneElement(step, {
          number: index + 1
        });
      });
    });

    return _this;
  }

  createClass(StepGroup, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          List$$1 = _this$props.List,
          rest = objectWithoutProperties(_this$props, ["List"]);

      return React__default.createElement(List$$1, rest, this.renderSteps());
    }
  }]);

  return StepGroup;
}(React__default.Component);

defineProperty(StepGroup, "propTypes", {
  /**
   * Children must be an array of Step components
   */
  children: propTypes.node.isRequired,

  /**
   * Override the component that renders the list container
   */
  List: propTypes.oneOfType([propTypes.func, propTypes.object])
});

defineProperty(StepGroup, "defaultProps", {
  List: List
});

defineProperty(StepGroup, "styles", styles$v);

/**
 * Step represents a step of a process. Simply create `<Step>` components inside a container `<Step.Group>` and numbers will
 * automatically be assigned. Assign `complete` state yourself as items are done.
 */

var Step =
/*#__PURE__*/
function (_React$Component) {
  inherits(Step, _React$Component);

  function Step() {
    classCallCheck(this, Step);

    return possibleConstructorReturn(this, getPrototypeOf(Step).apply(this, arguments));
  }

  createClass(Step, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          number = _this$props.number,
          complete = _this$props.complete,
          Content = _this$props.Content,
          Container = _this$props.Container,
          Number = _this$props.Number,
          rest = objectWithoutProperties(_this$props, ["children", "number", "complete", "Content", "Container", "Number"]);

      return React__default.createElement(Container, rest, React__default.createElement(Number, {
        complete: complete,
        number: number
      }), React__default.createElement(Content, null, children));
    }
  }]);

  return Step;
}(React__default.Component);

defineProperty(Step, "Group", StepGroup);

defineProperty(Step, "propTypes", {
  /**
   * Content of the step
   */
  children: propTypes.node.isRequired,

  /**
   * Step number
   */
  number: propTypes.number,

  /**
   * Whether the step has been completed
   */
  complete: propTypes.bool,

  /**
   * Override the component that renders the step outer container
   */
  Container: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * Override the component that renders the step number. Will receive `complete` and `number` props.
   */
  Number: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * Override the component that renders the content of the step
   */
  Content: propTypes.oneOfType([propTypes.func, propTypes.object])
});

defineProperty(Step, "defaultProps", {
  complete: false,
  Container: StepContainer,
  Number: _Number,
  Content: Content$4
});

defineProperty(Step, "styles", styles$v);

var TableBody$1 = styled__default.tbody.withConfig({
  displayName: "Body__TableBody",
  componentId: "sc-1gzg6wm-0"
})(["& > tr{&:nth-child(odd){background:", ";}&:nth-child(even){background:", ";}}"], function (props) {
  return props.zebraStripe && props.startIndex % 2 === 1 ? themeGet('colors.shadow.extraLight')(props) : 'transparent';
}, function (props) {
  return props.zebraStripe ? props.startIndex % 2 === 1 ? 'transparent' : themeGet('colors.shadow.extraLight')(props) : 'transparent';
});
TableBody$1.defaultProps = {
  zebraStripe: true,
  startIndex: 0
};

var TableCell = styled__default.td.withConfig({
  displayName: "Cell__TableCell",
  componentId: "sc-1jflzu3-0"
})(["background:transparent;text-align:left;border-right:", " solid ", ";white-space:nowrap;padding:", " ", ";transition:0.2s ease all;&:last-child{border-right:none;}"], themeGet('thicknesses.normal'), themeGet('colors.shadow.light'), themeGet('spacing.small'), themeGet('spacing.medium'));
TableCell.defaultProps = {
  children: String.fromCharCode(160) // &nbsp;

};

var HeaderColumnName = styled__default.span.withConfig({
  displayName: "HeaderColumnName",
  componentId: "sc-1pg13iw-0"
})(["display:inline;"]);

var HeaderSortArrowIcon = styled__default(Icon).withConfig({
  displayName: "HeaderSortArrowIcon",
  componentId: "sc-140x408-0"
})(["font-size:inherit;"]);

var HeaderSortArrows = styled__default.span.withConfig({
  displayName: "HeaderSortArrows",
  componentId: "gwgudn-0"
})(["margin-left:8px;white-space:nowrap;& > a{color:", ";}& > a:focus{color:", ";}& > a::after{background:", ";}", ";"], themeGet('colors.gray.medium'), themeGet('colors.text.inverted'), themeGet('colors.gray.medium'), function (props) {
  if (props.sortOrder > 0) {
    return styled.css(["& > *:first-child{color:", ";}"], themeGet('colors.text.inverted')(props));
  } else if (props.sortOrder < 0) {
    return styled.css(["& > *:last-child{color:", ";}"], themeGet('colors.text.inverted')(props));
  }
});

var TableHeaderStyles = styled__default.th.withConfig({
  displayName: "Header__TableHeaderStyles",
  componentId: "sc-1oap223-0"
})(["background:", ";color:", ";text-transform:uppercase;font-weight:300;font-family:", ";padding:", " ", ";text-align:left;white-space:nowrap;cursor:", ";& > a{color:inherit;text-transform:uppercase;}& > a:focus{color:inherit;}& > a::after{background:", ";}"], themeGet('colors.primary.dark'), themeGet('colors.text.inverted'), themeGet('fonts.brand'), themeGet('spacing.small'), themeGet('spacing.medium'), function (_ref) {
  var sortable = _ref.sortable;
  return sortable ? 'pointer' : 'default';
}, themeGet('colors.text.inverted'));

var Overlay$3 = styled__default.div.withConfig({
  displayName: "Overlay",
  componentId: "sc-1n4y7pf-0"
})(["position:absolute;top:40px;left:0;bottom:0;right:0;background:", ";display:flex;& > div{margin:auto;}"], themeGet('colors.shadow.white'));

var TableRow = styled__default.tr.withConfig({
  displayName: "Row__TableRow",
  componentId: "sc-1eu5oab-0"
})(["border-top:", " solid ", ";&:first-of-type{border-top:none;}", ";"], themeGet('thicknesses.normal'), themeGet('colors.shadow.light'), function (_ref) {
  var onClick = _ref.onClick;
  return !!onClick ? 'cursor: pointer;' : '';
});

var RowDetailsRow = styled__default.tr.withConfig({
  displayName: "RowDetailsRow",
  componentId: "sc-77x3lo-0"
})(["display:table-row;text-align:left;&:nth-child(odd){background:transparent;}&:nth-child(even){background:", ";}"], themeGet('colors.shadow.extraLight'));

var RowDetailsStyles = styled__default.td.withConfig({
  displayName: "RowDetailsStyles",
  componentId: "nrgj8-0"
})(["border-top:", " solid ", ";border-bottom:", " solid ", ";box-shadow:inset 5px 0 0 ", ";"], themeGet('thicknesses.normal'), themeGet('colors.shadow.light'), themeGet('thicknesses.normal'), themeGet('colors.shadow.light'), themeGet('colors.shadow.light'));

var ScrollContainer = styled__default(DefaultScrollContainer).withConfig({
  displayName: "ScrollContainer",
  componentId: "sc-3flx8o-0"
})(["background:", ";border-width:", ";border-style:solid;border-color:", ";border-radius:5px 5px 0 0;font-size:1em;width:100%;overflow-x:auto;position:relative;"], themeGet('colors.background.default'), themeGet('thicknesses.normal'), themeGet('colors.border.medium'));

var TableStyles = styled__default.table.withConfig({
  displayName: "TableStyles",
  componentId: "sc-1xqnq9f-0"
})(["min-width:calc(100% - 1px);border-collapse:collapse;font-size:1em;& > tbody,& > thead{background:transparent;}"]);
TableStyles.Small = styled__default(TableStyles).withConfig({
  displayName: "TableStyles__Small",
  componentId: "sc-1xqnq9f-1"
})(["font-size:0.9em;& th,& td{padding:3px 8px;}"]);



var styles$w = /*#__PURE__*/Object.freeze({
  Body: TableBody$1,
  Cell: TableCell,
  HeaderColumnName: HeaderColumnName,
  HeaderSortArrowIcon: HeaderSortArrowIcon,
  HeaderSortArrows: HeaderSortArrows,
  Header: TableHeaderStyles,
  Overlay: Overlay$3,
  Row: TableRow,
  RowDetailsRow: RowDetailsRow,
  RowDetailsStyles: RowDetailsStyles,
  ScrollContainer: ScrollContainer,
  TableStyles: TableStyles
});

// number of columns, but there are no cleaner or easier solutions to spanning the entire
// table at time of writing.

var COLSPAN = 1000;

var TableRowDetails = function TableRowDetails(_ref) {
  var children = _ref.children,
      _ref$rowIndex = _ref.rowIndex,
      rowIndex = _ref$rowIndex === void 0 ? 0 : _ref$rowIndex,
      Row = _ref.Row,
      Styles = _ref.Styles;
  return React__default.createElement(TableBody, {
    startIndex: rowIndex
  }, React__default.createElement(Row, null, React__default.createElement(Styles, {
    colSpan: COLSPAN
  }, children)));
};

TableRowDetails.propTypes = {
  /**
   * Contents of the details
   */
  children: propTypes.node.isRequired,

  /**
   * The row index the details are related to
   */
  rowIndex: propTypes.number,

  /**
   * A component to render the styles of the tr
   */
  Row: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A component to render the styles of the td
   */
  Styles: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A tbody element
   */
  TableBody: propTypes.oneOfType([propTypes.func, propTypes.object])
};
TableRowDetails.defaultProps = {
  Row: RowDetailsRow,
  Styles: RowDetailsStyles,
  TBody: TableBody$1
};

/**
 * Special language-specific overrides.
 *
 * Source: ftp://ftp.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt
 *
 * @type {Object}
 */
var LANGUAGES = {
  tr: {
    regexp: /\u0130|\u0049|\u0049\u0307/g,
    map: {
      '\u0130': '\u0069',
      '\u0049': '\u0131',
      '\u0049\u0307': '\u0069'
    }
  },
  az: {
    regexp: /[\u0130]/g,
    map: {
      '\u0130': '\u0069',
      '\u0049': '\u0131',
      '\u0049\u0307': '\u0069'
    }
  },
  lt: {
    regexp: /[\u0049\u004A\u012E\u00CC\u00CD\u0128]/g,
    map: {
      '\u0049': '\u0069\u0307',
      '\u004A': '\u006A\u0307',
      '\u012E': '\u012F\u0307',
      '\u00CC': '\u0069\u0307\u0300',
      '\u00CD': '\u0069\u0307\u0301',
      '\u0128': '\u0069\u0307\u0303'
    }
  }
};

/**
 * Lowercase a string.
 *
 * @param  {String} str
 * @return {String}
 */
var lowerCase = function (str, locale) {
  var lang = LANGUAGES[locale];

  str = str == null ? '' : String(str);

  if (lang) {
    str = str.replace(lang.regexp, function (m) { return lang.map[m] });
  }

  return str.toLowerCase()
};

var nonWordRegexp = /[^A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC0-9\xB2\xB3\xB9\xBC-\xBE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D66-\u0D75\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19]+/g;

var camelCaseRegexp = /([a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0561-\u0587\u13F8-\u13FD\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7B5\uA7B7\uA7FA\uAB30-\uAB5A\uAB60-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A0-9\xB2\xB3\xB9\xBC-\xBE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D66-\u0D75\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19])([A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AD\uA7B0-\uA7B4\uA7B6\uFF21-\uFF3A])/g;

var camelCaseUpperRegexp = /([A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AD\uA7B0-\uA7B4\uA7B6\uFF21-\uFF3A])([A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AD\uA7B0-\uA7B4\uA7B6\uFF21-\uFF3A][a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0561-\u0587\u13F8-\u13FD\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7B5\uA7B7\uA7FA\uAB30-\uAB5A\uAB60-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A])/g;

/**
 * Sentence case a string.
 *
 * @param  {string} str
 * @param  {string} locale
 * @param  {string} replacement
 * @return {string}
 */
var noCase = function (str, locale, replacement) {
  if (str == null) {
    return ''
  }

  replacement = typeof replacement !== 'string' ? ' ' : replacement;

  function replace (match, index, value) {
    if (index === 0 || index === (value.length - match.length)) {
      return ''
    }

    return replacement
  }

  str = String(str)
    // Support camel case ("camelCase" -> "camel Case").
    .replace(camelCaseRegexp, '$1 $2')
    // Support odd camel case ("CAMELCase" -> "CAMEL Case").
    .replace(camelCaseUpperRegexp, '$1 $2')
    // Remove all non-word characters and replace with a single space.
    .replace(nonWordRegexp, replace);

  // Lower case the entire string.
  return lowerCase(str, locale)
};

/**
 * Dot case a string.
 *
 * @param  {string} value
 * @param  {string} [locale]
 * @return {string}
 */
var dotCase = function (value, locale) {
  return noCase(value, locale, '.')
};

/**
 * Special language-specific overrides.
 *
 * Source: ftp://ftp.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt
 *
 * @type {Object}
 */
var LANGUAGES$1 = {
  tr: {
    regexp: /[\u0069]/g,
    map: {
      '\u0069': '\u0130'
    }
  },
  az: {
    regexp: /[\u0069]/g,
    map: {
      '\u0069': '\u0130'
    }
  },
  lt: {
    regexp: /[\u0069\u006A\u012F]\u0307|\u0069\u0307[\u0300\u0301\u0303]/g,
    map: {
      '\u0069\u0307': '\u0049',
      '\u006A\u0307': '\u004A',
      '\u012F\u0307': '\u012E',
      '\u0069\u0307\u0300': '\u00CC',
      '\u0069\u0307\u0301': '\u00CD',
      '\u0069\u0307\u0303': '\u0128'
    }
  }
};

/**
 * Upper case a string.
 *
 * @param  {String} str
 * @return {String}
 */
var upperCase = function (str, locale) {
  var lang = LANGUAGES$1[locale];

  str = str == null ? '' : String(str);

  if (lang) {
    str = str.replace(lang.regexp, function (m) { return lang.map[m] });
  }

  return str.toUpperCase()
};

/**
 * Swap the case of a string. Manually iterate over every character and check
 * instead of replacing certain characters for better unicode support.
 *
 * @param  {String} str
 * @param  {String} [locale]
 * @return {String}
 */
var swapCase = function (str, locale) {
  if (str == null) {
    return ''
  }

  var result = '';

  for (var i = 0; i < str.length; i++) {
    var c = str[i];
    var u = upperCase(c, locale);

    result += u === c ? lowerCase(c, locale) : u;
  }

  return result
};

/**
 * Path case a string.
 *
 * @param  {string} value
 * @param  {string} [locale]
 * @return {string}
 */
var pathCase = function (value, locale) {
  return noCase(value, locale, '/')
};

/**
 * Camel case a string.
 *
 * @param  {string} value
 * @param  {string} [locale]
 * @return {string}
 */
var camelCase = function (value, locale, mergeNumbers) {
  var result = noCase(value, locale);

  // Replace periods between numeric entities with an underscore.
  if (!mergeNumbers) {
    result = result.replace(/ (?=\d)/g, '_');
  }

  // Replace spaces between words with an upper cased character.
  return result.replace(/ (.)/g, function (m, $1) {
    return upperCase($1, locale)
  })
};

/**
 * Snake case a string.
 *
 * @param  {string} value
 * @param  {string} [locale]
 * @return {string}
 */
var snakeCase = function (value, locale) {
  return noCase(value, locale, '_')
};

/**
 * Title case a string.
 *
 * @param  {string} value
 * @param  {string} [locale]
 * @return {string}
 */
var titleCase = function (value, locale) {
  return noCase(value, locale).replace(/^.| ./g, function (m) {
    return upperCase(m, locale)
  })
};

/**
 * Param case a string.
 *
 * @param  {string} value
 * @param  {string} [locale]
 * @return {string}
 */
var paramCase = function (value, locale) {
  return noCase(value, locale, '-')
};

/**
 * Header case a string.
 *
 * @param  {string} value
 * @param  {string} [locale]
 * @return {string}
 */
var headerCase = function (value, locale) {
  return noCase(value, locale, '-').replace(/^.|-./g, function (m) {
    return upperCase(m, locale)
  })
};

/**
 * Upper case the first character of a string.
 *
 * @param  {String} str
 * @return {String}
 */
var upperCaseFirst = function (str, locale) {
  if (str == null) {
    return ''
  }

  str = String(str);

  return upperCase(str.charAt(0), locale) + str.substr(1)
};

/**
 * Pascal case a string.
 *
 * @param  {string}  value
 * @param  {string}  [locale]
 * @param  {boolean} [mergeNumbers]
 * @return {string}
 */
var pascalCase = function (value, locale, mergeNumbers) {
  return upperCaseFirst(camelCase(value, locale, mergeNumbers), locale)
};

/**
 * Constant case a string.
 *
 * @param  {string} value
 * @param  {string} [locale]
 * @return {string}
 */
var constantCase = function (value, locale) {
  return upperCase(snakeCase(value, locale), locale)
};

/**
 * Sentence case a string.
 *
 * @param  {string} value
 * @param  {string} [locale]
 * @return {string}
 */
var sentenceCase = function (value, locale) {
  return upperCaseFirst(noCase(value, locale), locale)
};

/**
 * Check if a string is upper case.
 *
 * @param  {String}  string
 * @param  {String}  [locale]
 * @return {Boolean}
 */
var isUpperCase = function (string, locale) {
  return upperCase(string, locale) === string
};

/**
 * Check if a string is lower case.
 *
 * @param  {String}  string
 * @param  {String}  [locale]
 * @return {Boolean}
 */
var isLowerCase = function (string, locale) {
  return lowerCase(string, locale) === string
};

/**
 * Lower case the first character of a string.
 *
 * @param  {String} str
 * @return {String}
 */
var lowerCaseFirst = function (str, locale) {
  if (str == null) {
    return ''
  }

  str = String(str);

  return lowerCase(str.charAt(0), locale) + str.substr(1)
};

var changeCase = createCommonjsModule(function (module, exports) {
exports.no = exports.noCase = noCase;
exports.dot = exports.dotCase = dotCase;
exports.swap = exports.swapCase = swapCase;
exports.path = exports.pathCase = pathCase;
exports.upper = exports.upperCase = upperCase;
exports.lower = exports.lowerCase = lowerCase;
exports.camel = exports.camelCase = camelCase;
exports.snake = exports.snakeCase = snakeCase;
exports.title = exports.titleCase = titleCase;
exports.param = exports.paramCase = paramCase;
exports.header = exports.headerCase = headerCase;
exports.pascal = exports.pascalCase = pascalCase;
exports.constant = exports.constantCase = constantCase;
exports.sentence = exports.sentenceCase = sentenceCase;
exports.isUpper = exports.isUpperCase = isUpperCase;
exports.isLower = exports.isLowerCase = isLowerCase;
exports.ucFirst = exports.upperCaseFirst = upperCaseFirst;
exports.lcFirst = exports.lowerCaseFirst = lowerCaseFirst;
});
var changeCase_1 = changeCase.no;
var changeCase_2 = changeCase.noCase;
var changeCase_3 = changeCase.dot;
var changeCase_4 = changeCase.dotCase;
var changeCase_5 = changeCase.swap;
var changeCase_6 = changeCase.swapCase;
var changeCase_7 = changeCase.path;
var changeCase_8 = changeCase.pathCase;
var changeCase_9 = changeCase.upper;
var changeCase_10 = changeCase.upperCase;
var changeCase_11 = changeCase.lower;
var changeCase_12 = changeCase.lowerCase;
var changeCase_13 = changeCase.camel;
var changeCase_14 = changeCase.camelCase;
var changeCase_15 = changeCase.snake;
var changeCase_16 = changeCase.snakeCase;
var changeCase_17 = changeCase.title;
var changeCase_18 = changeCase.titleCase;
var changeCase_19 = changeCase.param;
var changeCase_20 = changeCase.paramCase;
var changeCase_21 = changeCase.header;
var changeCase_22 = changeCase.headerCase;
var changeCase_23 = changeCase.pascal;
var changeCase_24 = changeCase.pascalCase;
var changeCase_25 = changeCase.constant;
var changeCase_26 = changeCase.constantCase;
var changeCase_27 = changeCase.sentence;
var changeCase_28 = changeCase.sentenceCase;
var changeCase_29 = changeCase.isUpper;
var changeCase_30 = changeCase.isUpperCase;
var changeCase_31 = changeCase.isLower;
var changeCase_32 = changeCase.isLowerCase;
var changeCase_33 = changeCase.ucFirst;
var changeCase_34 = changeCase.upperCaseFirst;
var changeCase_35 = changeCase.lcFirst;
var changeCase_36 = changeCase.lowerCaseFirst;

var TableHeader =
/*#__PURE__*/
function (_React$Component) {
  inherits(TableHeader, _React$Component);

  function TableHeader() {
    var _getPrototypeOf2;

    var _this;

    classCallCheck(this, TableHeader);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(TableHeader)).call.apply(_getPrototypeOf2, [this].concat(args)));

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "createClickHandler", function (naturalOrder) {
      return function (ev) {
        ev.preventDefault();
        _this.props.onClick && _this.props.onClick(naturalOrder);
      };
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "sortUp", _this.createClickHandler(1));

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "sortDown", _this.createClickHandler(-1));

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "renderColumnName", function () {
      var _this$props = _this.props,
          sortable = _this$props.sortable,
          children = _this$props.children,
          sortOrder = _this$props.sortOrder,
          Link$$1 = _this$props.Link,
          ColumnName = _this$props.ColumnName;

      if (sortable) {
        var titleSortHandler = sortOrder > 0 ? _this.sortDown : _this.sortUp;
        return React__default.createElement(Link$$1, {
          onClick: titleSortHandler
        }, React__default.createElement(ColumnName, {
          sortable: true
        }, children));
      }

      return React__default.createElement(ColumnName, null, children);
    });

    return _this;
  }

  createClass(TableHeader, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          sortable = _this$props2.sortable,
          sortOrder = _this$props2.sortOrder,
          handleClick = _this$props2.handleClick,
          onClick = _this$props2.onClick,
          id = _this$props2.id,
          className = _this$props2.className,
          Styles = _this$props2.Styles,
          SortArrows = _this$props2.SortArrows,
          Link$$1 = _this$props2.Link,
          Icon = _this$props2.Icon;
      return React__default.createElement(Styles, {
        sortable: sortable,
        className: className,
        id: id
      }, this.renderColumnName(), sortable && React__default.createElement(SortArrows, {
        sortOrder: sortOrder
      }, React__default.createElement(Link$$1, {
        icon: "up",
        onClick: this.sortUp
      }), React__default.createElement(Link$$1, {
        icon: "down",
        onClick: this.sortDown
      })));
    }
  }]);

  return TableHeader;
}(React__default.Component);

defineProperty(TableHeader, "propTypes", {
  /**
   * Contents of the header cell.
   */
  children: propTypes.node.isRequired,

  /**
   * Called when the user clicks the header cell.
   */
  onClick: propTypes.func,

  /**
   * Specifies the sorting order of this column. [-1, 0, 1] for descending, none, or ascending.
   */
  sortOrder: propTypes.number,

  /**
   * Indicates whether this column is sortable. This changes how it's rendered.
   */
  sortable: propTypes.bool,

  /**
   * Adds a class name to the element.
   */
  className: propTypes.string,

  /**
   * Adds an id to the element.
   */
  id: propTypes.string,

  /**
   * A component for rendering an icon, used for sort arrows.
   */
  Icon: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A link component. Defaults Link
   */
  Link: propTypes.func,

  /**
   * A component for rendering the th element styles
   */
  Styles: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A component for rendering the sort arrow container
   */
  SortArrows: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A component for rendering the column name text
   */
  ColumnName: propTypes.oneOfType([propTypes.func, propTypes.object])
});

defineProperty(TableHeader, "defaultProps", {
  sortable: false,
  sortOrder: 0,
  onClick: lodash_noop,
  className: null,
  id: null,
  Icon: HeaderSortArrowIcon,
  Link: Link,
  Styles: TableHeaderStyles,
  SortArrows: HeaderSortArrows,
  ColumnName: HeaderColumnName
});

defineProperty(TableHeader, "styles", styles$w);

TableHeader.Small = withProps({
  Styles: TableHeaderStyles.Small
})(TableHeader);

var Table =
/*#__PURE__*/
function (_React$Component) {
  inherits(Table, _React$Component);

  function Table() {
    classCallCheck(this, Table);

    return possibleConstructorReturn(this, getPrototypeOf(Table).apply(this, arguments));
  }

  createClass(Table, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          id = _this$props.id,
          children = _this$props.children,
          loading = _this$props.loading,
          headers = _this$props.headers,
          wrapBody = _this$props.wrapBody,
          Styles = _this$props.Styles,
          Overlay = _this$props.Overlay,
          Body = _this$props.Body,
          ScrollContainer$$1 = _this$props.ScrollContainer,
          rest = objectWithoutProperties(_this$props, ["className", "id", "children", "loading", "headers", "wrapBody", "Styles", "Overlay", "Body", "ScrollContainer"]);

      return React__default.createElement(ScrollShadow, _extends_1({
        horizontal: true,
        ScrollContainer: ScrollContainer$$1
      }, rest), React__default.createElement(Styles, {
        cellPadding: 0,
        cellSpacing: 0,
        className: className,
        id: id
      }, React__default.createElement("thead", null, headers), wrapBody ? React__default.createElement(Body, null, children) : children), loading && React__default.createElement(Overlay, null, React__default.createElement(Loader, null)));
    }
  }]);

  return Table;
}(React__default.Component);

defineProperty(Table, "propTypes", {
  /**
   * Render the rows of the Table within its children.
   */
  children: propTypes.node.isRequired,

  /**
   * Render headers for the columns with this property.
   */
  headers: propTypes.node,

  /**
   * Renders a loading spinner over the table body.
   */
  loading: propTypes.bool,

  /**
   * Adds a class name to the table element.
   */
  className: propTypes.string,

  /**
   * Adds an id to the table element.
   */
  id: propTypes.string,

  /**
   * Whether to wrap the passed children in a <Table.Body>. Defaults true.
   */
  wrapBody: propTypes.bool,

  /**
   * A component to render the table element
   */
  Styles: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A component to render any content that overlays the table itself
   */
  Overlay: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A component that wraps the whole table as a scroll context
   */
  ScrollContainer: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A component that renders a <tbody>
   */
  Body: propTypes.oneOfType([propTypes.func, propTypes.object])
});

defineProperty(Table, "defaultProps", {
  loading: false,
  className: null,
  id: null,
  headers: null,
  wrapBody: true,
  Styles: TableStyles,
  Overlay: Overlay$3,
  ScrollContainer: ScrollContainer,
  Body: TableBody$1
});

defineProperty(Table, "styles", styles$w);

Table.Row = TableRow;
Table.Header = TableHeader;
Table.Cell = TableCell;
Table.RowDetails = TableRowDetails;
Table.Body = TableBody$1;
Table.Small = withProps({
  Styles: TableStyles.Small
})(Table);

var TabContainer = styled__default.div.withConfig({
  displayName: "Container__TabContainer",
  componentId: "sc-1nesytp-0"
})(["display:flex;flex-direction:column;"]);
TabContainer.Vertical = styled__default(TabContainer).withConfig({
  displayName: "Container__Vertical",
  componentId: "sc-1nesytp-1"
})(["flex-direction:row;"]);

var TabContent = styled__default.div.withConfig({
  displayName: "Content__TabContent",
  componentId: "sc-7komug-0"
})(["padding:", ";border-width:", ";border-style:solid;border-color:", ";", " > &{flex:0 0 auto;}", " > &{flex:1;}"], themeGet('spacing.large'), themeGet('thicknesses.normal'), themeGet('colors.border.medium'), TabContainer, TabContainer.Vertical);

var TabList = styled__default.ul.withConfig({
  displayName: "List__TabList",
  componentId: "sc-1t5n2f3-0"
})(["display:flex;flex-direction:row;user-select:none;padding:unset;margin:unset;overflow:visible;", " > &{flex:0 0 auto;}", " > &{flex:0 0 25%;}"], TabContainer, TabContainer.Vertical);
TabList.Vertical = styled__default(TabList).withConfig({
  displayName: "List__Vertical",
  componentId: "sc-1t5n2f3-1"
})(["flex-direction:column;"]);



var styles$x = /*#__PURE__*/Object.freeze({
  Container: TabContainer,
  Content: TabContent,
  List: TabList
});

var verticalStyles = styled.css(["border-bottom-color:", ";border-right-color:", ";&:last-child{border-radius:0 0 0 3px;margin-bottom:0;}", ";"], themeGet('colors.border.medium'), function (props) {
  return props.active ? themeGet('colors.background.default')(props) : themeGet('colors.border.medium')(props);
}, function (_ref) {
  var disabled = _ref.disabled,
      active = _ref.active;

  if (!disabled && !active) {
    return styled.css(["&:hover{border-bottom-color:", ";}"], function (props) {
      return props.active ? themeGet('colors.border.medium')(props) : themeGet('colors.primary.default')(props);
    });
  }
});
var Tab = styled__default.li.withConfig({
  displayName: "Tab",
  componentId: "e6wyw8-0"
})(["position:relative;display:flex;flex-direction:column;align-content:flex-start;opacity:", ";padding:1em 1.4em;margin-right:-1px;margin-bottom:-1px;cursor:", ";color:inherit;background:", ";font-weight:bold;text-transform:uppercase;white-space:nowrap;transition:opacity 0.2s ease,border-color 0.2s ease;border-width:", ";border-style:solid;border-color:", ";border-bottom-color:", ";&:first-child{border-radius:3px 0 0 0;}&:last-child{border-radius:0 3px 0 0;margin-right:0;}", " ", ":not(", ") > &{flex:1 0 0;}", " > &,", " > ", " > &{", ";}"], function (_ref2) {
  var active = _ref2.active;
  return active ? 1 : 0.5;
}, function (_ref3) {
  var disabled = _ref3.disabled,
      active = _ref3.active;
  return disabled || active ? 'default' : 'pointer';
}, function (props) {
  return props.disabled ? themeGet('colors.background.disabled')(props) : themeGet('colors.background.default')(props);
}, themeGet('thicknesses.normal'), themeGet('colors.border.medium'), function (props) {
  return props.active ? themeGet('colors.background.default')(props) : themeGet('colors.border.medium')(props);
}, function (_ref4) {
  var disabled = _ref4.disabled,
      active = _ref4.active;

  if (!disabled && !active) {
    return styled.css(["&:hover{border-color:", ";opacity:1;z-index:1;}"], function (props) {
      return props.active ? themeGet('colors.border.medium')(props) : themeGet('colors.primary.default')(props);
    });
  }
}, TabList, TabList.Vertical, TabList.Vertical, TabContainer.Vertical, TabList, verticalStyles);
Tab.Vertical = styled__default(Tab).withConfig({
  displayName: "Tab__Vertical",
  componentId: "e6wyw8-1"
})(["", ";"], verticalStyles);
Tab.Container = Tab.Vertical.Container = TabContainer;
Tab.Content = Tab.Vertical.Content = TabContent;
Tab.styles = styles$x;

var TabGroup =
/*#__PURE__*/
function (_React$Component) {
  inherits(TabGroup, _React$Component);

  function TabGroup() {
    var _getPrototypeOf2;

    var _this;

    classCallCheck(this, TabGroup);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(TabGroup)).call.apply(_getPrototypeOf2, [this].concat(args)));

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "createTabClickHandler", function (tab, index) {
      return _this.props.onTabSelected ? function (ev) {
        if (tab.props.onClick) {
          tab.props.onClick(ev);
        }

        _this.props.onTabSelected(index);
      } : tab.props.onClick;
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "renderTabs", function () {
      return React__default.Children.map(_this.props.children, function (child, index) {
        if (!React__default.isValidElement(child)) {
          return child;
        } // rendering Tab


        return React__default.cloneElement(child, {
          onClick: child.props.disabled || child.props.active ? null : _this.createTabClickHandler(child, index),
          active: index === _this.props.selectedTabIndex
        });
      });
    });

    return _this;
  }

  createClass(TabGroup, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          List = _this$props.List,
          onTabSelected = _this$props.onTabSelected,
          rest = objectWithoutProperties(_this$props, ["List", "onTabSelected"]);

      return React__default.createElement(List, rest, this.renderTabs());
    }
  }]);

  return TabGroup;
}(React__default.Component);

defineProperty(TabGroup, "propTypes", {
  /**
   * Tab elements within container
   */
  children: propTypes.node.isRequired,

  /**
   * Called when user selects the tab
   */
  onTabSelected: propTypes.func,

  /**
   * The currently selected tab
   */
  selectedTabIndex: propTypes.number,

  /**
   * Override the component used to render the Tab list
   */
  List: propTypes.oneOfType([propTypes.func, propTypes.object])
});

defineProperty(TabGroup, "defaultProps", {
  onTabSelected: null,
  List: TabList
});

TabGroup.Vertical = withProps({
  List: TabList.Vertical
})(TabGroup);

Tab.Group = TabGroup;

var TextArea = styled__default.textarea.withConfig({
  displayName: "TextArea",
  componentId: "sc-9mcdgx-0"
})(["resize:", ";letter-spacing:0.02em;line-height:1.5;font-size:14px;font-family:", ";transition:all 0.2s ease;padding:calc(", " - 1px);border-width:", ";border-style:solid;color:", ";background:", ";opacity:1;border-color:", ";outline:none;width:100%;&:required{box-shadow:none;}&:focus{box-shadow:inset 0 -5px 0 ", ";border-color:", ";}&:disabled{background:", ";border-color:", ";opacity:0.5;color:", ";}&::placeholder{opacity:0.5;}", " ", ";"], function (props) {
  return props.resize;
}, themeGet('fonts.brand'), themeGet('spacing.medium'), themeGet('thicknesses.wide'), themeGet('colors.text.default'), themeGet('colors.background.default'), themeGet('colors.border.light'), themeGet('colors.primary.light'), themeGet('colors.border.medium'), themeGet('colors.background.disabled'), themeGet('colors.border.medium'), themeGet('colors.text.disabled'), function (props) {
  return props.visited ? styled.css(["&:invalid{box-shadow:inset 0 -5px 0 ", ";border-color:", ";}"], themeGet('colors.negative.light')(props), themeGet('colors.negative.border')(props)) : '';
}, function (props) {
  return props.invalid || props.error ? "\n    box-shadow: inset 0 -5px ".concat(themeGet('colors.negative.light')(props), ";\n    border-color: ").concat(themeGet('colors.negative.border')(props), ";\n    ") : '';
});
TextArea.propTypes = {
  /**
   * Adds a class name to the element.
   */
  className: propTypes.string,

  /**
   * Adds an id to the element.
   */
  id: propTypes.string,

  /**
   * Specifies the height of the element.
   */
  height: propTypes.string,

  /**
   * Controls if the textarea can be resized by the user.
   */
  resize: propTypes.oneOf(['vertical', 'horizontal', 'both', 'none'])
};
TextArea.defaultProps = {
  className: null,
  id: null,
  height: '100px',
  resize: 'vertical'
};

var TimeScrubberContainer = styled__default.div.withConfig({
  displayName: "Container__TimeScrubberContainer",
  componentId: "sc-6ps42a-0"
})(["display:flex;flex-direction:row;& > *{flex:1;&:first-child,&:last-child{flex:0 0 auto;}&:first-child{border-top-left-radius:4px;border-bottom-left-radius:4px;}&:last-child{border-top-right-radius:4px;border-bottom-right-radius:4px;}}"]);

var NudgeButtonBorder = styled__default.button.withConfig({
  displayName: "NudgeButton__NudgeButtonBorder",
  componentId: "wybjoz-0"
})(["padding:", " ", ";border:", " solid ", ";background:", ";color:", ";outline:none;cursor:pointer;transition:0.2s ease all;&:focus,&:active{outline:none;}&:focus{border-color:", ";}&:disabled{background:", ";border-color:", ";cursor:default;}"], themeGet('spacing.medium'), themeGet('spacing.small'), themeGet('thicknesses.wide'), themeGet('colors.border.light'), themeGet('colors.background.default'), themeGet('colors.gray.default'), themeGet('colors.primary.default'), themeGet('colors.background.disabled'), themeGet('colors.border.disabled'));
/**
 * A simple button which moves the time scrubber value forward or backward
 */

var NudgeButton = function NudgeButton(_ref) {
  var direction = _ref.direction,
      rest = objectWithoutProperties(_ref, ["direction"]);

  return React__default.createElement(NudgeButtonBorder, rest, React__default.createElement(Icon, {
    name: direction === 'left' ? 'back' : 'forward'
  }));
};

NudgeButton.defaultProps = {
  direction: 'left'
};

var Display = styled__default(Label).withConfig({
  displayName: "TimeDisplay__Display",
  componentId: "sc-1imjj52-0"
})(["position:absolute;top:", ";left:0;right:0;text-align:center;pointer-events:none;"], themeGet('spacing.small'));
/**
 * Displays the provided time within a TimeScrubber viewport
 */

var TimeDisplay = function TimeDisplay(_ref) {
  var time = _ref.time;
  return React__default.createElement(Display, null, time && time.format('h:mm A'));
};

var Bar$1 = styled__default.div.withConfig({
  displayName: "Timeline__Bar",
  componentId: "sc-1sq5r9x-0"
})(["display:flex;flex-direction:row;position:absolute;bottom:0;top:0;user-select:none;transition:", ";& > *{margin-top:auto;margin-right:", "px;}"], function (props) {
  return props.dragging ? '0' : '0.2s ease all';
}, function (props) {
  return props.tickSpacing - 1;
});
var Tick = styled__default.div.withConfig({
  displayName: "Timeline__Tick",
  componentId: "sc-1sq5r9x-1"
})(["border-left:1px solid ", ";height:", ";position:relative;&::after{content:'", "';font-size:12px;position:absolute;bottom:70%;transform:translateX(-50%);white-space:pre;opacity:", ";}"], themeGet('colors.border.medium'), function (props) {
  return props.primary ? '10px' : '5px';
}, function (props) {
  return props.label;
}, function (props) {
  return props.enabled ? 1 : 0.5;
});

var getTickLabel = function getTickLabel(idx) {
  if (idx % 4 !== 0) {
    return '';
  }

  var hour = idx / 4;
  var pm = hour > 11 && hour < 24;
  var displayHour = hour % 12 === 0 ? 12 : hour % 12;
  return "".concat(displayHour, " ").concat(pm ? 'PM' : 'AM');
};

var rangeContains = function rangeContains(range, value) {
  return value >= range[0] && value <= range[1];
};
/**
 * Draws a timeline with times, tickmarks
 */


var Timeline = React.forwardRef(function (_ref, ref) {
  var tickSpacing = _ref.tickSpacing,
      allowedRange = _ref.allowedRange,
      rest = objectWithoutProperties(_ref, ["tickSpacing", "allowedRange"]);

  return React__default.createElement(Bar$1, _extends_1({
    tickSpacing: tickSpacing
  }, rest, {
    ref: ref
  }), new Array(97).fill(null).map(function (_, idx) {
    return React__default.createElement(Tick, {
      key: idx,
      primary: idx % 4 === 0,
      label: getTickLabel(idx),
      enabled: idx !== 96 && rangeContains(allowedRange, idx / 4.0)
    });
  }));
});
Timeline.defaultProps = {
  tickSpacing: 11,
  allowedRange: [0, 23.75]
};

var Indicator = styled__default.div.withConfig({
  displayName: "Viewport__Indicator",
  componentId: "e4jysz-0"
})(["position:absolute;z-index:1;left:50%;transform:translateX(-1px);background:", ";width:3px;height:5px;bottom:0;"], themeGet('colors.text.default'));
var Overlay$4 = styled__default.div.withConfig({
  displayName: "Viewport__Overlay",
  componentId: "e4jysz-1"
})(["pointer-events:none;position:absolute;left:0;right:0;top:0;bottom:0;z-index:2;"]);
var Window$1 = styled__default.div.withConfig({
  displayName: "Viewport__Window",
  componentId: "e4jysz-2"
})(["position:relative;overflow-x:hidden;overflow-y:hidden;width:100%;cursor:", ";pointer-events:", ";border:", " solid ", ";border-left:0;border-right:0;height:53px;background:", ";transition:all 0.2s ease;&:focus{outline:0;box-shadow:inset 0 -5px 0 ", ";border-color:", ";}&:active{cursor:grabbing;}"], function (props) {
  return props.disabled ? 'default' : 'grab';
}, function (props) {
  return props.disabled ? 'none' : 'initial';
}, themeGet('thicknesses.wide'), function (props) {
  return props.disabled ? themeGet('colors.border.disabled')(props) : themeGet('colors.border.light')(props);
}, function (props) {
  return props.disabled ? themeGet('colors.background.disabled')(props) : themeGet('colors.background.default')(props);
}, themeGet('colors.primary.light'), themeGet('colors.border.medium'));
var Centered = styled__default.div.withConfig({
  displayName: "Viewport__Centered",
  componentId: "e4jysz-3"
})(["position:absolute;left:50%;bottom:0;top:0;"]);
/**
 * A limited viewport area in which the Timeline bar moves. Automatically
 * starts all content at the center of the visible viewport. Use relative
 * offsets on content to move content within the viewport.
 */

var Viewport = function Viewport(_ref) {
  var children = _ref.children,
      time = _ref.time,
      rest = objectWithoutProperties(_ref, ["children", "time"]);

  return React__default.createElement(Window$1, _extends_1({}, rest, {
    tabIndex: 0
  }), React__default.createElement(Centered, null, children), React__default.createElement(Indicator, null), React__default.createElement(TimeDisplay, {
    time: time
  }));
};



var styles$y = /*#__PURE__*/Object.freeze({
  Container: TimeScrubberContainer,
  NudgeButton: NudgeButton,
  TimeDisplay: TimeDisplay,
  Timeline: Timeline,
  Viewport: Viewport
});

var disabledRange = [-1, -1];

var roundMinutes = function roundMinutes(minutes) {
  return Math.round(minutes / 15.0) * 15;
};

var toHours = function toHours(momentTime) {
  return momentTime.hours() + momentTime.minutes() / 60.0;
};
/**
 * An intuitive time selector which works in 15 minute increments. Allows setting
 * a valid range of time to pick from. Please supply all time values as moment objects
 * which are rounded to 15 minutes. If your provided value is not rounded, an onChange
 * event will be immediately fired with the rounded value.
 */


var TimeScrubber =
/*#__PURE__*/
function (_React$Component) {
  inherits(TimeScrubber, _React$Component);

  function TimeScrubber() {
    var _getPrototypeOf2;

    var _this;

    classCallCheck(this, TimeScrubber);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(TimeScrubber)).call.apply(_getPrototypeOf2, [this].concat(args)));

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "state", {
      offset: 0,
      dragging: false,
      grabPoint: null,
      potentialTime: null,
      internalValue: _this.props.value
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "viewportRef", React.createRef());

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "timelineElement", null);

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "offset", 0);

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "capToRange", function (position) {
      var _this$props = _this.props,
          tickSpacing = _this$props.tickSpacing,
          allowedRange = _this$props.allowedRange;
      var rangeSpan = (allowedRange[1] - allowedRange[0]) * 4 * tickSpacing;
      var minimum = allowedRange[0] * 4 * tickSpacing;
      var maximum = minimum + rangeSpan;
      return Math.min(maximum, Math.max(minimum, position));
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "enforceTimeRounding", function () {
      var _this$props2 = _this.props,
          value = _this$props2.value,
          onChange = _this$props2.onChange;

      if (onChange && value.minutes() % 15 !== 0) {
        var rounded = value.clone().minutes(roundMinutes(value.minutes())).seconds(0);
        onChange(rounded);
      }
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "getPosition", function (timeValue) {
      var tickSpacing = _this.props.tickSpacing;
      var internalValue = _this.state.internalValue;

      var _assertThisInitialize = assertThisInitialized(assertThisInitialized(_this)),
          offset = _assertThisInitialize.offset;

      var value = timeValue || internalValue;
      var hours = toHours(value);
      var rawPosition = tickSpacing * hours * 4 - offset;
      return _this.capToRange(rawPosition);
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "getTime", function (timeValue) {
      var tickSpacing = _this.props.tickSpacing;
      var internalValue = _this.state.internalValue;

      var realPosition = _this.getPosition(timeValue);

      var hoursWithPartial = realPosition / 4 / tickSpacing;
      var hours = Math.floor(hoursWithPartial);
      var minutes = Math.floor((hoursWithPartial - hours) * 60);
      var roundedMinutes = roundMinutes(minutes);
      return timeValue || internalValue.clone().hours(hours).minutes(roundedMinutes);
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "stepTime", function (stepMinutes) {
      var _this$props3 = _this.props,
          onChange = _this$props3.onChange,
          allowedRange = _this$props3.allowedRange;
      var internalValue = _this.state.internalValue;
      var newValue = internalValue.clone().add(stepMinutes, 'minutes');
      var hoursWithPartial = toHours(newValue);

      if (hoursWithPartial < allowedRange[0] || hoursWithPartial > allowedRange[1]) {
        return;
      }

      _this.setState({
        internalValue: newValue
      });

      if (onChange) {
        onChange(newValue);
      }
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "incrementTime", function () {
      return _this.stepTime(15);
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "decrementTime", function () {
      return _this.stepTime(-15);
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "canIncrementTime", function () {
      return toHours(_this.state.internalValue) + 0.25 <= _this.props.allowedRange[1];
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "canDecrementTime", function () {
      return toHours(_this.state.internalValue) - 0.25 >= _this.props.allowedRange[0];
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "syncTimelinePosition", function (timeValue) {
      if (_this.timelineElement) {
        _this.timelineElement.style.left = '-' + _this.getPosition(timeValue) + 'px';
      }
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "getEventPosition", function (ev) {
      if (ev.touches) {
        return ev.touches.item(0).clientX;
      }

      return ev.clientX;
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleGrab", function (ev) {
      ev.preventDefault();

      var grabPoint = _this.getEventPosition(ev);

      _this.setState(function (_ref) {
        var offset = _ref.offset;
        return {
          dragging: true,
          grabPoint: grabPoint
        };
      });
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleDrag", function (ev) {
      if (!_this.state.dragging) {
        return;
      }

      var dragPoint = _this.getEventPosition(ev);

      _this.offset = dragPoint - _this.state.grabPoint;

      _this.syncTimelinePosition();

      _this.setState({
        potentialTime: _this.getTime()
      });
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleRelease", function () {
      var tickSpacing = _this.props.tickSpacing;

      if (!_this.state.dragging) {
        return;
      }

      var newTime = _this.getTime();

      if (_this.props.onChange) {
        _this.props.onChange(newTime);
      }

      _this.setState({
        dragging: false,
        grabPoint: null,
        potentialTime: null,
        internalValue: newTime
      });

      _this.offset = 0;

      _this.syncTimelinePosition();

      if (_this.viewportRef.current && _this.viewportRef.current.focus) {
        _this.viewportRef.current.focus();
      }
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleKey", function (ev) {
      // setting dragging: true turns off the smoothing on the
      // timeline movement, which makes the component feel more
      // responsive
      if (ev.key === 'ArrowLeft') {
        _this.setState({
          dragging: true
        });

        _this.decrementTime();
      } else if (ev.key === 'ArrowRight') {
        _this.setState({
          dragging: true
        });

        _this.incrementTime();
      }
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleKeyUp", function () {
      _this.setState({
        dragging: false
      });
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "timelineRef", function (el) {
      if (!el) {
        return;
      }

      _this.timelineElement = el;

      _this.syncTimelinePosition();
    });

    return _this;
  }

  createClass(TimeScrubber, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      window.addEventListener('mousemove', this.handleDrag);
      window.addEventListener('mouseup', this.handleRelease);
      window.addEventListener('touchmove', this.handleDrag);
      window.addEventListener('touchend', this.handleRelease);
      this.enforceTimeRounding();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      this.enforceTimeRounding();

      if (this.props.value !== prevProps.value) {
        this.setState({
          internalValue: this.props.value
        });
      }

      if (this.state.internalValue !== prevState.internalValue) {
        this.syncTimelinePosition();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      window.removeEventListener('mousemove', this.handleDrag);
      window.removeEventListener('mouseup', this.handleRelease);
      window.removeEventListener('touchmove', this.handleDrag);
      window.removeEventListener('touchend', this.handleRelease);
    }
    /**
     * Restricts a position to only be within the allowed range
     */

  }, {
    key: "render",
    value: function render() {
      var _this$state = this.state,
          offset = _this$state.offset,
          dragging = _this$state.dragging,
          potentialTime = _this$state.potentialTime,
          internalValue = _this$state.internalValue;

      var _this$props4 = this.props,
          tickSpacing = _this$props4.tickSpacing,
          allowedRange = _this$props4.allowedRange,
          disabled = _this$props4.disabled,
          Container = _this$props4.Container,
          NudgeButton$$1 = _this$props4.NudgeButton,
          Viewport$$1 = _this$props4.Viewport,
          Timeline$$1 = _this$props4.Timeline,
          rest = objectWithoutProperties(_this$props4, ["tickSpacing", "allowedRange", "disabled", "Container", "NudgeButton", "Viewport", "Timeline"]);

      var maximum = this.props.tickSpacing * 4 * 25;
      var position = this.getPosition();
      return React__default.createElement(Container, _extends_1({
        onKeyDown: this.handleKey,
        onKeyUp: this.handleKeyUp
      }, rest), React__default.createElement(NudgeButton$$1, {
        direction: "left",
        onClick: this.decrementTime,
        disabled: disabled || !this.canDecrementTime(),
        type: "button"
      }), React__default.createElement(Viewport$$1, {
        onMouseDown: this.handleGrab,
        onTouchStart: this.handleGrab,
        disabled: disabled,
        time: potentialTime || internalValue,
        ref: this.viewportRef
      }, React__default.createElement(Timeline$$1, {
        dragging: dragging,
        tickSpacing: tickSpacing,
        allowedRange: disabled ? disabledRange : allowedRange,
        ref: this.timelineRef
      })), React__default.createElement(NudgeButton$$1, {
        direction: "right",
        onClick: this.incrementTime,
        disabled: disabled || !this.canIncrementTime(),
        type: "button"
      }));
    }
  }]);

  return TimeScrubber;
}(React__default.Component);

defineProperty(TimeScrubber, "propTypes", {
  /**
   * A MomentJS object which represents the current time. You can
   * provide an object with a date included, and the date will not
   * be modified.
   */
  value: propTypes.object.isRequired,

  /**
   * Called when the time value is changed with the new value. This
   * is not called while the user is scrubbing; only when they release.
   */
  onChange: propTypes.func.isRequired,

  /**
   * An array with two values. The first is the time (in hours) which
   * represents an *inclusive* start to the allowed time range. The
   * second represents the *inclusive* end of the range. Values should
   * be decimals representing hour values between 0 and 24
   * (like "13.5" for 1:30PM)
   */
  allowedRange: propTypes.arrayOf(propTypes.number),

  /**
   * Determines whether the user can interact with the control
   */
  disabled: propTypes.bool,

  /**
   * Adjusts the spacing between tickmarks. Include the width
   * of the mark itself (1px) in the provided spacing total.
   */
  tickSpacing: propTypes.number,

  /**
   * A component that can be provided to customize
   * the rendering behavior of the outer container
   */
  Container: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A component that can be provided to customize
   * the rendering behavior of the buttons
   */
  NudgeButton: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A component that can be provided to customize
   * the rendering behavior of the viewport window
   */
  Viewport: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A component that can be provided to customize
   * the rendering behavior of the timeline bar
   */
  Timeline: propTypes.oneOfType([propTypes.func, propTypes.object])
});

defineProperty(TimeScrubber, "defaultProps", {
  tickSpacing: 11,
  value: moment().hour(12).minute(0).second(0),
  disabled: false,
  allowedRange: [0, 23.75],
  Container: TimeScrubberContainer,
  NudgeButton: NudgeButton,
  Viewport: Viewport,
  Timeline: Timeline
});

defineProperty(TimeScrubber, "styles", styles$y);

var Container$d = styled__default.div.withConfig({
  displayName: "Container",
  componentId: "sc-6vfy7h-0"
})(["display:block;position:relative;& + &{margin-top:", ";}"], themeGet('spacing.extraSmall'));

var Input$3 = styled__default.input.withConfig({
  displayName: "Input",
  componentId: "sc-1x8a8h5-0"
})(["opacity:0;position:absolute;z-index:-100000;"]);

var SIZE$4 = '30px';
var TOGGLE_WIDTH = '58px';
var Label$2 = styled__default.label.withConfig({
  displayName: "Label",
  componentId: "en0qw0-0"
})(["display:block;cursor:pointer;position:relative;user-select:none;padding-right:0;padding-left:calc(", " + ", ");padding-top:4px;padding-bottom:5px;transition:all 0.2s ease;line-height:1.5;font-family:", ";font-weight:300;&::before{content:'';box-sizing:border-box;border-width:", ";border-style:solid;border-radius:15px;width:", ";height:", ";display:block;position:absolute;left:0;top:50%;transform:translateY(-50%);transition:all 0.2s ease;}", ":enabled + &:hover::before{box-shadow:", ";}&::after{content:'';box-sizing:border-box;border-width:", ";border-style:solid;border-radius:15px;width:", ";height:", ";position:absolute;top:50%;transform:translateY(-50%);left:0;display:block;transition:all 0.2s ease;}", ":focus + &::before{box-shadow:", ";}", " + &::before{background:", ";border-color:", ";}", " + &::after{background:", ";border-color:", ";}", " + &:hover::before,", " + &:hover::after{border-color:", ";}", ":checked + &{&::before{background:", ";border-color:", ";}&::after{left:", ";background:", ";border-color:", ";}}", ":disabled + &{cursor:default;color:", ";&::before,&::after{border-color:", ";background:", ";}}", ":checked:disabled + &::before{background:", ";}"], TOGGLE_WIDTH, themeGet('spacing.small'), themeGet('fonts.brand'), themeGet('thicknesses.wide'), TOGGLE_WIDTH, SIZE$4, Input$3, themeGet('shadows.focusOutline'), themeGet('thicknesses.wide'), SIZE$4, SIZE$4, Input$3, themeGet('shadows.focusOutline'), Input$3, themeGet('colors.background.default'), themeGet('colors.primary.dark'), Input$3, themeGet('colors.text.inverted'), themeGet('colors.primary.dark'), Input$3, Input$3, themeGet('colors.primary.dark'), Input$3, themeGet('colors.primary.dark'), themeGet('colors.primary.dark'), SIZE$4, themeGet('colors.text.inverted'), themeGet('colors.primary.dark'), Input$3, themeGet('colors.gray.border'), themeGet('colors.border.disabled'), themeGet('colors.background.disabled'), Input$3, themeGet('colors.background.disabledSelected'));



var styles$z = /*#__PURE__*/Object.freeze({
  Container: Container$d,
  Input: Input$3,
  Label: Label$2
});

/**
 * A simple `Toggle` component thta can be turned on and off. Use `checked` to set
 * whether the `Toggle` is selected.
 */

var Toggle =
/*#__PURE__*/
function (_React$PureComponent) {
  inherits(Toggle, _React$PureComponent);

  function Toggle() {
    var _getPrototypeOf2;

    var _this;

    classCallCheck(this, Toggle);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Toggle)).call.apply(_getPrototypeOf2, [this].concat(args)));

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "defaultId", generateId('toggle'));

    return _this;
  }

  createClass(Toggle, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          disabled = _this$props.disabled,
          required = _this$props.required,
          name = _this$props.name,
          description = _this$props.description,
          onChange = _this$props.onChange,
          Container = _this$props.Container,
          Input = _this$props.Input,
          Label = _this$props.Label,
          id = _this$props.id,
          value = _this$props.value,
          checked = _this$props.checked,
          rest = objectWithoutProperties(_this$props, ["className", "disabled", "required", "name", "description", "onChange", "Container", "Input", "Label", "id", "value", "checked"]);

      var finalId = id || this.defaultId;
      return React__default.createElement(Container, null, React__default.createElement(Input, _extends_1({
        id: finalId,
        className: className,
        name: name,
        type: "checkbox",
        disabled: disabled,
        checked: checked,
        value: value,
        required: required,
        onChange: onChange
      }, rest)), React__default.createElement(Label, {
        htmlFor: finalId
      }, description));
    }
  }]);

  return Toggle;
}(React__default.PureComponent);

defineProperty(Toggle, "propTypes", {
  /**
   * Adds a class name to the input element.
   */
  className: propTypes.string,

  /**
   * Adds an id to the input element.
   */
  id: propTypes.string,

  /**
   * The literal value this toggle represents. For example, if this toggle
   * represents whether the app is in "Dark Mode", you might provide "darkMode"
   * to this prop to represent that value key.
   */
  value: propTypes.string,

  /**
   * Whether the toggle is 'on' or 'off'.
   */
  checked: propTypes.bool,

  /**
   * Whether the toggle is required for form submission.
   */
  required: propTypes.bool,

  /**
   * Whether the user is prevented from interacting with the toggle.
   */
  disabled: propTypes.bool,

  /**
   * Adds a name to the underlying input.
   */
  name: propTypes.string,

  /**
   * A description to display next to the toggle.
   */
  description: propTypes.node,

  /**
   * Callback for the onChange event of the input.
   */
  onChange: propTypes.func,

  /**
   * A component to render the container around the toggle and label
   */
  Container: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A component to render the input element, usually hidden
   */
  Input: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A component to render the label, which usually also renders the toggle itself
   */
  Label: propTypes.oneOfType([propTypes.func, propTypes.object])
});

defineProperty(Toggle, "defaultProps", {
  className: null,
  id: null,
  value: undefined,
  checked: undefined,
  name: null,
  required: false,
  disabled: false,
  description: null,
  onChange: function onChange() {
    return null;
  },
  Container: Container$d,
  Input: Input$3,
  Label: Label$2
});

defineProperty(Toggle, "styles", styles$z);

var Button$1 = styled__default.button.withConfig({
  displayName: "Button",
  componentId: "sc-1bgn3r0-0"
})(["padding:", " ", ";background:", ";border-color:", ";border-width:", ";border-style:solid;border-radius:3px;cursor:pointer;color:", ";font-weight:700;text-align:center;text-transform:uppercase;cursor:pointer;user-select:none;transition:0.2s ease;font-size:14px;font-family:", ";height:53px;outline:unset;&:disabled{color:", ";background-color:", ";border-color:", ";cursor:default;}&:hover:not(:disabled){box-shadow:", ";}", ";"], themeGet('spacing.small'), themeGet('spacing.medium'), themeGet('colors.background.default'), themeGet('colors.border.dark'), themeGet('thicknesses.wide'), themeGet('colors.primary.dark'), themeGet('fonts.brand'), themeGet('colors.text.disabled'), themeGet('colors.background.disabled'), themeGet('colors.border.disabled'), themeGet('shadows.focusOutline'), function (_ref) {
  var selected = _ref.selected;
  return selected && styled.css(["background:", ";color:", ";border-color:", ";&:disabled{background-color:", ";border-color:", ";color:", ";}"], themeGet('colors.primary.dark'), themeGet('colors.text.inverted'), themeGet('colors.primary.dark'), themeGet('colors.background.disabledSelected'), themeGet('colors.border.disabled'), themeGet('colors.text.inverted'));
});
Button$1.Colorful = styled__default(Button$1).withConfig({
  displayName: "Button__Colorful",
  componentId: "sc-1bgn3r0-1"
})(["", ";"], function (_ref2) {
  var selected = _ref2.selected,
      hovered = _ref2.hovered;
  return selected ? styled.css(["background-color:", ";border-color:", ";color:", ";"], hovered ? themeGet('colors.negative.medium') : themeGet('colors.positive.medium'), hovered ? themeGet('colors.negative.medium') : themeGet('colors.positive.medium'), themeGet('colors.text.inverted')) : '';
});
Button$1.Small = styled__default(Button$1).withConfig({
  displayName: "Button__Small",
  componentId: "sc-1bgn3r0-2"
})(["height:30px;font-size:0.8em;padding:0 10px;min-width:30px;"]);



var styles$A = /*#__PURE__*/Object.freeze({
  Button: Button$1
});

/**
 * `ToggleButton` is a simple styled button with some extra functionality built-in for handling selection. Control
 * it by setting `selected`, then use its `onClick` or `onSelect/onDeselect` handlers to implement selection or hook
 * into the [Selectable](/#!/Selectable) behavior. Set `name` to keep track of which button was pressed when a
 * click handler fires.
 */

var ToggleButton =
/*#__PURE__*/
function (_React$PureComponent) {
  inherits(ToggleButton, _React$PureComponent);

  function ToggleButton() {
    var _getPrototypeOf2;

    var _this;

    classCallCheck(this, ToggleButton);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(ToggleButton)).call.apply(_getPrototypeOf2, [this].concat(args)));

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "state", {
      internalHovered: false
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleClick", function (ev) {
      ev.preventDefault();

      var _assertThisInitialize = assertThisInitialized(assertThisInitialized(_this)),
          _assertThisInitialize2 = _assertThisInitialize.props,
          onClick = _assertThisInitialize2.onClick,
          onDeselect = _assertThisInitialize2.onDeselect,
          onSelect = _assertThisInitialize2.onSelect,
          selected = _assertThisInitialize2.selected,
          name = _assertThisInitialize2.name;

      onClick(name, selected);
      selected ? onDeselect(name) : onSelect(name);
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleMouseEnter", function () {
      return _this.setState({
        internalHovered: true
      });
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleMouseLeave", function () {
      return _this.setState({
        internalHovered: false
      });
    });

    return _this;
  }

  createClass(ToggleButton, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          Button = _this$props.Button,
          onClick = _this$props.onClick,
          onDeselect = _this$props.onDeselect,
          onSelect = _this$props.onSelect,
          hovered = _this$props.hovered,
          forwardRef = _this$props.forwardRef,
          rest = objectWithoutProperties(_this$props, ["Button", "onClick", "onDeselect", "onSelect", "hovered", "forwardRef"]),
          internalHovered = this.state.internalHovered,
          handleClick = this.handleClick;

      return React__default.createElement(Button, _extends_1({
        ref: forwardRef,
        onMouseEnter: this.handleMouseEnter,
        onMouseLeave: this.handleMouseLeave,
        onMouseUp: this.handleMouseLeave,
        onClick: handleClick,
        hovered: hovered !== null && hovered != undefined ? hovered : internalHovered
      }, rest));
    }
  }]);

  return ToggleButton;
}(React__default.PureComponent);

defineProperty(ToggleButton, "propTypes", {
  /**
   * Callback when the toggle is clicked. Called with the signature `(name, selected)`.
   */
  onClick: propTypes.func,

  /**
   * Callback when the toggle is deselected. Called with the signature `(name)`.
   */
  onDeselect: propTypes.func,

  /**
   * Callback when the toggle is selected. Called with the signature `(name)`.
   */
  onSelect: propTypes.func,

  /**
   * Has no effect on rendering; acts as a key that you can use to identify the
   * **ToggleButton** when it invokes `onClick`, `onSelect`, or `onDeselect`.
   */
  name: propTypes.any,

  /**
   * Whether the button is selected or not
   */
  selected: propTypes.bool,

  /**
   * Whether the button is hovered or not
   */
  hovered: propTypes.bool
});

defineProperty(ToggleButton, "Small", defaultProps({
  Button: Button$1.Small
})(ToggleButton));

defineProperty(ToggleButton, "Colorful", defaultProps({
  Button: Button$1.Colorful
})(ToggleButton));

defineProperty(ToggleButton, "defaultProps", {
  onClick: lodash_noop,
  onDeselect: lodash_noop,
  onSelect: lodash_noop,
  selected: false,
  hovered: null,
  Button: Button$1
});

defineProperty(ToggleButton, "styles", styles$A);

var FloatingContainer = styled__default.div.withConfig({
  displayName: "CloseButton__FloatingContainer",
  componentId: "mv49nc-0"
})(["position:absolute;top:", ";right:", ";& > ", "{color:inherit;}&:hover,&:focus,&:active{color:", ";}"], themeGet('spacing.small'), themeGet('spacing.small'), Icon, themeGet('colors.primary.default'));
var CloseButton$1 = (function (props) {
  return React__default.createElement(FloatingContainer, null, React__default.createElement(Icon, _extends_1({
    name: "delete"
  }, props)));
});



var styles$B = /*#__PURE__*/Object.freeze({
  Container: Container$3,
  CloseButton: CloseButton$1
});

var Popup =
/*#__PURE__*/
function (_React$Component) {
  inherits(Popup, _React$Component);

  function Popup() {
    classCallCheck(this, Popup);

    return possibleConstructorReturn(this, getPrototypeOf(Popup).apply(this, arguments));
  }

  createClass(Popup, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          expanded = _this$props.expanded,
          onClose = _this$props.onClose,
          children = _this$props.children,
          Container = _this$props.Container,
          CloseButton = _this$props.CloseButton;
      return React__default.createElement(Consumer$1, null, function (layoutState) {
        return layoutState.renderElement('popup', React__default.createElement(Container, {
          expanded: expanded
        }, React__default.createElement(CloseButton, {
          onClick: onClose
        }), children));
      });
    }
  }]);

  return Popup;
}(React__default.Component);

defineProperty(Popup, "propTypes", {
  /**
   * The contents of the popup. These contents will be padded.
   */
  children: propTypes.node.isRequired,

  /**
   * Use this handler to detect when the popup has been closed by the user using the
   * built-in close button
   */
  onClose: propTypes.func.isRequired,

  /**
   * Supplies the expanded state to the popup. If false, the popup will not
   * be visible.
   */
  expanded: propTypes.bool.isRequired,

  /**
   * A component to render the container around the popup
   */
  Container: propTypes.oneOfType([propTypes.object, propTypes.func]),

  /**
   * A component to render the close button of the popup
   */
  CloseButton: propTypes.oneOfType([propTypes.object, propTypes.func])
});

defineProperty(Popup, "defaultProps", {
  Container: Container$3,
  CloseButton: CloseButton$1
});

defineProperty(Popup, "styles", styles$B);

SplitContentLayout.MainContent = MainContent;
SplitContentLayout.SecondaryContent = SecondaryContent;
SplitContentLayout.ActionBar = ActionBar;
SplitContentLayout.Popup = Popup;

var Layout = styled__default.div.withConfig({
  displayName: "Layout",
  componentId: "sc-1pr0om2-0"
})(["min-height:100vh;display:flex;flex-direction:column;& > .content-layout{flex:1;}"]);

var RootLayout$1 = function RootLayout(_ref) {
  var children = _ref.children,
      scrollShadowProps = _ref.scrollShadowProps,
      Layout$$1 = _ref.Layout,
      rest = objectWithoutProperties(_ref, ["children", "scrollShadowProps", "Layout"]);

  return React__default.createElement(ScrollShadow, _extends_1({
    global: true
  }, scrollShadowProps, rest), React__default.createElement(Layout$$1, null, children));
};

RootLayout$1.propTypes = {
  /**
   * Content to render within the layout - generally, your App
   */
  children: propTypes.node,

  /**
   * Any properties you want to pass into the internal ScrollShadow
   */
  scrollShadowProps: propTypes.object,

  /**
   * A Layout component to use in place of the default div.
   */
  Layout: propTypes.oneOfType([propTypes.object, propTypes.func])
};
RootLayout$1.defaultProps = {
  Layout: Layout
};

var FieldContent = styled__default.div.withConfig({
  displayName: "FieldContent",
  componentId: "jptfnm-0"
})(["display:flex;flex-direction:column;& > *{margin:", ";}"], function (props) {
  switch (props.align) {
    case 'left':
      return 'auto auto auto 0';

    case 'right':
      return 'auto 0 auto auto';

    default:
      return 'auto 0 auto 0';
  }
});

var AREA = {
  LABEL: 'label',
  CONTENT: 'content',
  HELP_TEXT: 'helpText'
};

var copyArea = function copyArea(input, times) {
  return new Array(times).fill(input).map(function (text, index) {
    return "".concat(text).concat(index);
  }).join(' ');
}; // Returns true if at least one child uses a label


var hasLabel = function hasLabel(children) {
  return React__default.Children.toArray(children).some(function (child) {
    return child.props.label && (typeof child.props.label !== 'string' || child.props.label.length > 0);
  });
}; // Returns true if at least one child uses help text


var hasHelpText = function hasHelpText(children) {
  return React__default.Children.toArray(children).some(function (child) {
    return child.props.helpText && (typeof child.props.helpText !== 'string' || child.props.helpText.length > 0);
  });
};
/*
 * We calculate whether we need the label and help text rows based on
 * whether any children need them. This helps deal with the gridGap,
 * as it will still be present if a grid area gets a size of zero.
 */


var includeArea = function includeArea(area, children) {
  if (area === AREA.LABEL) {
    return hasLabel(children);
  }

  if (area === AREA.HELP_TEXT) {
    return hasHelpText(children);
  }

  return true;
};

var calcGridAreas = function calcGridAreas(children) {
  return [AREA.LABEL, AREA.CONTENT, AREA.HELP_TEXT].filter(function (area) {
    return includeArea(area, children);
  });
};

var calcGridTemplateAreas = function calcGridTemplateAreas(children, columns) {
  return calcGridAreas(children).map(function (area) {
    return "\"".concat(copyArea(area, columns), "\"");
  }).join('\n');
};

var calcGridTemplateRows = function calcGridTemplateRows(children) {
  return calcGridAreas(children).map(function () {
    return 'auto';
  }).join(' ');
};

var FieldRowDiv = styled__default.div.withConfig({
  displayName: "FieldRow__FieldRowDiv",
  componentId: "sc-1x2zy1j-0"
})(["@supports (display:grid){display:grid;grid-gap:var(--spacing-small) var(--spacing-large);}display:flex;"]);

var FieldRow = function FieldRow(_ref) {
  var children = _ref.children,
      columns = _ref.columns,
      theme = _ref.theme;
  return React__default.createElement(FieldRowDiv, {
    style: {
      // each row has 3 sub-rows: label, content, helpText.
      // there's a named area for each column.
      gridTemplateAreas: calcGridTemplateAreas(children, columns),
      // each column has an equal size. To make fields larger than
      // adjacent fields, use the columnSpan prop on Field to span
      // multiple columns. This keeps all field sizes directly proportional
      gridTemplateColumns: "repeat(".concat(columns, ", 1fr)"),
      // label and helpText rows expand or contract as needed.
      // content row has a minimum size of 53px, and can expand as needed.
      gridTemplateRows: calcGridTemplateRows(children)
    }
  }, children);
};

FieldRow.defaultProps = {
  columnCount: 2
};

var FieldRowContainer = styled__default.div.withConfig({
  displayName: "FieldRowContainer",
  componentId: "sc-1vo4t7k-0"
})(["display:flex;flex-direction:column;& > div:not(:last-child){margin-bottom:", ";}"], themeGet('spacing.large'));

var HelpIcon = styled__default(Icon).withConfig({
  displayName: "HelpIcon",
  componentId: "rmrezd-0"
})(["color:var(--colors-primary-alternate);margin:auto;margin-left:var(--spacing-extra-small);font-weight:normal;position:absolute;"]);

var LabelContainer = styled__default.div.withConfig({
  displayName: "LabelContainer",
  componentId: "r5ospu-0"
})(["display:flex;flex-direction:row;align-items:baseline;"]);



var styles$C = /*#__PURE__*/Object.freeze({
  FieldContent: FieldContent,
  FieldRow: FieldRow,
  FieldRowContainer: FieldRowContainer,
  HelpIcon: HelpIcon,
  LabelContainer: LabelContainer
});

/**
 * A component that renders a collection of Field components into a grid, making space for
 * labels, help text, etc. Simply pass the number of columns into this component and render
 * Field components as its children.
 * @visibleName Field.Group
 */

var FieldGroup =
/*#__PURE__*/
function (_React$Component) {
  inherits(FieldGroup, _React$Component);

  function FieldGroup() {
    var _getPrototypeOf2;

    var _this;

    classCallCheck(this, FieldGroup);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(FieldGroup)).call.apply(_getPrototypeOf2, [this].concat(args)));

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "partitionFields", function () {
      var _this$props = _this.props,
          columns = _this$props.columns,
          children = _this$props.children,
          Row = _this$props.Row;
      var childArray = React__default.Children.toArray(children);
      var rows = childArray.reduce(function (rows, child) {
        var childColumnSpan = child.props.columnSpan || 1;

        if (childColumnSpan > columns) {
          throw new Error("A Field has a columnSpan of ".concat(childColumnSpan, ", but the containing Field.Group only has ").concat(columns, " columns"));
        }

        var currentRow = rows[rows.length - 1];

        if (currentRow.columnWidth + childColumnSpan <= columns) {
          // add to current row
          return toConsumableArray(rows.slice(0, rows.length - 1)).concat([{
            children: toConsumableArray(currentRow.children).concat([{
              column: currentRow.columnWidth,
              element: child
            }]),
            columnWidth: currentRow.columnWidth + childColumnSpan
          }]);
        } else {
          // create new row
          return toConsumableArray(rows).concat([{
            children: [{
              column: 0,
              element: child
            }],
            columnWidth: childColumnSpan
          }]);
        }
      }, [{
        children: [],
        columnWidth: 0
      }]);
      return rows.map(function (row, rowIdx) {
        return React__default.createElement(Row, {
          key: rowIdx,
          columns: columns
        }, row.children.map(function (_ref) {
          var element = _ref.element,
              column = _ref.column;
          return React__default.cloneElement(element, {
            column: column
          });
        }));
      });
    });

    return _this;
  }

  createClass(FieldGroup, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          RowContainer = _this$props2.RowContainer,
          Row = _this$props2.Row,
          columns = _this$props2.columns,
          rest = objectWithoutProperties(_this$props2, ["RowContainer", "Row", "columns"]);

      return React__default.createElement(RowContainer, rest, this.partitionFields());
    }
  }]);

  return FieldGroup;
}(React__default.Component);

defineProperty(FieldGroup, "propTypes", {
  /**
   * The number of columns to divide the fieldset into when rendering. Field.Group can span multiple columns if provided
   * with a columnSpan prop. Field.Group which overflow the column limit will be added to new rows. If a Field's
   * columnSpan is too large to fit in the current row, it will be wrapped to the next one.
   */
  columns: propTypes.number,

  /**
   * A component prop to override the component used to render the outer container which renders field rows.
   * Defaults to Field.Group.styles.FieldRowContainer.
   */
  RowContainer: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A component prop to override the component which is injected to wrap Field elements into discrete rows.
   * Row receives the same `columns` prop provided to this component. Defaults to Field.Group.styles.FieldRow.
   */
  Row: propTypes.oneOfType([propTypes.func, propTypes.object])
});

defineProperty(FieldGroup, "defaultProps", {
  RowContainer: FieldRowContainer,
  Row: FieldRow,
  columns: 2
});

defineProperty(FieldGroup, "styles", styles$C);

/**
 * Field and Field.Group handle form field layout automatically, dividing form items into a grid and aligning them automatically.
 * Include a single Field.Group with any number of Field components as direct children. The number of `columns` can be specified on the
 * Field.Group, and each Field can be assigned a number of columns to take up using the `columnSpan` prop. Each Field should include
 * any contents as `children` (e.g., `<Field><Input /></Field>`). Each field can also have `label`, `helpCallout`, and `helpText` props
 * to define additional information around the component. Field.Group uses a two-column layout by default.
 *
 * If you are using Field with a library to manage form state, such as ReduxForm or Formik, it can be helpful to bind them within your code.
 */

var Field =
/*#__PURE__*/
function (_React$Component) {
  inherits(Field, _React$Component);

  function Field() {
    var _getPrototypeOf2;

    var _this;

    classCallCheck(this, Field);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Field)).call.apply(_getPrototypeOf2, [this].concat(args)));

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "stylesFor", function (gridName) {
      var _this$props = _this.props,
          column = _this$props.column,
          columnSpan = _this$props.columnSpan;
      var endColumn = column + columnSpan - 1;
      return {
        gridArea: "".concat(gridName).concat(column, " / ").concat(gridName).concat(column, " / ").concat(gridName).concat(endColumn, " / ").concat(gridName).concat(endColumn),
        // align-self determines how the parts vertically align if an adjacent part is taller.
        // labels should stick to the bottom if an adjacent label has two or more lines.
        // content and helpText should stick to the top if an adjacent element is taller than them.
        alignSelf: gridName === 'label' ? 'end' : 'start'
      };
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "renderLabel", function () {
      var _this$props2 = _this.props,
          label = _this$props2.label,
          disabled = _this$props2.disabled,
          required = _this$props2.required,
          Label$$1 = _this$props2.Label,
          LabelContainer$$1 = _this$props2.LabelContainer,
          children = _this$props2.children,
          helpCallout = _this$props2.helpCallout,
          helpCalloutProps = _this$props2.helpCalloutProps,
          HelpIcon$$1 = _this$props2.HelpIcon;

      if (!label) {
        return null;
      }

      var labelFor = lodash_get(children, 'props.id', null);
      var labelProps = {
        disabled: disabled,
        required: required,
        htmlFor: labelFor
      };
      var HelpCallout = helpCallout && React__default.createElement(Callout, _extends_1({
        style: {
          position: 'relative',
          top: '-15px'
        },
        content: helpCallout
      }, helpCalloutProps), React__default.createElement(HelpIcon$$1, {
        name: "help"
      }));
      var LabelComponent = typeof label === 'string' ? React__default.createElement(Label$$1, labelProps, label) : React__default.cloneElement(label, labelProps);
      return React__default.createElement(LabelContainer$$1, {
        style: _this.stylesFor('label')
      }, LabelComponent, HelpCallout);
    });

    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "renderHelpText", function () {
      var _this$props3 = _this.props,
          helpText = _this$props3.helpText,
          error = _this$props3.error,
          HelpText$$1 = _this$props3.HelpText;

      if (!helpText) {
        return null;
      }

      var helpTextProps = {
        style: _this.stylesFor('helpText'),
        error: error
      };

      if (typeof helpText === 'string') {
        return React__default.createElement(HelpText$$1, helpTextProps, helpText);
      }

      return React__default.cloneElement(helpText, helpTextProps);
    });

    return _this;
  }

  createClass(Field, [{
    key: "render",
    value: function render() {
      var _this$props4 = this.props,
          children = _this$props4.children,
          Content = _this$props4.Content,
          alignContent = _this$props4.alignContent,
          helpText = _this$props4.helpText,
          error = _this$props4.error,
          HelpText$$1 = _this$props4.HelpText,
          helpCallout = _this$props4.helpCallout,
          helpCalloutProps = _this$props4.helpCalloutProps,
          Label$$1 = _this$props4.Label,
          required = _this$props4.required,
          disabled = _this$props4.disabled,
          label = _this$props4.label,
          column = _this$props4.column,
          columnSpan = _this$props4.columnSpan,
          rest = objectWithoutProperties(_this$props4, ["children", "Content", "alignContent", "helpText", "error", "HelpText", "helpCallout", "helpCalloutProps", "Label", "required", "disabled", "label", "column", "columnSpan"]);

      return React__default.createElement(React__default.Fragment, null, this.renderLabel(), React__default.createElement(Content, _extends_1({
        style: this.stylesFor('content'),
        align: alignContent
      }, rest), children), this.renderHelpText());
    }
  }]);

  return Field;
}(React__default.Component);

defineProperty(Field, "Group", FieldGroup);

defineProperty(Field, "propTypes", {
  /**
   * **Automatically supplied within <Fields>**
   * Do not supply this prop if you are using Field within a Fields component.
   * The column index to place this field at within its row.
   */
  column: propTypes.number,

  /**
   * The number of columns which this field should span within its row.
   */
  columnSpan: propTypes.number,

  /**
   * (stretch|left|right): the alignment of contents within the Field
   */
  alignContent: propTypes.oneOf(['stretch', 'left', 'right']),

  /**
   * A string or node to render in the label position. A string will be wrapped with the Label component prop.
   * If you provide a custom node, it will receive the htmlFor prop. Please assign this prop to a <label> element.
   */
  label: propTypes.node,

  /**
   * Indicates if the field is required by the form.
   */
  required: propTypes.bool,

  /**
   * Disables the form label.
   */
  disabled: propTypes.bool,

  /**
   * Contents to render inside the main field area.
   */
  children: propTypes.node,

  /**
   * A string or node to render in the help text position. A string will be wrapped with the HelpText component prop.
   */
  helpText: propTypes.node,

  /**
   * A component prop to override the component used to render labels. Defaults to library Label.
   */
  Label: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A component prop to override the component used to render help text. Defaults to library HelpText.
   */
  HelpText: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A component prop to override the component used to wrap field content. Defaults to Field.styles.FieldContent.
   */
  Content: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A component prop to override the component used to wrap the Label. Defaults to
   * Field.styles.LabelContainer
   */
  LabelContainer: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * A component prop to override the component used to render the help icon. Defaults
   * to Field.styles.HelpIcon
   */
  HelpIcon: propTypes.oneOfType([propTypes.func, propTypes.object]),

  /**
   * Content to render inside the callout.
   */
  helpCallout: propTypes.node,

  /**
   * Additional props for callout
   */
  helpCalloutProps: propTypes.shape({
    /**
     * Miliseconds to wait before showing the callout.
     */
    delay: propTypes.number,

    /**
     * Where to place the element. Use a value from react-popper
     */
    placement: propTypes.string,

    /**
     * Boundary for the callout; either a selector or a DOM element
     */
    boundary: propTypes.oneOfType([propTypes.string, propTypes.object]),

    /**
     * Maximum width of the callout
     */
    maxWidth: propTypes.number
  })
});

defineProperty(Field, "defaultProps", {
  column: 0,
  columnSpan: 1,
  Label: Label,
  HelpText: HelpText,
  Content: FieldContent,
  LabelContainer: LabelContainer,
  HelpIcon: HelpIcon,
  helpText: null,
  label: null,
  required: false,
  disabled: false,
  helpCallout: null,
  helpCalloutProps: {}
});

defineProperty(Field, "styles", styles$C);

var normalize$1 = function normalize(size) {
  if (!size) {
    return 'large';
  }

  switch (size) {
    case 'xs':
    case 'extraSmall':
      return 'extraSmall';

    case 'sm':
    case 'small':
      return 'small';

    case 'lg':
    case 'large':
      return 'large';

    case 'xl':
    case 'extraLarge':
      return 'extraLarge';

    case 'md':
    case 'medium':
      return 'medium';

    default:
      return size;
  }
};

var getSpacing = function getSpacing(props, size) {
  try {
    return themeGet("spacing.".concat(normalize$1(size)))(props);
  } catch (err) {
    return size;
  }
};

var Spacing = styled__default.div.withConfig({
  displayName: "Spacing",
  componentId: "alg4bh-0"
})(["", " ", " ", " ", " ", ";"], function (props) {
  return "padding: ".concat(getSpacing(props, props.size), ";");
}, function (props) {
  return props.top ? "padding-top: ".concat(getSpacing(props, props.top), ";") : '';
}, function (props) {
  return props.bottom ? "padding-bottom: ".concat(getSpacing(props, props.bottom), ";") : '';
}, function (props) {
  return props.left ? "padding-left: ".concat(getSpacing(props, props.left), ";") : '';
}, function (props) {
  return props.right ? "padding-right: ".concat(getSpacing(props, props.right), ";") : '';
});
Spacing.propTypes = {
  /**
   * The default size to be applied to all directions. [xs, sm, md, lg, xl] or a CSS dimension.
   */
  size: propTypes.string,

  /**
   * The top spacing size. [xs, sm, md, lg, xl] or a CSS dimension.
   */
  top: propTypes.string,

  /**
   * The bottom spacing size. [xs, sm, md, lg, xl] or a CSS dimension.
   */
  bottom: propTypes.string,

  /**
   * The left spacing size. [xs, sm, md, lg, xl] or a CSS dimension.
   */
  left: propTypes.string,

  /**
   * The right spacing size. [xs, sm, md, lg, xl] or a CSS dimension.
   */
  right: propTypes.string,

  /**
   * Adds a class name to the element.
   */
  className: propTypes.string,

  /**
   * Adds an id to the element.
   */
  id: propTypes.string
};
Spacing.defaultProps = {
  size: 'lg',
  top: null,
  bottom: null,
  left: null,
  right: null,
  className: null,
  id: null
};

var GridDiv = styled__default.div.withConfig({
  displayName: "Grid__GridDiv",
  componentId: "o9o2g0-0"
})(["display:grid;grid-auto-rows:min-content;grid-gap:", ";grid-template-columns:", ";& > *{grid-column:1 span;}"], function (_ref) {
  var gridGap = _ref.gridGap;
  return gridGap;
}, function (_ref2) {
  var columns = _ref2.columns,
      minSize = _ref2.minSize,
      maxSize = _ref2.maxSize;
  return "repeat(".concat(columns, ", minmax(").concat(minSize, ", ").concat(maxSize, "))");
});
/**
 * `Grid` utilizes CSS grid to provide some basic grid functionality without needing to delve into CSS.
 * Typical usage will either provide `minSize` to set the minimum size of each column, which will then
 * be auto fit into rows and wrap, or will provide `columns` and allow the size of each column to automatically
 * be determined based on the available space.
 *
 * **NOTE:** If `columns` is unchanged or set to `'auto-fill'` or `'auto-fit'`, then `minSize` must be set.
 */

var Grid =
/*#__PURE__*/
function (_React$PureComponent) {
  inherits(Grid, _React$PureComponent);

  function Grid() {
    classCallCheck(this, Grid);

    return possibleConstructorReturn(this, getPrototypeOf(Grid).apply(this, arguments));
  }

  createClass(Grid, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          columns = _this$props.columns,
          minSize = _this$props.minSize,
          maxSize = _this$props.maxSize,
          gridGap = _this$props.gridGap,
          children = _this$props.children,
          rest = objectWithoutProperties(_this$props, ["columns", "minSize", "maxSize", "gridGap", "children"]);

      return React__default.createElement(GridDiv, _extends_1({
        columns: columns,
        minSize: minSize,
        maxSize: maxSize,
        gridGap: gridGap
      }, rest), children);
    }
  }]);

  return Grid;
}(React__default.PureComponent);

defineProperty(Grid, "propTypes", {
  /**
   * The number of columns to use in the grid. Alternatively, provide "auto-fill"
   * or "auto-fit" to fit rows. See CSS grid for more details.
   */
  columns: propTypes.oneOfType([propTypes.number, propTypes.string]),

  /**
   * Minimum column size.
   */
  minSize: propTypes.string,

  /**
   * Maximum column size. Usually does not need to be set.
   */
  maxSize: propTypes.string,

  /**
   * Gap size between grid items both horizontally and vertically.
   */
  gridGap: propTypes.string
});

defineProperty(Grid, "defaultProps", {
  minSize: 'min-content',
  maxSize: '1fr',
  gridGap: 'var(--spacing-medium)',
  columns: 'auto-fit'
});

Grid.Small = defaultProps({
  gridGap: 'var(--spacing-extra-small)',
  minSize: '30px'
})(Grid);

exports.ExpandToggle = ExpandToggle;
exports.Selectable = Selectable$1;
exports.ScrollShadow = ScrollShadow;
exports.Foreground = Foreground;
exports.childrenWithProps = childrenWithProps;
exports.formatMoney = formatMoney;
exports.generateId = generateId;
exports.parseFlex = parseFlex;
exports.themeGet = themeGet;
exports.userSpacing = userSpacing;
exports.userTextSpacing = userTextSpacing;
exports.NAMESPACE = NAMESPACE;
exports.catapult = catapultTheme;
exports.iris = irisTheme;
exports.cssvars = cssvars;
exports.Pane = Pane;
exports.SplitContentLayout = SplitContentLayout;
exports.RootLayout = RootLayout$1;
exports.Field = Field;
exports.Horizontal = Horizontal;
exports.Spacing = Spacing;
exports.Grid = Grid;
exports.Accordion = Accordion;
exports.Alert = Alert;
exports.BandwidthProvider = BandwidthProvider$1;
exports.Breadcrumb = Breadcrumb;
exports.Button = Button;
exports.Callout = Callout;
exports.Card = Card;
exports.Checkbox = Checkbox;
exports.Code = Code;
exports.DatePicker = DatePicker;
exports.DateRangePicker = DateRangePicker;
exports.DateTimePicker = DateTimePicker;
exports.DragBox = DragBox$1;
exports.DragContainer = DragContainer;
exports.DragGroup = DragGroup$1;
exports.DragLayer = DefaultDragLayer;
exports.DragList = DragList;
exports.FileLoader = FileLoader;
exports.Gutter = Gutter;
exports.HeaderBar = HeaderBar;
exports.HelpText = HelpText;
exports.Icon = Icon;
exports.Input = Input$1;
exports.Label = Label;
exports.List = UnorderedList;
exports.Loader = Loader;
exports.Logo = Logo;
exports.MethodTag = MethodTag;
exports.Modal = Modal;
exports.Money = Money;
exports.Navigation = NavigationBar$1;
exports.NewBadge = NewBadge;
exports.Note = Note;
exports.P = P;
exports.Pagination = Pagination;
exports.Radio = Radio;
exports.RadioButton = RadioButton;
exports.SectionTitle = SectionTitle;
exports.Select = Select;
exports.Step = Step;
exports.Table = Table;
exports.Tab = Tab;
exports.TextArea = TextArea;
exports.TimePicker = TimePicker;
exports.TimeScrubber = TimeScrubber;
exports.Toggle = Toggle;
exports.ToggleButton = ToggleButton;
exports.Link = Link;
exports.H1 = H1;
exports.H2 = H2;
exports.H3 = H3;
exports.H4 = H4;
exports.H5 = H5;
